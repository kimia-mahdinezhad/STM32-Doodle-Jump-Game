
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007994  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08007b20  08007b20  00017b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c38  08007c38  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  08007c38  08007c38  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c38  08007c38  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c38  08007c38  00017c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c3c  08007c3c  00017c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08007c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
 10 .bss          0000032c  200000b8  200000b8  000200b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003e4  200003e4  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114e2  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002550  00000000  00000000  000315ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  00033b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df0  00000000  00000000  00034a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f65e  00000000  00000000  00035818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012285  00000000  00000000  00054e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c186a  00000000  00000000  000670fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00128965  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041bc  00000000  00000000  001289b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b8 	.word	0x200000b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b04 	.word	0x08007b04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000bc 	.word	0x200000bc
 80001c4:	08007b04 	.word	0x08007b04

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <player_dead>:

extern int program_state;
extern int difficulty_level;
extern int score;

void player_dead() {
 8000b00:	b5b0      	push	{r4, r5, r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	if (mapping[player_row][player_col] == 6) {
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <player_dead+0x84>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <player_dead+0x88>)
 8000b0a:	6819      	ldr	r1, [r3, #0]
 8000b0c:	481f      	ldr	r0, [pc, #124]	; (8000b8c <player_dead+0x8c>)
 8000b0e:	4613      	mov	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	440b      	add	r3, r1
 8000b18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000b1c:	2b06      	cmp	r3, #6
 8000b1e:	d11b      	bne.n	8000b58 <player_dead+0x58>
		begin(20, 4);
 8000b20:	2104      	movs	r1, #4
 8000b22:	2014      	movs	r0, #20
 8000b24:	f000 fc10 	bl	8001348 <begin>
		show_characters(player_row, player_col,
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <player_dead+0x84>)
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <player_dead+0x88>)
 8000b2e:	681c      	ldr	r4, [r3, #0]
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <player_dead+0x84>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <player_dead+0x88>)
 8000b36:	6819      	ldr	r1, [r3, #0]
 8000b38:	4d14      	ldr	r5, [pc, #80]	; (8000b8c <player_dead+0x8c>)
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	440b      	add	r3, r1
 8000b44:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	f000 faba 	bl	80010c4 <show_characters>
				mapping[player_row][player_col]);
		dead_by_enemy = 1;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <player_dead+0x90>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
	} else if (mapping[player_row][player_col] == 4) {
		program_state = end_page;
		set_end_page();
	}

}
 8000b56:	e012      	b.n	8000b7e <player_dead+0x7e>
	} else if (mapping[player_row][player_col] == 4) {
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <player_dead+0x84>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <player_dead+0x88>)
 8000b5e:	6819      	ldr	r1, [r3, #0]
 8000b60:	480a      	ldr	r0, [pc, #40]	; (8000b8c <player_dead+0x8c>)
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000b70:	2b04      	cmp	r3, #4
 8000b72:	d104      	bne.n	8000b7e <player_dead+0x7e>
		program_state = end_page;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <player_dead+0x94>)
 8000b76:	2206      	movs	r2, #6
 8000b78:	601a      	str	r2, [r3, #0]
		set_end_page();
 8000b7a:	f000 fb3b 	bl	80011f4 <set_end_page>
}
 8000b7e:	bf00      	nop
 8000b80:	bdb0      	pop	{r4, r5, r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000214 	.word	0x20000214
 8000b88:	20000218 	.word	0x20000218
 8000b8c:	200000d4 	.word	0x200000d4
 8000b90:	20000234 	.word	0x20000234
 8000b94:	20000244 	.word	0x20000244

08000b98 <player_right>:

void player_right() {
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	show_characters(player_row, player_col, mapping[player_row][player_col]);
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <player_right+0x5c>)
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <player_right+0x60>)
 8000ba2:	681c      	ldr	r4, [r3, #0]
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <player_right+0x5c>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <player_right+0x60>)
 8000baa:	6819      	ldr	r1, [r3, #0]
 8000bac:	4d13      	ldr	r5, [pc, #76]	; (8000bfc <player_right+0x64>)
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4621      	mov	r1, r4
 8000bc0:	f000 fa80 	bl	80010c4 <show_characters>

	player_row++;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <player_right+0x5c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <player_right+0x5c>)
 8000bcc:	6013      	str	r3, [r2, #0]
	if (player_row > 3) {
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <player_right+0x5c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	dd02      	ble.n	8000bdc <player_right+0x44>
		player_row = 0;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <player_right+0x5c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
	}

	show_characters(player_row, player_col, 1);
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <player_right+0x5c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <player_right+0x60>)
 8000be2:	6811      	ldr	r1, [r2, #0]
 8000be4:	2201      	movs	r2, #1
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fa6c 	bl	80010c4 <show_characters>
	player_dead();
 8000bec:	f7ff ff88 	bl	8000b00 <player_dead>
}
 8000bf0:	bf00      	nop
 8000bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bf4:	20000214 	.word	0x20000214
 8000bf8:	20000218 	.word	0x20000218
 8000bfc:	200000d4 	.word	0x200000d4

08000c00 <player_left>:

void player_left() {
 8000c00:	b5b0      	push	{r4, r5, r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	show_characters(player_row, player_col, mapping[player_row][player_col]);
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <player_left+0x5c>)
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <player_left+0x60>)
 8000c0a:	681c      	ldr	r4, [r3, #0]
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <player_left+0x5c>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <player_left+0x60>)
 8000c12:	6819      	ldr	r1, [r3, #0]
 8000c14:	4d13      	ldr	r5, [pc, #76]	; (8000c64 <player_left+0x64>)
 8000c16:	4613      	mov	r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4413      	add	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4621      	mov	r1, r4
 8000c28:	f000 fa4c 	bl	80010c4 <show_characters>

	player_row--;
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <player_left+0x5c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <player_left+0x5c>)
 8000c34:	6013      	str	r3, [r2, #0]
	if (player_row < 0) {
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <player_left+0x5c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	da02      	bge.n	8000c44 <player_left+0x44>
		player_row = 3;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <player_left+0x5c>)
 8000c40:	2203      	movs	r2, #3
 8000c42:	601a      	str	r2, [r3, #0]
	}

	show_characters(player_row, player_col, 1);
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <player_left+0x5c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <player_left+0x60>)
 8000c4a:	6811      	ldr	r1, [r2, #0]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fa38 	bl	80010c4 <show_characters>
	player_dead();
 8000c54:	f7ff ff54 	bl	8000b00 <player_dead>
}
 8000c58:	bf00      	nop
 8000c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c5c:	20000214 	.word	0x20000214
 8000c60:	20000218 	.word	0x20000218
 8000c64:	200000d4 	.word	0x200000d4

08000c68 <generate_map>:

void generate_map() {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	show_characters(0, 0, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 fa27 	bl	80010c4 <show_characters>

	show_characters(0, 5, 2);
 8000c76:	2202      	movs	r2, #2
 8000c78:	2105      	movs	r1, #5
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 fa22 	bl	80010c4 <show_characters>
	mapping[0][5] = 2;
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <generate_map+0x68>)
 8000c82:	2202      	movs	r2, #2
 8000c84:	615a      	str	r2, [r3, #20]

	show_characters(0, 15, 6);
 8000c86:	2206      	movs	r2, #6
 8000c88:	210f      	movs	r1, #15
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 fa1a 	bl	80010c4 <show_characters>
	mapping[0][15] = 6;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <generate_map+0x68>)
 8000c92:	2206      	movs	r2, #6
 8000c94:	63da      	str	r2, [r3, #60]	; 0x3c

	show_characters(1, 6, 2);
 8000c96:	2202      	movs	r2, #2
 8000c98:	2106      	movs	r1, #6
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 fa12 	bl	80010c4 <show_characters>
	mapping[1][6] = 2;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <generate_map+0x68>)
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	669a      	str	r2, [r3, #104]	; 0x68

	show_characters(3, 7, 5);
 8000ca6:	2205      	movs	r2, #5
 8000ca8:	2107      	movs	r1, #7
 8000caa:	2003      	movs	r0, #3
 8000cac:	f000 fa0a 	bl	80010c4 <show_characters>
	mapping[3][7] = 5;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <generate_map+0x68>)
 8000cb2:	2205      	movs	r2, #5
 8000cb4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	show_characters(3, 15, 3);
 8000cb8:	2203      	movs	r2, #3
 8000cba:	210f      	movs	r1, #15
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 fa01 	bl	80010c4 <show_characters>
	mapping[3][15] = 3;
 8000cc2:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <generate_map+0x68>)
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000d4 	.word	0x200000d4

08000cd4 <possible_jump>:

void possible_jump() {
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
	if (dead_by_enemy == 0) {
 8000cd8:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <possible_jump+0xe8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d168      	bne.n	8000db2 <possible_jump+0xde>
		if (mapping[player_row][player_col - 1] == 2) {
 8000ce0:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <possible_jump+0xec>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <possible_jump+0xf0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	1e59      	subs	r1, r3, #1
 8000cea:	4837      	ldr	r0, [pc, #220]	; (8000dc8 <possible_jump+0xf4>)
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d126      	bne.n	8000d4c <possible_jump+0x78>
			if (last_platform_col < player_col - 1) {
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <possible_jump+0xf0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	1e5a      	subs	r2, r3, #1
 8000d04:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <possible_jump+0xf8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dd18      	ble.n	8000d3e <possible_jump+0x6a>
				distance = player_col - last_platform_col - 1;
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <possible_jump+0xf0>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <possible_jump+0xf8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	3b01      	subs	r3, #1
 8000d18:	4a2d      	ldr	r2, [pc, #180]	; (8000dd0 <possible_jump+0xfc>)
 8000d1a:	6013      	str	r3, [r2, #0]
				score += (difficulty_level + 1) * distance;
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <possible_jump+0x100>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	4a2b      	ldr	r2, [pc, #172]	; (8000dd0 <possible_jump+0xfc>)
 8000d24:	6812      	ldr	r2, [r2, #0]
 8000d26:	fb02 f203 	mul.w	r2, r2, r3
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <possible_jump+0x104>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a29      	ldr	r2, [pc, #164]	; (8000dd8 <possible_jump+0x104>)
 8000d32:	6013      	str	r3, [r2, #0]
				last_platform_col = player_col - 1;
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <possible_jump+0xf0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	4a24      	ldr	r2, [pc, #144]	; (8000dcc <possible_jump+0xf8>)
 8000d3c:	6013      	str	r3, [r2, #0]
			}
			jumping = 7;
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <possible_jump+0x108>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
			position = 1;
 8000d44:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <possible_jump+0x10c>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
			position = 1;
		} else if (mapping[player_row][player_col - 1] == 3) {
			mapping[player_row][player_col - 1] = 0;
		}
	}
}
 8000d4a:	e032      	b.n	8000db2 <possible_jump+0xde>
		} else if (mapping[player_row][player_col - 1] == 5) {
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <possible_jump+0xec>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <possible_jump+0xf0>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	1e59      	subs	r1, r3, #1
 8000d56:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <possible_jump+0xf4>)
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000d66:	2b05      	cmp	r3, #5
 8000d68:	d106      	bne.n	8000d78 <possible_jump+0xa4>
			jumping = 20;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <possible_jump+0x108>)
 8000d6c:	2214      	movs	r2, #20
 8000d6e:	601a      	str	r2, [r3, #0]
			position = 1;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <possible_jump+0x10c>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
}
 8000d76:	e01c      	b.n	8000db2 <possible_jump+0xde>
		} else if (mapping[player_row][player_col - 1] == 3) {
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <possible_jump+0xec>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <possible_jump+0xf0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	1e59      	subs	r1, r3, #1
 8000d82:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <possible_jump+0xf4>)
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d10d      	bne.n	8000db2 <possible_jump+0xde>
			mapping[player_row][player_col - 1] = 0;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <possible_jump+0xec>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <possible_jump+0xf0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	1e59      	subs	r1, r3, #1
 8000da0:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <possible_jump+0xf4>)
 8000da2:	4613      	mov	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	440b      	add	r3, r1
 8000dac:	2200      	movs	r2, #0
 8000dae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	20000234 	.word	0x20000234
 8000dc0:	20000214 	.word	0x20000214
 8000dc4:	20000218 	.word	0x20000218
 8000dc8:	200000d4 	.word	0x200000d4
 8000dcc:	2000021c 	.word	0x2000021c
 8000dd0:	20000220 	.word	0x20000220
 8000dd4:	20000250 	.word	0x20000250
 8000dd8:	2000024c 	.word	0x2000024c
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	20000000 	.word	0x20000000

08000de4 <player_up>:

void player_up() {
 8000de4:	b5b0      	push	{r4, r5, r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	show_characters(player_row, player_col, mapping[player_row][player_col]);
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <player_up+0x58>)
 8000dea:	6818      	ldr	r0, [r3, #0]
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <player_up+0x5c>)
 8000dee:	681c      	ldr	r4, [r3, #0]
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <player_up+0x58>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <player_up+0x5c>)
 8000df6:	6819      	ldr	r1, [r3, #0]
 8000df8:	4d12      	ldr	r5, [pc, #72]	; (8000e44 <player_up+0x60>)
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	440b      	add	r3, r1
 8000e04:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4621      	mov	r1, r4
 8000e0c:	f000 f95a 	bl	80010c4 <show_characters>

	player_col++;
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <player_up+0x5c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <player_up+0x5c>)
 8000e18:	6013      	str	r3, [r2, #0]
	show_characters(player_row, player_col, 1);
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <player_up+0x58>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <player_up+0x5c>)
 8000e20:	6811      	ldr	r1, [r2, #0]
 8000e22:	2201      	movs	r2, #1
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f94d 	bl	80010c4 <show_characters>

	position++;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <player_up+0x64>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <player_up+0x64>)
 8000e32:	6013      	str	r3, [r2, #0]
	player_dead();
 8000e34:	f7ff fe64 	bl	8000b00 <player_dead>
}
 8000e38:	bf00      	nop
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	20000214 	.word	0x20000214
 8000e40:	20000218 	.word	0x20000218
 8000e44:	200000d4 	.word	0x200000d4
 8000e48:	20000000 	.word	0x20000000

08000e4c <player_down>:

void player_down() {
 8000e4c:	b5b0      	push	{r4, r5, r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	if (dead_by_enemy == 0) {
 8000e50:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <player_down+0x88>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d114      	bne.n	8000e82 <player_down+0x36>
		show_characters(player_row, player_col,
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <player_down+0x8c>)
 8000e5a:	6818      	ldr	r0, [r3, #0]
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <player_down+0x90>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <player_down+0x8c>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <player_down+0x90>)
 8000e66:	6819      	ldr	r1, [r3, #0]
 8000e68:	4d1d      	ldr	r5, [pc, #116]	; (8000ee0 <player_down+0x94>)
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	440b      	add	r3, r1
 8000e74:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4621      	mov	r1, r4
 8000e7c:	f000 f922 	bl	80010c4 <show_characters>
 8000e80:	e007      	b.n	8000e92 <player_down+0x46>
				mapping[player_row][player_col]);
	} else {
		show_characters(player_row, player_col, 0);
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <player_down+0x8c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a15      	ldr	r2, [pc, #84]	; (8000edc <player_down+0x90>)
 8000e88:	6811      	ldr	r1, [r2, #0]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f919 	bl	80010c4 <show_characters>
	}

	player_col--;
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <player_down+0x90>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	4a10      	ldr	r2, [pc, #64]	; (8000edc <player_down+0x90>)
 8000e9a:	6013      	str	r3, [r2, #0]
	show_characters(player_row, player_col, 1);
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <player_down+0x8c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <player_down+0x90>)
 8000ea2:	6811      	ldr	r1, [r2, #0]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f90c 	bl	80010c4 <show_characters>

	if (player_col == 0) {
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <player_down+0x90>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d105      	bne.n	8000ec0 <player_down+0x74>
		set_end_page();
 8000eb4:	f000 f99e 	bl	80011f4 <set_end_page>
		program_state = end_page;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <player_down+0x98>)
 8000eba:	2206      	movs	r2, #6
 8000ebc:	601a      	str	r2, [r3, #0]
		return;
 8000ebe:	e008      	b.n	8000ed2 <player_down+0x86>
	}

	position--;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <player_down+0x9c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <player_down+0x9c>)
 8000ec8:	6013      	str	r3, [r2, #0]

	possible_jump();
 8000eca:	f7ff ff03 	bl	8000cd4 <possible_jump>
	player_dead();
 8000ece:	f7ff fe17 	bl	8000b00 <player_dead>
}
 8000ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ed4:	20000234 	.word	0x20000234
 8000ed8:	20000214 	.word	0x20000214
 8000edc:	20000218 	.word	0x20000218
 8000ee0:	200000d4 	.word	0x200000d4
 8000ee4:	20000244 	.word	0x20000244
 8000ee8:	20000000 	.word	0x20000000

08000eec <shoot>:
void shoot() {
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	show_characters(bullet_row, bullet_col, mapping[bullet_row][bullet_col]);
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <shoot+0xa4>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <shoot+0xa8>)
 8000ef6:	681c      	ldr	r4, [r3, #0]
 8000ef8:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <shoot+0xa4>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <shoot+0xa8>)
 8000efe:	6819      	ldr	r1, [r3, #0]
 8000f00:	4d25      	ldr	r5, [pc, #148]	; (8000f98 <shoot+0xac>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4621      	mov	r1, r4
 8000f14:	f000 f8d6 	bl	80010c4 <show_characters>

	bullet_col++;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <shoot+0xa8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	4a1d      	ldr	r2, [pc, #116]	; (8000f94 <shoot+0xa8>)
 8000f20:	6013      	str	r3, [r2, #0]
	show_characters(bullet_row, bullet_col, 7);
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <shoot+0xa4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <shoot+0xa8>)
 8000f28:	6811      	ldr	r1, [r2, #0]
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f8c9 	bl	80010c4 <show_characters>

	if (bullet_col == 19) {
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <shoot+0xa8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b13      	cmp	r3, #19
 8000f38:	d102      	bne.n	8000f40 <shoot+0x54>
		shooting = 0;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <shoot+0xb0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
	}

	if (mapping[bullet_row][bullet_col] == 6) {
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <shoot+0xa4>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <shoot+0xa8>)
 8000f46:	6819      	ldr	r1, [r3, #0]
 8000f48:	4813      	ldr	r0, [pc, #76]	; (8000f98 <shoot+0xac>)
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000f58:	2b06      	cmp	r3, #6
 8000f5a:	d117      	bne.n	8000f8c <shoot+0xa0>
		mapping[bullet_row][bullet_col] = 0;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <shoot+0xa4>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <shoot+0xa8>)
 8000f62:	6819      	ldr	r1, [r3, #0]
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <shoot+0xac>)
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	2200      	movs	r2, #0
 8000f72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		show_characters(bullet_row, bullet_col, 0);
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <shoot+0xa4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <shoot+0xa8>)
 8000f7c:	6811      	ldr	r1, [r2, #0]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f89f 	bl	80010c4 <show_characters>
		shooting = 0;
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <shoot+0xb0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f90:	2000022c 	.word	0x2000022c
 8000f94:	20000230 	.word	0x20000230
 8000f98:	200000d4 	.word	0x200000d4
 8000f9c:	20000228 	.word	0x20000228

08000fa0 <update_position>:

void update_position() {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	counter++;
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <update_position+0x90>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	4a21      	ldr	r2, [pc, #132]	; (8001030 <update_position+0x90>)
 8000fac:	6013      	str	r3, [r2, #0]
	if (shooting && counter % 2 == 0) {
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <update_position+0x94>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d007      	beq.n	8000fc6 <update_position+0x26>
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <update_position+0x90>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <update_position+0x26>
		shoot();
 8000fc2:	f7ff ff93 	bl	8000eec <shoot>
	}
	if (counter % 3 == 0) {
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <update_position+0x90>)
 8000fc8:	6819      	ldr	r1, [r3, #0]
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <update_position+0x98>)
 8000fcc:	fb83 3201 	smull	r3, r2, r3, r1
 8000fd0:	17cb      	asrs	r3, r1, #31
 8000fd2:	1ad2      	subs	r2, r2, r3
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	1aca      	subs	r2, r1, r3
 8000fdc:	2a00      	cmp	r2, #0
 8000fde:	d125      	bne.n	800102c <update_position+0x8c>
		if (position == jumping + 1) {
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <update_position+0x9c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <update_position+0xa0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d103      	bne.n	8000ff6 <update_position+0x56>
			position = -1;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <update_position+0xa0>)
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	601a      	str	r2, [r3, #0]
		}
		if (position > 0 && position <= jumping && dead_by_enemy == 0) {
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <update_position+0xa0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	dd0c      	ble.n	8001018 <update_position+0x78>
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <update_position+0xa0>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <update_position+0x9c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	dc06      	bgt.n	8001018 <update_position+0x78>
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <update_position+0xa4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <update_position+0x78>
			player_up();
 8001012:	f7ff fee7 	bl	8000de4 <player_up>
		} else if (position < 0 || dead_by_enemy == 1) {
			player_down();
		}
	}
}
 8001016:	e009      	b.n	800102c <update_position+0x8c>
		} else if (position < 0 || dead_by_enemy == 1) {
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <update_position+0xa0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db03      	blt.n	8001028 <update_position+0x88>
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <update_position+0xa4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d101      	bne.n	800102c <update_position+0x8c>
			player_down();
 8001028:	f7ff ff10 	bl	8000e4c <player_down>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000224 	.word	0x20000224
 8001034:	20000228 	.word	0x20000228
 8001038:	55555556 	.word	0x55555556
 800103c:	20000004 	.word	0x20000004
 8001040:	20000000 	.word	0x20000000
 8001044:	20000234 	.word	0x20000234

08001048 <intialize>:

void intialize() {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	begin(20, 4);
 800104c:	2104      	movs	r1, #4
 800104e:	2014      	movs	r0, #20
 8001050:	f000 f97a 	bl	8001348 <begin>
	generate_map();
 8001054:	f7ff fe08 	bl	8000c68 <generate_map>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <set_Characters>:
byte blackhole[] = { 0x00, 0x00, 0x00, 0x0E, 0x1F, 0x0E, 0x00, 0x00 };
byte spring[] = { 0x01, 0x01, 0x0F, 0x0B, 0x0F, 0x01, 0x01, 0x01 };
byte enemy[] = { 0x00, 0x04, 0x0E, 0x1E, 0x0E, 0x04, 0x00, 0x00 };
byte bullet[] = { 0x00, 0x00, 0x00, 0x04, 0x0E, 0x04, 0x00, 0x00 };

void set_Characters() {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	createChar(0, blank);
 8001060:	4910      	ldr	r1, [pc, #64]	; (80010a4 <set_Characters+0x48>)
 8001062:	2000      	movs	r0, #0
 8001064:	f000 fbb1 	bl	80017ca <createChar>
	createChar(1, player);
 8001068:	490f      	ldr	r1, [pc, #60]	; (80010a8 <set_Characters+0x4c>)
 800106a:	2001      	movs	r0, #1
 800106c:	f000 fbad 	bl	80017ca <createChar>
	createChar(2, platform);
 8001070:	490e      	ldr	r1, [pc, #56]	; (80010ac <set_Characters+0x50>)
 8001072:	2002      	movs	r0, #2
 8001074:	f000 fba9 	bl	80017ca <createChar>
	createChar(3, broken_platform);
 8001078:	490d      	ldr	r1, [pc, #52]	; (80010b0 <set_Characters+0x54>)
 800107a:	2003      	movs	r0, #3
 800107c:	f000 fba5 	bl	80017ca <createChar>
	createChar(4, blackhole);
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <set_Characters+0x58>)
 8001082:	2004      	movs	r0, #4
 8001084:	f000 fba1 	bl	80017ca <createChar>
	createChar(5, spring);
 8001088:	490b      	ldr	r1, [pc, #44]	; (80010b8 <set_Characters+0x5c>)
 800108a:	2005      	movs	r0, #5
 800108c:	f000 fb9d 	bl	80017ca <createChar>
	createChar(6, enemy);
 8001090:	490a      	ldr	r1, [pc, #40]	; (80010bc <set_Characters+0x60>)
 8001092:	2006      	movs	r0, #6
 8001094:	f000 fb99 	bl	80017ca <createChar>
	createChar(7, bullet);
 8001098:	4909      	ldr	r1, [pc, #36]	; (80010c0 <set_Characters+0x64>)
 800109a:	2007      	movs	r0, #7
 800109c:	f000 fb95 	bl	80017ca <createChar>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000238 	.word	0x20000238
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000010 	.word	0x20000010
 80010b0:	20000018 	.word	0x20000018
 80010b4:	20000020 	.word	0x20000020
 80010b8:	20000028 	.word	0x20000028
 80010bc:	20000030 	.word	0x20000030
 80010c0:	20000038 	.word	0x20000038

080010c4 <show_characters>:

void show_characters(int row, int col, int character) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
	setCursor(col, row);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fb02 	bl	80016e4 <setCursor>
	write(character);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fba7 	bl	8001838 <write>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <set_start_page>:

void set_start_page() {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	setCursor(4, 2);
 80010f8:	2102      	movs	r1, #2
 80010fa:	2004      	movs	r0, #4
 80010fc:	f000 faf2 	bl	80016e4 <setCursor>
	print("Doodle  Jump");
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <set_start_page+0x24>)
 8001102:	f000 fb37 	bl	8001774 <print>

	setCursor(5, 3);
 8001106:	2103      	movs	r1, #3
 8001108:	2005      	movs	r0, #5
 800110a:	f000 faeb 	bl	80016e4 <setCursor>
	print("(BB: MENU)");
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <set_start_page+0x28>)
 8001110:	f000 fb30 	bl	8001774 <print>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	08007b20 	.word	0x08007b20
 800111c:	08007b30 	.word	0x08007b30

08001120 <menupage>:

void menupage() {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	begin(20, 4);
 8001124:	2104      	movs	r1, #4
 8001126:	2014      	movs	r0, #20
 8001128:	f000 f90e 	bl	8001348 <begin>

	setCursor(1, 0);
 800112c:	2100      	movs	r1, #0
 800112e:	2001      	movs	r0, #1
 8001130:	f000 fad8 	bl	80016e4 <setCursor>
	print("1: Start Game");
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <menupage+0x48>)
 8001136:	f000 fb1d 	bl	8001774 <print>

	setCursor(1, 1);
 800113a:	2101      	movs	r1, #1
 800113c:	2001      	movs	r0, #1
 800113e:	f000 fad1 	bl	80016e4 <setCursor>
	print("2: Change Name");
 8001142:	480a      	ldr	r0, [pc, #40]	; (800116c <menupage+0x4c>)
 8001144:	f000 fb16 	bl	8001774 <print>

	setCursor(1, 2);
 8001148:	2102      	movs	r1, #2
 800114a:	2001      	movs	r0, #1
 800114c:	f000 faca 	bl	80016e4 <setCursor>
	print("3: Help");
 8001150:	4807      	ldr	r0, [pc, #28]	; (8001170 <menupage+0x50>)
 8001152:	f000 fb0f 	bl	8001774 <print>

	setCursor(1, 3);
 8001156:	2103      	movs	r1, #3
 8001158:	2001      	movs	r0, #1
 800115a:	f000 fac3 	bl	80016e4 <setCursor>
	print("4: About");
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <menupage+0x54>)
 8001160:	f000 fb08 	bl	8001774 <print>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	08007b3c 	.word	0x08007b3c
 800116c:	08007b4c 	.word	0x08007b4c
 8001170:	08007b5c 	.word	0x08007b5c
 8001174:	08007b64 	.word	0x08007b64

08001178 <set_game_page>:

void set_game_page() {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	set_Characters();
 800117c:	f7ff ff6e 	bl	800105c <set_Characters>
	intialize();
 8001180:	f7ff ff62 	bl	8001048 <intialize>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <set_change_name_page>:

void set_change_name_page() {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	begin(20, 4);
 800118c:	2104      	movs	r1, #4
 800118e:	2014      	movs	r0, #20
 8001190:	f000 f8da 	bl	8001348 <begin>
	setCursor(1, 1);
 8001194:	2101      	movs	r1, #1
 8001196:	2001      	movs	r0, #1
 8001198:	f000 faa4 	bl	80016e4 <setCursor>
	print("change name");
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <set_change_name_page+0x20>)
 800119e:	f000 fae9 	bl	8001774 <print>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	08007b70 	.word	0x08007b70

080011ac <set_help_page>:

void set_help_page() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	begin(20, 4);
 80011b0:	2104      	movs	r1, #4
 80011b2:	2014      	movs	r0, #20
 80011b4:	f000 f8c8 	bl	8001348 <begin>
	setCursor(1, 1);
 80011b8:	2101      	movs	r1, #1
 80011ba:	2001      	movs	r0, #1
 80011bc:	f000 fa92 	bl	80016e4 <setCursor>
	print("help");
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <set_help_page+0x20>)
 80011c2:	f000 fad7 	bl	8001774 <print>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	08007b7c 	.word	0x08007b7c

080011d0 <set_about_page>:

void set_about_page() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	begin(20, 4);
 80011d4:	2104      	movs	r1, #4
 80011d6:	2014      	movs	r0, #20
 80011d8:	f000 f8b6 	bl	8001348 <begin>
	setCursor(1, 1);
 80011dc:	2101      	movs	r1, #1
 80011de:	2001      	movs	r0, #1
 80011e0:	f000 fa80 	bl	80016e4 <setCursor>
	print("about");
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <set_about_page+0x20>)
 80011e6:	f000 fac5 	bl	8001774 <print>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	08007b84 	.word	0x08007b84

080011f4 <set_end_page>:

void set_end_page() {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	begin(20, 4);
 80011f8:	2104      	movs	r1, #4
 80011fa:	2014      	movs	r0, #20
 80011fc:	f000 f8a4 	bl	8001348 <begin>
	setCursor(1, 1);
 8001200:	2101      	movs	r1, #1
 8001202:	2001      	movs	r0, #1
 8001204:	f000 fa6e 	bl	80016e4 <setCursor>
	print("mordi");
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <set_end_page+0x20>)
 800120a:	f000 fab3 	bl	8001774 <print>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	08007b8c 	.word	0x08007b8c

08001218 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	; 0x38
 800121c:	af0a      	add	r7, sp, #40	; 0x28
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	4608      	mov	r0, r1
 8001222:	4611      	mov	r1, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4603      	mov	r3, r0
 8001228:	817b      	strh	r3, [r7, #10]
 800122a:	460b      	mov	r3, r1
 800122c:	813b      	strh	r3, [r7, #8]
 800122e:	4613      	mov	r3, r2
 8001230:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <LiquidCrystal+0x90>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d019      	beq.n	800126e <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800123a:	8939      	ldrh	r1, [r7, #8]
 800123c:	897a      	ldrh	r2, [r7, #10]
 800123e:	2300      	movs	r3, #0
 8001240:	9308      	str	r3, [sp, #32]
 8001242:	2300      	movs	r3, #0
 8001244:	9307      	str	r3, [sp, #28]
 8001246:	2300      	movs	r3, #0
 8001248:	9306      	str	r3, [sp, #24]
 800124a:	2300      	movs	r3, #0
 800124c:	9305      	str	r3, [sp, #20]
 800124e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001250:	9304      	str	r3, [sp, #16]
 8001252:	8c3b      	ldrh	r3, [r7, #32]
 8001254:	9303      	str	r3, [sp, #12]
 8001256:	8bbb      	ldrh	r3, [r7, #28]
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	8b3b      	ldrh	r3, [r7, #24]
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	460b      	mov	r3, r1
 8001264:	68f9      	ldr	r1, [r7, #12]
 8001266:	2001      	movs	r0, #1
 8001268:	f000 f820 	bl	80012ac <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 800126c:	e018      	b.n	80012a0 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800126e:	8939      	ldrh	r1, [r7, #8]
 8001270:	897a      	ldrh	r2, [r7, #10]
 8001272:	2300      	movs	r3, #0
 8001274:	9308      	str	r3, [sp, #32]
 8001276:	2300      	movs	r3, #0
 8001278:	9307      	str	r3, [sp, #28]
 800127a:	2300      	movs	r3, #0
 800127c:	9306      	str	r3, [sp, #24]
 800127e:	2300      	movs	r3, #0
 8001280:	9305      	str	r3, [sp, #20]
 8001282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001284:	9304      	str	r3, [sp, #16]
 8001286:	8c3b      	ldrh	r3, [r7, #32]
 8001288:	9303      	str	r3, [sp, #12]
 800128a:	8bbb      	ldrh	r3, [r7, #28]
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	8b3b      	ldrh	r3, [r7, #24]
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	460b      	mov	r3, r1
 8001298:	68f9      	ldr	r1, [r7, #12]
 800129a:	2000      	movs	r0, #0
 800129c:	f000 f806 	bl	80012ac <init>
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000040 	.word	0x20000040

080012ac <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	4611      	mov	r1, r2
 80012b6:	461a      	mov	r2, r3
 80012b8:	4603      	mov	r3, r0
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	460b      	mov	r3, r1
 80012be:	81bb      	strh	r3, [r7, #12]
 80012c0:	4613      	mov	r3, r2
 80012c2:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 80012c4:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <init+0x84>)
 80012c6:	89bb      	ldrh	r3, [r7, #12]
 80012c8:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 80012ca:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <init+0x88>)
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 80012d0:	4a19      	ldr	r2, [pc, #100]	; (8001338 <init+0x8c>)
 80012d2:	8b3b      	ldrh	r3, [r7, #24]
 80012d4:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 80012d6:	4a19      	ldr	r2, [pc, #100]	; (800133c <init+0x90>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 80012dc:	4a18      	ldr	r2, [pc, #96]	; (8001340 <init+0x94>)
 80012de:	8bbb      	ldrh	r3, [r7, #28]
 80012e0:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 80012e2:	4a17      	ldr	r2, [pc, #92]	; (8001340 <init+0x94>)
 80012e4:	8c3b      	ldrh	r3, [r7, #32]
 80012e6:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 80012e8:	4a15      	ldr	r2, [pc, #84]	; (8001340 <init+0x94>)
 80012ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012ec:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <init+0x94>)
 80012f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012f2:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 80012f4:	4a12      	ldr	r2, [pc, #72]	; (8001340 <init+0x94>)
 80012f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012f8:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 80012fa:	4a11      	ldr	r2, [pc, #68]	; (8001340 <init+0x94>)
 80012fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80012fe:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8001300:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <init+0x94>)
 8001302:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001304:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <init+0x94>)
 8001308:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800130a:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	e002      	b.n	8001320 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <init+0x98>)
 800131c:	2210      	movs	r2, #16
 800131e:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8001320:	2102      	movs	r1, #2
 8001322:	2010      	movs	r0, #16
 8001324:	f000 f810 	bl	8001348 <begin>
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000284 	.word	0x20000284
 8001334:	20000264 	.word	0x20000264
 8001338:	20000282 	.word	0x20000282
 800133c:	20000268 	.word	0x20000268
 8001340:	20000270 	.word	0x20000270
 8001344:	20000281 	.word	0x20000281

08001348 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	460a      	mov	r2, r1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	4613      	mov	r3, r2
 8001356:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d906      	bls.n	800136c <begin+0x24>
    _displayfunction |= LCD_2LINE;
 800135e:	4b77      	ldr	r3, [pc, #476]	; (800153c <begin+0x1f4>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f043 0308 	orr.w	r3, r3, #8
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b74      	ldr	r3, [pc, #464]	; (800153c <begin+0x1f4>)
 800136a:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 800136c:	4a74      	ldr	r2, [pc, #464]	; (8001540 <begin+0x1f8>)
 800136e:	79bb      	ldrb	r3, [r7, #6]
 8001370:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8001372:	79fa      	ldrb	r2, [r7, #7]
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	3340      	adds	r3, #64	; 0x40
 8001378:	2140      	movs	r1, #64	; 0x40
 800137a:	2000      	movs	r0, #0
 800137c:	f000 f988 	bl	8001690 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8001380:	4b70      	ldr	r3, [pc, #448]	; (8001544 <begin+0x1fc>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d009      	beq.n	800139c <begin+0x54>
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d106      	bne.n	800139c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 800138e:	4b6b      	ldr	r3, [pc, #428]	; (800153c <begin+0x1f4>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b68      	ldr	r3, [pc, #416]	; (800153c <begin+0x1f4>)
 800139a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 800139c:	f000 f8e4 	bl	8001568 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 80013a8:	4b67      	ldr	r3, [pc, #412]	; (8001548 <begin+0x200>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d01b      	beq.n	80013e8 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 80013b0:	4b66      	ldr	r3, [pc, #408]	; (800154c <begin+0x204>)
 80013b2:	881a      	ldrh	r2, [r3, #0]
 80013b4:	4b66      	ldr	r3, [pc, #408]	; (8001550 <begin+0x208>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b65      	ldr	r3, [pc, #404]	; (8001554 <begin+0x20c>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b64      	ldr	r3, [pc, #400]	; (8001558 <begin+0x210>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b62      	ldr	r3, [pc, #392]	; (8001558 <begin+0x210>)
 80013ce:	885b      	ldrh	r3, [r3, #2]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b60      	ldr	r3, [pc, #384]	; (8001558 <begin+0x210>)
 80013d6:	889b      	ldrh	r3, [r3, #4]
 80013d8:	4313      	orrs	r3, r2
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b5e      	ldr	r3, [pc, #376]	; (8001558 <begin+0x210>)
 80013de:	88db      	ldrh	r3, [r3, #6]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e02a      	b.n	800143e <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80013e8:	4b58      	ldr	r3, [pc, #352]	; (800154c <begin+0x204>)
 80013ea:	881a      	ldrh	r2, [r3, #0]
 80013ec:	4b58      	ldr	r3, [pc, #352]	; (8001550 <begin+0x208>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4b57      	ldr	r3, [pc, #348]	; (8001554 <begin+0x20c>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80013fc:	4b56      	ldr	r3, [pc, #344]	; (8001558 <begin+0x210>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001400:	4313      	orrs	r3, r2
 8001402:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001404:	4b54      	ldr	r3, [pc, #336]	; (8001558 <begin+0x210>)
 8001406:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001408:	4313      	orrs	r3, r2
 800140a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800140c:	4b52      	ldr	r3, [pc, #328]	; (8001558 <begin+0x210>)
 800140e:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001410:	4313      	orrs	r3, r2
 8001412:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001414:	4b50      	ldr	r3, [pc, #320]	; (8001558 <begin+0x210>)
 8001416:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001418:	4313      	orrs	r3, r2
 800141a:	b29a      	uxth	r2, r3
 800141c:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <begin+0x210>)
 800141e:	891b      	ldrh	r3, [r3, #8]
 8001420:	4313      	orrs	r3, r2
 8001422:	b29a      	uxth	r2, r3
 8001424:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <begin+0x210>)
 8001426:	895b      	ldrh	r3, [r3, #10]
 8001428:	4313      	orrs	r3, r2
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b4a      	ldr	r3, [pc, #296]	; (8001558 <begin+0x210>)
 800142e:	899b      	ldrh	r3, [r3, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b48      	ldr	r3, [pc, #288]	; (8001558 <begin+0x210>)
 8001436:	89db      	ldrh	r3, [r3, #14]
 8001438:	4313      	orrs	r3, r2
 800143a:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800143c:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 800143e:	4b47      	ldr	r3, [pc, #284]	; (800155c <begin+0x214>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f107 020c 	add.w	r2, r7, #12
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f003 f809 	bl	8004460 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 800144e:	2032      	movs	r0, #50	; 0x32
 8001450:	f001 fba8 	bl	8002ba4 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8001454:	4b41      	ldr	r3, [pc, #260]	; (800155c <begin+0x214>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a3c      	ldr	r2, [pc, #240]	; (800154c <begin+0x204>)
 800145a:	8811      	ldrh	r1, [r2, #0]
 800145c:	2200      	movs	r2, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f003 f990 	bl	8004784 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001464:	4b3d      	ldr	r3, [pc, #244]	; (800155c <begin+0x214>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a3a      	ldr	r2, [pc, #232]	; (8001554 <begin+0x20c>)
 800146a:	8811      	ldrh	r1, [r2, #0]
 800146c:	2200      	movs	r2, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f003 f988 	bl	8004784 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8001474:	4b36      	ldr	r3, [pc, #216]	; (8001550 <begin+0x208>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	2bff      	cmp	r3, #255	; 0xff
 800147a:	d007      	beq.n	800148c <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 800147c:	4b37      	ldr	r3, [pc, #220]	; (800155c <begin+0x214>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a33      	ldr	r2, [pc, #204]	; (8001550 <begin+0x208>)
 8001482:	8811      	ldrh	r1, [r2, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f003 f97c 	bl	8004784 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 800148c:	4b2b      	ldr	r3, [pc, #172]	; (800153c <begin+0x1f4>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b00      	cmp	r3, #0
 8001496:	d115      	bne.n	80014c4 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 fa45 	bl	8001928 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800149e:	2005      	movs	r0, #5
 80014a0:	f001 fb80 	bl	8002ba4 <HAL_Delay>

    // second try
    write4bits(0x03);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 fa3f 	bl	8001928 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 80014aa:	2005      	movs	r0, #5
 80014ac:	f001 fb7a 	bl	8002ba4 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 fa39 	bl	8001928 <write4bits>
    HAL_Delay(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f001 fb74 	bl	8002ba4 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 80014bc:	2002      	movs	r0, #2
 80014be:	f000 fa33 	bl	8001928 <write4bits>
 80014c2:	e01d      	b.n	8001500 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <begin+0x1f4>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	f043 0320 	orr.w	r3, r3, #32
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f9a4 	bl	800181c <command>
    HAL_Delay(5);  // wait more than 4.1ms
 80014d4:	2005      	movs	r0, #5
 80014d6:	f001 fb65 	bl	8002ba4 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <begin+0x1f4>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	f043 0320 	orr.w	r3, r3, #32
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 f999 	bl	800181c <command>
    HAL_Delay(1);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f001 fb5a 	bl	8002ba4 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <begin+0x1f4>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	f043 0320 	orr.w	r3, r3, #32
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f98e 	bl	800181c <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <begin+0x1f4>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	b2db      	uxtb	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f986 	bl	800181c <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <begin+0x218>)
 8001512:	2204      	movs	r2, #4
 8001514:	701a      	strb	r2, [r3, #0]
  display();
 8001516:	f000 f917 	bl	8001748 <display>

  // clear it off
  clear();
 800151a:	f000 f8d9 	bl	80016d0 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <begin+0x21c>)
 8001520:	2202      	movs	r2, #2
 8001522:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <begin+0x21c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f974 	bl	800181c <command>

}
 8001534:	bf00      	nop
 8001536:	3720      	adds	r7, #32
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000281 	.word	0x20000281
 8001540:	2000026d 	.word	0x2000026d
 8001544:	20000240 	.word	0x20000240
 8001548:	20000040 	.word	0x20000040
 800154c:	20000284 	.word	0x20000284
 8001550:	20000264 	.word	0x20000264
 8001554:	20000282 	.word	0x20000282
 8001558:	20000270 	.word	0x20000270
 800155c:	20000268 	.word	0x20000268
 8001560:	2000026c 	.word	0x2000026c
 8001564:	20000280 	.word	0x20000280

08001568 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 800156e:	4b41      	ldr	r3, [pc, #260]	; (8001674 <enableClock+0x10c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001576:	d10c      	bne.n	8001592 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b3f      	ldr	r3, [pc, #252]	; (8001678 <enableClock+0x110>)
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	4a3e      	ldr	r2, [pc, #248]	; (8001678 <enableClock+0x110>)
 800157e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001582:	6153      	str	r3, [r2, #20]
 8001584:	4b3c      	ldr	r3, [pc, #240]	; (8001678 <enableClock+0x110>)
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8001590:	e06a      	b.n	8001668 <enableClock+0x100>
  else if(_port == GPIOB)
 8001592:	4b38      	ldr	r3, [pc, #224]	; (8001674 <enableClock+0x10c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a39      	ldr	r2, [pc, #228]	; (800167c <enableClock+0x114>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d10c      	bne.n	80015b6 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800159c:	4b36      	ldr	r3, [pc, #216]	; (8001678 <enableClock+0x110>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	4a35      	ldr	r2, [pc, #212]	; (8001678 <enableClock+0x110>)
 80015a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a6:	6153      	str	r3, [r2, #20]
 80015a8:	4b33      	ldr	r3, [pc, #204]	; (8001678 <enableClock+0x110>)
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	69bb      	ldr	r3, [r7, #24]
}
 80015b4:	e058      	b.n	8001668 <enableClock+0x100>
  else if(_port == GPIOB)
 80015b6:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <enableClock+0x10c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a30      	ldr	r2, [pc, #192]	; (800167c <enableClock+0x114>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d10c      	bne.n	80015da <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80015c0:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <enableClock+0x110>)
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	4a2c      	ldr	r2, [pc, #176]	; (8001678 <enableClock+0x110>)
 80015c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ca:	6153      	str	r3, [r2, #20]
 80015cc:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <enableClock+0x110>)
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697b      	ldr	r3, [r7, #20]
}
 80015d8:	e046      	b.n	8001668 <enableClock+0x100>
	else if(_port == GPIOC)
 80015da:	4b26      	ldr	r3, [pc, #152]	; (8001674 <enableClock+0x10c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a28      	ldr	r2, [pc, #160]	; (8001680 <enableClock+0x118>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d10c      	bne.n	80015fe <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80015e4:	4b24      	ldr	r3, [pc, #144]	; (8001678 <enableClock+0x110>)
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	4a23      	ldr	r2, [pc, #140]	; (8001678 <enableClock+0x110>)
 80015ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015ee:	6153      	str	r3, [r2, #20]
 80015f0:	4b21      	ldr	r3, [pc, #132]	; (8001678 <enableClock+0x110>)
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]
}
 80015fc:	e034      	b.n	8001668 <enableClock+0x100>
	else if(_port == GPIOD)
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <enableClock+0x10c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a20      	ldr	r2, [pc, #128]	; (8001684 <enableClock+0x11c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d10c      	bne.n	8001622 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <enableClock+0x110>)
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	4a1a      	ldr	r2, [pc, #104]	; (8001678 <enableClock+0x110>)
 800160e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001612:	6153      	str	r3, [r2, #20]
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <enableClock+0x110>)
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	e022      	b.n	8001668 <enableClock+0x100>
	else if(_port == GPIOE)
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <enableClock+0x10c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a18      	ldr	r2, [pc, #96]	; (8001688 <enableClock+0x120>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d10c      	bne.n	8001646 <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <enableClock+0x110>)
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	4a11      	ldr	r2, [pc, #68]	; (8001678 <enableClock+0x110>)
 8001632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001636:	6153      	str	r3, [r2, #20]
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <enableClock+0x110>)
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
}
 8001644:	e010      	b.n	8001668 <enableClock+0x100>
	else if(_port == GPIOF)
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <enableClock+0x10c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a10      	ldr	r2, [pc, #64]	; (800168c <enableClock+0x124>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d10b      	bne.n	8001668 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <enableClock+0x110>)
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	4a08      	ldr	r2, [pc, #32]	; (8001678 <enableClock+0x110>)
 8001656:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800165a:	6153      	str	r3, [r2, #20]
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <enableClock+0x110>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
}
 8001668:	bf00      	nop
 800166a:	3724      	adds	r7, #36	; 0x24
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	20000268 	.word	0x20000268
 8001678:	40021000 	.word	0x40021000
 800167c:	48000400 	.word	0x48000400
 8001680:	48000800 	.word	0x48000800
 8001684:	48000c00 	.word	0x48000c00
 8001688:	48001000 	.word	0x48001000
 800168c:	48001400 	.word	0x48001400

08001690 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <setRowOffsets+0x3c>)
 80016a4:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <setRowOffsets+0x3c>)
 80016ac:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <setRowOffsets+0x3c>)
 80016b4:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <setRowOffsets+0x3c>)
 80016bc:	70da      	strb	r2, [r3, #3]
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000260 	.word	0x20000260

080016d0 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80016d4:	2001      	movs	r0, #1
 80016d6:	f000 f8a1 	bl	800181c <command>
  HAL_Delay(2);  // this command takes a long time!
 80016da:	2002      	movs	r0, #2
 80016dc:	f001 fa62 	bl	8002ba4 <HAL_Delay>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	460a      	mov	r2, r1
 80016ee:	71fb      	strb	r3, [r7, #7]
 80016f0:	4613      	mov	r3, r2
 80016f2:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80016f4:	2304      	movs	r3, #4
 80016f6:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d803      	bhi.n	8001708 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <setCursor+0x5c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	79ba      	ldrb	r2, [r7, #6]
 800170e:	429a      	cmp	r2, r3
 8001710:	d303      	bcc.n	800171a <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <setCursor+0x5c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	3b01      	subs	r3, #1
 8001718:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 800171a:	79bb      	ldrb	r3, [r7, #6]
 800171c:	4a09      	ldr	r2, [pc, #36]	; (8001744 <setCursor+0x60>)
 800171e:	5cd2      	ldrb	r2, [r2, r3]
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	4413      	add	r3, r2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	b25b      	sxtb	r3, r3
 8001728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800172c:	b25b      	sxtb	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f873 	bl	800181c <command>
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000026d 	.word	0x2000026d
 8001744:	20000260 	.word	0x20000260

08001748 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <display+0x28>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <display+0x28>)
 8001758:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <display+0x28>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	b2db      	uxtb	r3, r3
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f859 	bl	800181c <command>
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000026c 	.word	0x2000026c

08001774 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <print+0x12>
 8001782:	2300      	movs	r3, #0
 8001784:	e01d      	b.n	80017c2 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7fe fd1c 	bl	80001c8 <strlen>
 8001790:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8001796:	e00c      	b.n	80017b2 <print+0x3e>
    if (write(*buffer++)) n++;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	617a      	str	r2, [r7, #20]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 f849 	bl	8001838 <write>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <print+0x4a>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3301      	adds	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
  while (size--) {
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1e5a      	subs	r2, r3, #1
 80017b6:	613a      	str	r2, [r7, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ed      	bne.n	8001798 <print+0x24>
 80017bc:	e000      	b.n	80017c0 <print+0x4c>
    else break;
 80017be:	bf00      	nop
  }
  return n;
 80017c0:	68fb      	ldr	r3, [r7, #12]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	6039      	str	r1, [r7, #0]
 80017d4:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f815 	bl	800181c <command>
  for (int i=0; i<8; i++) {
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	e009      	b.n	800180c <createChar+0x42>
    write(charmap[i]);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f000 f819 	bl	8001838 <write>
  for (int i=0; i<8; i++) {
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3301      	adds	r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b07      	cmp	r3, #7
 8001810:	ddf2      	ble.n	80017f8 <createChar+0x2e>
  }
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f814 	bl	8001858 <send>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <write>:

inline size_t write(uint8_t value) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f806 	bl	8001858 <send>
  return 1; // assume sucess
 800184c:	2301      	movs	r3, #1
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	460a      	mov	r2, r1
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	4613      	mov	r3, r2
 8001866:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8001868:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <send+0x6c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <send+0x70>)
 800186e:	8811      	ldrh	r1, [r2, #0]
 8001870:	79ba      	ldrb	r2, [r7, #6]
 8001872:	4618      	mov	r0, r3
 8001874:	f002 ff86 	bl	8004784 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <send+0x74>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	2bff      	cmp	r3, #255	; 0xff
 800187e:	d007      	beq.n	8001890 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <send+0x6c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a11      	ldr	r2, [pc, #68]	; (80018cc <send+0x74>)
 8001886:	8811      	ldrh	r1, [r2, #0]
 8001888:	2200      	movs	r2, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f002 ff7a 	bl	8004784 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <send+0x78>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <send+0x4e>
    write8bits(value); 
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f86c 	bl	800197c <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 80018a4:	e009      	b.n	80018ba <send+0x62>
    write4bits(value>>4);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f83b 	bl	8001928 <write4bits>
    write4bits(value);
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 f837 	bl	8001928 <write4bits>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000268 	.word	0x20000268
 80018c8:	20000284 	.word	0x20000284
 80018cc:	20000264 	.word	0x20000264
 80018d0:	20000281 	.word	0x20000281

080018d4 <pulseEnable>:

void pulseEnable(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <pulseEnable+0x4c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a11      	ldr	r2, [pc, #68]	; (8001924 <pulseEnable+0x50>)
 80018de:	8811      	ldrh	r1, [r2, #0]
 80018e0:	2200      	movs	r2, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 ff4e 	bl	8004784 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 80018e8:	2001      	movs	r0, #1
 80018ea:	f001 f95b 	bl	8002ba4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <pulseEnable+0x4c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <pulseEnable+0x50>)
 80018f4:	8811      	ldrh	r1, [r2, #0]
 80018f6:	2201      	movs	r2, #1
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 ff43 	bl	8004784 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 80018fe:	2001      	movs	r0, #1
 8001900:	f001 f950 	bl	8002ba4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <pulseEnable+0x4c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a06      	ldr	r2, [pc, #24]	; (8001924 <pulseEnable+0x50>)
 800190a:	8811      	ldrh	r1, [r2, #0]
 800190c:	2200      	movs	r2, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f002 ff38 	bl	8004784 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8001914:	2001      	movs	r0, #1
 8001916:	f001 f945 	bl	8002ba4 <HAL_Delay>
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000268 	.word	0x20000268
 8001924:	20000282 	.word	0x20000282

08001928 <write4bits>:

void write4bits(uint8_t value) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e013      	b.n	8001960 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <write4bits+0x4c>)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <write4bits+0x50>)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001944:	79fa      	ldrb	r2, [r7, #7]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	fa42 f303 	asr.w	r3, r2, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	f002 ff15 	bl	8004784 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3301      	adds	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b03      	cmp	r3, #3
 8001964:	dde8      	ble.n	8001938 <write4bits+0x10>
  }

  pulseEnable();
 8001966:	f7ff ffb5 	bl	80018d4 <pulseEnable>
}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000268 	.word	0x20000268
 8001978:	20000270 	.word	0x20000270

0800197c <write8bits>:

void write8bits(uint8_t value) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e013      	b.n	80019b4 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <write8bits+0x4c>)
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <write8bits+0x50>)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001998:	79fa      	ldrb	r2, [r7, #7]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	fa42 f303 	asr.w	r3, r2, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	f002 feeb 	bl	8004784 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3301      	adds	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b07      	cmp	r3, #7
 80019b8:	dde8      	ble.n	800198c <write8bits+0x10>
  }
  
  pulseEnable();
 80019ba:	f7ff ff8b 	bl	80018d4 <pulseEnable>
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000268 	.word	0x20000268
 80019cc:	20000270 	.word	0x20000270

080019d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
	if (last_gpio_exti + 200 > HAL_GetTick()) {
 80019da:	4b7d      	ldr	r3, [pc, #500]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0x200>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80019e2:	f001 f8d3 	bl	8002b8c <HAL_GetTick>
 80019e6:	4603      	mov	r3, r0
 80019e8:	429c      	cmp	r4, r3
 80019ea:	f200 80e8 	bhi.w	8001bbe <HAL_GPIO_EXTI_Callback+0x1ee>
		return;
	}
	last_gpio_exti = HAL_GetTick();
 80019ee:	f001 f8cd 	bl	8002b8c <HAL_GetTick>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4a76      	ldr	r2, [pc, #472]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0x200>)
 80019f6:	6013      	str	r3, [r2, #0]

	int8_t row_number = -1;
 80019f8:	23ff      	movs	r3, #255	; 0xff
 80019fa:	73fb      	strb	r3, [r7, #15]
	int8_t column_number = -1;
 80019fc:	23ff      	movs	r3, #255	; 0xff
 80019fe:	73bb      	strb	r3, [r7, #14]

	if (GPIO_Pin == GPIO_PIN_0) {
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	f000 80dd 	beq.w	8001bc2 <HAL_GPIO_EXTI_Callback+0x1f2>
		return;
	}

	for (uint8_t row = 0; row < 4; row++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	737b      	strb	r3, [r7, #13]
 8001a0c:	e00b      	b.n	8001a26 <HAL_GPIO_EXTI_Callback+0x56>
		if (GPIO_Pin == Row_pins[row]) {
 8001a0e:	7b7b      	ldrb	r3, [r7, #13]
 8001a10:	4a70      	ldr	r2, [pc, #448]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x204>)
 8001a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a16:	88fa      	ldrh	r2, [r7, #6]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d101      	bne.n	8001a20 <HAL_GPIO_EXTI_Callback+0x50>
			row_number = row;
 8001a1c:	7b7b      	ldrb	r3, [r7, #13]
 8001a1e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t row = 0; row < 4; row++) {
 8001a20:	7b7b      	ldrb	r3, [r7, #13]
 8001a22:	3301      	adds	r3, #1
 8001a24:	737b      	strb	r3, [r7, #13]
 8001a26:	7b7b      	ldrb	r3, [r7, #13]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d9f0      	bls.n	8001a0e <HAL_GPIO_EXTI_Callback+0x3e>
		}
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8001a2c:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x208>)
 8001a2e:	2110      	movs	r1, #16
 8001a30:	2200      	movs	r2, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 fea6 	bl	8004784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8001a38:	4b67      	ldr	r3, [pc, #412]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x208>)
 8001a3a:	2140      	movs	r1, #64	; 0x40
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fea0 	bl	8004784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8001a44:	4b64      	ldr	r3, [pc, #400]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x208>)
 8001a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 fe99 	bl	8004784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8001a52:	4b62      	ldr	r3, [pc, #392]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x20c>)
 8001a54:	2104      	movs	r1, #4
 8001a56:	2200      	movs	r2, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 fe93 	bl	8004784 <HAL_GPIO_WritePin>

	for (uint8_t col = 0; col < 4; col++) {
 8001a5e:	2300      	movs	r3, #0
 8001a60:	733b      	strb	r3, [r7, #12]
 8001a62:	e02d      	b.n	8001ac0 <HAL_GPIO_EXTI_Callback+0xf0>
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8001a64:	7b3b      	ldrb	r3, [r7, #12]
 8001a66:	4a5e      	ldr	r2, [pc, #376]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x210>)
 8001a68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a6c:	7b3b      	ldrb	r3, [r7, #12]
 8001a6e:	4a5d      	ldr	r2, [pc, #372]	; (8001be4 <HAL_GPIO_EXTI_Callback+0x214>)
 8001a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a74:	2201      	movs	r2, #1
 8001a76:	4619      	mov	r1, r3
 8001a78:	f002 fe84 	bl	8004784 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number])) {
 8001a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a80:	4a59      	ldr	r2, [pc, #356]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x218>)
 8001a82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8a:	4952      	ldr	r1, [pc, #328]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x204>)
 8001a8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f002 fe5e 	bl	8004754 <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_GPIO_EXTI_Callback+0xd2>
			column_number = col;
 8001a9e:	7b3b      	ldrb	r3, [r7, #12]
 8001aa0:	73bb      	strb	r3, [r7, #14]
		}
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8001aa2:	7b3b      	ldrb	r3, [r7, #12]
 8001aa4:	4a4e      	ldr	r2, [pc, #312]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x210>)
 8001aa6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001aaa:	7b3b      	ldrb	r3, [r7, #12]
 8001aac:	4a4d      	ldr	r2, [pc, #308]	; (8001be4 <HAL_GPIO_EXTI_Callback+0x214>)
 8001aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f002 fe65 	bl	8004784 <HAL_GPIO_WritePin>
	for (uint8_t col = 0; col < 4; col++) {
 8001aba:	7b3b      	ldrb	r3, [r7, #12]
 8001abc:	3301      	adds	r3, #1
 8001abe:	733b      	strb	r3, [r7, #12]
 8001ac0:	7b3b      	ldrb	r3, [r7, #12]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d9ce      	bls.n	8001a64 <HAL_GPIO_EXTI_Callback+0x94>
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8001ac6:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x208>)
 8001ac8:	2110      	movs	r1, #16
 8001aca:	2201      	movs	r2, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 fe59 	bl	8004784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8001ad2:	4b41      	ldr	r3, [pc, #260]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x208>)
 8001ad4:	2140      	movs	r1, #64	; 0x40
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 fe53 	bl	8004784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8001ade:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x208>)
 8001ae0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 fe4c 	bl	8004784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8001aec:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x20c>)
 8001aee:	2104      	movs	r1, #4
 8001af0:	2201      	movs	r2, #1
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 fe46 	bl	8004784 <HAL_GPIO_WritePin>

	if (row_number == -1 || column_number == -1) {
 8001af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d061      	beq.n	8001bc6 <HAL_GPIO_EXTI_Callback+0x1f6>
 8001b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0a:	d05c      	beq.n	8001bc6 <HAL_GPIO_EXTI_Callback+0x1f6>
		return;
	}

	const uint8_t button_number = row_number * 4 + column_number + 1;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	7bbb      	ldrb	r3, [r7, #14]
 8001b14:	4413      	add	r3, r2
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	72fb      	strb	r3, [r7, #11]

	input_button = button_number;
 8001b1c:	7afb      	ldrb	r3, [r7, #11]
 8001b1e:	4a33      	ldr	r2, [pc, #204]	; (8001bec <HAL_GPIO_EXTI_Callback+0x21c>)
 8001b20:	6013      	str	r3, [r2, #0]

	if (program_state == menu_page) {
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d126      	bne.n	8001b78 <HAL_GPIO_EXTI_Callback+0x1a8>
		if (input_button == 1) {
 8001b2a:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_GPIO_EXTI_Callback+0x21c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d105      	bne.n	8001b3e <HAL_GPIO_EXTI_Callback+0x16e>
			program_state = game_page;
 8001b32:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001b34:	2205      	movs	r2, #5
 8001b36:	601a      	str	r2, [r3, #0]
			set_game_page();
 8001b38:	f7ff fb1e 	bl	8001178 <set_game_page>
 8001b3c:	e01c      	b.n	8001b78 <HAL_GPIO_EXTI_Callback+0x1a8>
		} else if (input_button == 2) {
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <HAL_GPIO_EXTI_Callback+0x21c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d105      	bne.n	8001b52 <HAL_GPIO_EXTI_Callback+0x182>
			program_state = change_name_page;
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001b48:	2202      	movs	r2, #2
 8001b4a:	601a      	str	r2, [r3, #0]
			set_change_name_page();
 8001b4c:	f7ff fb1c 	bl	8001188 <set_change_name_page>
 8001b50:	e012      	b.n	8001b78 <HAL_GPIO_EXTI_Callback+0x1a8>
		} else if (input_button == 3) {
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_GPIO_EXTI_Callback+0x21c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d105      	bne.n	8001b66 <HAL_GPIO_EXTI_Callback+0x196>
			program_state = help_page;
 8001b5a:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	601a      	str	r2, [r3, #0]
			set_help_page();
 8001b60:	f7ff fb24 	bl	80011ac <set_help_page>
 8001b64:	e008      	b.n	8001b78 <HAL_GPIO_EXTI_Callback+0x1a8>
		} else if (input_button == 5) {
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_GPIO_EXTI_Callback+0x21c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d104      	bne.n	8001b78 <HAL_GPIO_EXTI_Callback+0x1a8>
			program_state = about_page;
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001b70:	2204      	movs	r2, #4
 8001b72:	601a      	str	r2, [r3, #0]
			set_about_page();
 8001b74:	f7ff fb2c 	bl	80011d0 <set_about_page>
		}
	}

	if (program_state == game_page) {
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	d123      	bne.n	8001bc8 <HAL_GPIO_EXTI_Callback+0x1f8>
		if (input_button == 5) {
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <HAL_GPIO_EXTI_Callback+0x21c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d102      	bne.n	8001b8e <HAL_GPIO_EXTI_Callback+0x1be>
			player_left();
 8001b88:	f7ff f83a 	bl	8000c00 <player_left>
 8001b8c:	e01c      	b.n	8001bc8 <HAL_GPIO_EXTI_Callback+0x1f8>
		} else if (input_button == 7) {
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HAL_GPIO_EXTI_Callback+0x21c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b07      	cmp	r3, #7
 8001b94:	d102      	bne.n	8001b9c <HAL_GPIO_EXTI_Callback+0x1cc>
			player_right();
 8001b96:	f7fe ffff 	bl	8000b98 <player_right>
 8001b9a:	e015      	b.n	8001bc8 <HAL_GPIO_EXTI_Callback+0x1f8>
		} else if (input_button == 6) {
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_GPIO_EXTI_Callback+0x21c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b06      	cmp	r3, #6
 8001ba2:	d111      	bne.n	8001bc8 <HAL_GPIO_EXTI_Callback+0x1f8>
			shooting = 1;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0x224>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
			bullet_row = player_row;
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x228>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x22c>)
 8001bb0:	6013      	str	r3, [r2, #0]
			bullet_col = player_col + 1;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x230>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x234>)
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	e004      	b.n	8001bc8 <HAL_GPIO_EXTI_Callback+0x1f8>
		return;
 8001bbe:	bf00      	nop
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_EXTI_Callback+0x1f8>
		return;
 8001bc2:	bf00      	nop
 8001bc4:	e000      	b.n	8001bc8 <HAL_GPIO_EXTI_Callback+0x1f8>
		return;
 8001bc6:	bf00      	nop
		}
	}
}
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd90      	pop	{r4, r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200003dc 	.word	0x200003dc
 8001bd4:	08007ba4 	.word	0x08007ba4
 8001bd8:	48000400 	.word	0x48000400
 8001bdc:	48001000 	.word	0x48001000
 8001be0:	08007bac 	.word	0x08007bac
 8001be4:	08007bbc 	.word	0x08007bbc
 8001be8:	08007b94 	.word	0x08007b94
 8001bec:	2000025c 	.word	0x2000025c
 8001bf0:	20000244 	.word	0x20000244
 8001bf4:	20000228 	.word	0x20000228
 8001bf8:	20000214 	.word	0x20000214
 8001bfc:	2000022c 	.word	0x2000022c
 8001c00:	20000218 	.word	0x20000218
 8001c04:	20000230 	.word	0x20000230

08001c08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c0e:	f000 ff63 	bl	8002ad8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c12:	f000 f837 	bl	8001c84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_TIM4_Init();
 8001c16:	f000 f9f9 	bl	800200c <MX_TIM4_Init>
	MX_GPIO_Init();
 8001c1a:	f000 fa47 	bl	80020ac <MX_GPIO_Init>
	MX_TIM3_Init();
 8001c1e:	f000 f9a7 	bl	8001f70 <MX_TIM3_Init>
	MX_ADC1_Init();
 8001c22:	f000 f88d 	bl	8001d40 <MX_ADC1_Init>
	MX_TIM2_Init();
 8001c26:	f000 f955 	bl	8001ed4 <MX_TIM2_Init>
	MX_RTC_Init();
 8001c2a:	f000 f8f9 	bl	8001e20 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	LiquidCrystal(GPIOD, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4,
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	9303      	str	r3, [sp, #12]
 8001c32:	2340      	movs	r3, #64	; 0x40
 8001c34:	9302      	str	r3, [sp, #8]
 8001c36:	2320      	movs	r3, #32
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	2310      	movs	r3, #16
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2308      	movs	r3, #8
 8001c40:	2204      	movs	r2, #4
 8001c42:	2102      	movs	r1, #2
 8001c44:	480a      	ldr	r0, [pc, #40]	; (8001c70 <main+0x68>)
 8001c46:	f7ff fae7 	bl	8001218 <LiquidCrystal>
	GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7);
	begin(20, 4);
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	2014      	movs	r0, #20
 8001c4e:	f7ff fb7b 	bl	8001348 <begin>
	HAL_TIM_Base_Start_IT(&htim2);
 8001c52:	4808      	ldr	r0, [pc, #32]	; (8001c74 <main+0x6c>)
 8001c54:	f004 fb22 	bl	800629c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001c58:	4807      	ldr	r0, [pc, #28]	; (8001c78 <main+0x70>)
 8001c5a:	f004 fb1f 	bl	800629c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001c5e:	4807      	ldr	r0, [pc, #28]	; (8001c7c <main+0x74>)
 8001c60:	f004 fb1c 	bl	800629c <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_IT(&hadc1);
 8001c64:	4806      	ldr	r0, [pc, #24]	; (8001c80 <main+0x78>)
 8001c66:	f001 f9bf 	bl	8002fe8 <HAL_ADC_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	set_start_page();
 8001c6a:	f7ff fa43 	bl	80010f4 <set_start_page>
	while (1) {
 8001c6e:	e7fe      	b.n	8001c6e <main+0x66>
 8001c70:	48000c00 	.word	0x48000c00
 8001c74:	20000390 	.word	0x20000390
 8001c78:	200002d4 	.word	0x200002d4
 8001c7c:	20000288 	.word	0x20000288
 8001c80:	20000320 	.word	0x20000320

08001c84 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b09e      	sub	sp, #120	; 0x78
 8001c88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001c8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c8e:	2228      	movs	r2, #40	; 0x28
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f004 ff78 	bl	8006b88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001c98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001ca8:	463b      	mov	r3, r7
 8001caa:	223c      	movs	r2, #60	; 0x3c
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 ff6a 	bl	8006b88 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001cb4:	230a      	movs	r3, #10
 8001cb6:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cbc:	2310      	movs	r3, #16
 8001cbe:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001ccc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001cd0:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001cd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 fd84 	bl	80047e4 <HAL_RCC_OscConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <SystemClock_Config+0x62>
		Error_Handler();
 8001ce2:	f000 fae7 	bl	80022b4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ce6:	230f      	movs	r3, #15
 8001ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cea:	2302      	movs	r3, #2
 8001cec:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001cfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d00:	2102      	movs	r1, #2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 fc76 	bl	80055f4 <HAL_RCC_ClockConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <SystemClock_Config+0x8e>
		Error_Handler();
 8001d0e:	f000 fad1 	bl	80022b4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection =
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <SystemClock_Config+0xb8>)
 8001d14:	603b      	str	r3, [r7, #0]
	RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC12;
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d20:	607b      	str	r3, [r7, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001d22:	463b      	mov	r3, r7
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 fe4b 	bl	80059c0 <HAL_RCCEx_PeriphCLKConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <SystemClock_Config+0xb0>
		Error_Handler();
 8001d30:	f000 fac0 	bl	80022b4 <Error_Handler>
	}
}
 8001d34:	bf00      	nop
 8001d36:	3778      	adds	r7, #120	; 0x78
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	00010080 	.word	0x00010080

08001d40 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
 8001d60:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001d62:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001d64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d68:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d6a:	4b2c      	ldr	r3, [pc, #176]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d76:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001d7c:	4b27      	ldr	r3, [pc, #156]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d8a:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d90:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001dac:	2204      	movs	r2, #4
 8001dae:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001db6:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001dbc:	4817      	ldr	r0, [pc, #92]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001dbe:	f000 ff33 	bl	8002c28 <HAL_ADC_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_ADC1_Init+0x8c>
		Error_Handler();
 8001dc8:	f000 fa74 	bl	80022b4 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4811      	ldr	r0, [pc, #68]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001dd8:	f002 f874 	bl	8003ec4 <HAL_ADCEx_MultiModeConfigChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_ADC1_Init+0xa6>
		Error_Handler();
 8001de2:	f000 fa67 	bl	80022b4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8001de6:	2306      	movs	r3, #6
 8001de8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8001df2:	2307      	movs	r3, #7
 8001df4:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	4619      	mov	r1, r3
 8001e02:	4806      	ldr	r0, [pc, #24]	; (8001e1c <MX_ADC1_Init+0xdc>)
 8001e04:	f001 fd72 	bl	80038ec <HAL_ADC_ConfigChannel>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_ADC1_Init+0xd2>
		Error_Handler();
 8001e0e:	f000 fa51 	bl	80022b4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000320 	.word	0x20000320

08001e20 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001e34:	2300      	movs	r3, #0
 8001e36:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <MX_RTC_Init+0xac>)
 8001e3a:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <MX_RTC_Init+0xb0>)
 8001e3c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <MX_RTC_Init+0xac>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 39;
 8001e44:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <MX_RTC_Init+0xac>)
 8001e46:	2227      	movs	r2, #39	; 0x27
 8001e48:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 999;
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <MX_RTC_Init+0xac>)
 8001e4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e50:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <MX_RTC_Init+0xac>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e58:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <MX_RTC_Init+0xac>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <MX_RTC_Init+0xac>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001e64:	4819      	ldr	r0, [pc, #100]	; (8001ecc <MX_RTC_Init+0xac>)
 8001e66:	f003 ff5b 	bl	8005d20 <HAL_RTC_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_RTC_Init+0x54>
		Error_Handler();
 8001e70:	f000 fa20 	bl	80022b4 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	480f      	ldr	r0, [pc, #60]	; (8001ecc <MX_RTC_Init+0xac>)
 8001e90:	f003 ffd7 	bl	8005e42 <HAL_RTC_SetTime>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_RTC_Init+0x7e>
		Error_Handler();
 8001e9a:	f000 fa0b 	bl	80022b4 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001eae:	463b      	mov	r3, r7
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_RTC_Init+0xac>)
 8001eb6:	f004 f881 	bl	8005fbc <HAL_RTC_SetDate>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_RTC_Init+0xa4>
		Error_Handler();
 8001ec0:	f000 f9f8 	bl	80022b4 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000370 	.word	0x20000370
 8001ed0:	40002800 	.word	0x40002800

08001ed4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001eda:	f107 0310 	add.w	r3, r7, #16
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <MX_TIM2_Init+0x98>)
 8001ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 400;
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <MX_TIM2_Init+0x98>)
 8001efc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001f00:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <MX_TIM2_Init+0x98>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000;
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <MX_TIM2_Init+0x98>)
 8001f0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f0e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <MX_TIM2_Init+0x98>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <MX_TIM2_Init+0x98>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001f1c:	4813      	ldr	r0, [pc, #76]	; (8001f6c <MX_TIM2_Init+0x98>)
 8001f1e:	f004 f966 	bl	80061ee <HAL_TIM_Base_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM2_Init+0x58>
		Error_Handler();
 8001f28:	f000 f9c4 	bl	80022b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f30:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001f32:	f107 0310 	add.w	r3, r7, #16
 8001f36:	4619      	mov	r1, r3
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <MX_TIM2_Init+0x98>)
 8001f3a:	f004 fb38 	bl	80065ae <HAL_TIM_ConfigClockSource>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM2_Init+0x74>
		Error_Handler();
 8001f44:	f000 f9b6 	bl	80022b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	4805      	ldr	r0, [pc, #20]	; (8001f6c <MX_TIM2_Init+0x98>)
 8001f56:	f004 fd4f 	bl	80069f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM2_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8001f60:	f000 f9a8 	bl	80022b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000390 	.word	0x20000390

08001f70 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <MX_TIM3_Init+0x94>)
 8001f90:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <MX_TIM3_Init+0x98>)
 8001f92:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 255;
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <MX_TIM3_Init+0x94>)
 8001f96:	22ff      	movs	r2, #255	; 0xff
 8001f98:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <MX_TIM3_Init+0x94>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <MX_TIM3_Init+0x94>)
 8001fa2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fa6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa8:	4b16      	ldr	r3, [pc, #88]	; (8002004 <MX_TIM3_Init+0x94>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <MX_TIM3_Init+0x94>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001fb4:	4813      	ldr	r0, [pc, #76]	; (8002004 <MX_TIM3_Init+0x94>)
 8001fb6:	f004 f91a 	bl	80061ee <HAL_TIM_Base_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM3_Init+0x54>
		Error_Handler();
 8001fc0:	f000 f978 	bl	80022b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001fca:	f107 0310 	add.w	r3, r7, #16
 8001fce:	4619      	mov	r1, r3
 8001fd0:	480c      	ldr	r0, [pc, #48]	; (8002004 <MX_TIM3_Init+0x94>)
 8001fd2:	f004 faec 	bl	80065ae <HAL_TIM_ConfigClockSource>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM3_Init+0x70>
		Error_Handler();
 8001fdc:	f000 f96a 	bl	80022b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	4619      	mov	r1, r3
 8001fec:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_TIM3_Init+0x94>)
 8001fee:	f004 fd03 	bl	80069f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001ff8:	f000 f95c 	bl	80022b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001ffc:	bf00      	nop
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200002d4 	.word	0x200002d4
 8002008:	40000400 	.word	0x40000400

0800200c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002012:	f107 0310 	add.w	r3, r7, #16
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800202a:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <MX_TIM4_Init+0x98>)
 800202c:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <MX_TIM4_Init+0x9c>)
 800202e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 3199;
 8002030:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <MX_TIM4_Init+0x98>)
 8002032:	f640 427f 	movw	r2, #3199	; 0xc7f
 8002036:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <MX_TIM4_Init+0x98>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <MX_TIM4_Init+0x98>)
 8002040:	f242 720f 	movw	r2, #9999	; 0x270f
 8002044:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <MX_TIM4_Init+0x98>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <MX_TIM4_Init+0x98>)
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002052:	4814      	ldr	r0, [pc, #80]	; (80020a4 <MX_TIM4_Init+0x98>)
 8002054:	f004 f8cb 	bl	80061ee <HAL_TIM_Base_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM4_Init+0x56>
		Error_Handler();
 800205e:	f000 f929 	bl	80022b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002066:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	4619      	mov	r1, r3
 800206e:	480d      	ldr	r0, [pc, #52]	; (80020a4 <MX_TIM4_Init+0x98>)
 8002070:	f004 fa9d 	bl	80065ae <HAL_TIM_ConfigClockSource>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM4_Init+0x72>
		Error_Handler();
 800207a:	f000 f91b 	bl	80022b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	4619      	mov	r1, r3
 800208a:	4806      	ldr	r0, [pc, #24]	; (80020a4 <MX_TIM4_Init+0x98>)
 800208c:	f004 fcb4 	bl	80069f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM4_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8002096:	f000 f90d 	bl	80022b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	3720      	adds	r7, #32
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000288 	.word	0x20000288
 80020a8:	40000800 	.word	0x40000800

080020ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80020c2:	4b77      	ldr	r3, [pc, #476]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	4a76      	ldr	r2, [pc, #472]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 80020c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020cc:	6153      	str	r3, [r2, #20]
 80020ce:	4b74      	ldr	r3, [pc, #464]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80020da:	4b71      	ldr	r3, [pc, #452]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	4a70      	ldr	r2, [pc, #448]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 80020e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020e4:	6153      	str	r3, [r2, #20]
 80020e6:	4b6e      	ldr	r3, [pc, #440]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	4b6b      	ldr	r3, [pc, #428]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	4a6a      	ldr	r2, [pc, #424]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fc:	6153      	str	r3, [r2, #20]
 80020fe:	4b68      	ldr	r3, [pc, #416]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800210a:	4b65      	ldr	r3, [pc, #404]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4a64      	ldr	r2, [pc, #400]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 8002110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002114:	6153      	str	r3, [r2, #20]
 8002116:	4b62      	ldr	r3, [pc, #392]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002122:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	4a5e      	ldr	r2, [pc, #376]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 8002128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800212c:	6153      	str	r3, [r2, #20]
 800212e:	4b5c      	ldr	r3, [pc, #368]	; (80022a0 <MX_GPIO_Init+0x1f4>)
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 800213a:	2201      	movs	r2, #1
 800213c:	2104      	movs	r1, #4
 800213e:	4859      	ldr	r0, [pc, #356]	; (80022a4 <MX_GPIO_Init+0x1f8>)
 8002140:	f002 fb20 	bl	8004784 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8002144:	2200      	movs	r2, #0
 8002146:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800214a:	4856      	ldr	r0, [pc, #344]	; (80022a4 <MX_GPIO_Init+0x1f8>)
 800214c:	f002 fb1a 	bl	8004784 <HAL_GPIO_WritePin>
			GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
					| GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8002150:	2200      	movs	r2, #0
 8002152:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002156:	4854      	ldr	r0, [pc, #336]	; (80022a8 <MX_GPIO_Init+0x1fc>)
 8002158:	f002 fb14 	bl	8004784 <HAL_GPIO_WritePin>
			GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
					| GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800215c:	2200      	movs	r2, #0
 800215e:	2140      	movs	r1, #64	; 0x40
 8002160:	4852      	ldr	r0, [pc, #328]	; (80022ac <MX_GPIO_Init+0x200>)
 8002162:	f002 fb0f 	bl	8004784 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_8,
 8002166:	2201      	movs	r2, #1
 8002168:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800216c:	4850      	ldr	r0, [pc, #320]	; (80022b0 <MX_GPIO_Init+0x204>)
 800216e:	f002 fb09 	bl	8004784 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin : PE2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002172:	2304      	movs	r3, #4
 8002174:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002176:	2301      	movs	r3, #1
 8002178:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	4846      	ldr	r0, [pc, #280]	; (80022a4 <MX_GPIO_Init+0x1f8>)
 800218a:	f002 f969 	bl	8004460 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800218e:	2310      	movs	r3, #16
 8002190:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002192:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002196:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002198:	2302      	movs	r3, #2
 800219a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4619      	mov	r1, r3
 80021a2:	4840      	ldr	r0, [pc, #256]	; (80022a4 <MX_GPIO_Init+0x1f8>)
 80021a4:	f002 f95c 	bl	8004460 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021a8:	2301      	movs	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021b2:	2302      	movs	r3, #2
 80021b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c0:	f002 f94e 	bl	8004460 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE8 PE9 PE10 PE11
	 PE12 PE13 PE14 PE15 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 80021c4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80021c8:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4831      	ldr	r0, [pc, #196]	; (80022a4 <MX_GPIO_Init+0x1f8>)
 80021de:	f002 f93f 	bl	8004460 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD10 PD11
	 PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 80021e2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80021e6:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021ec:	2302      	movs	r3, #2
 80021ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	482b      	ldr	r0, [pc, #172]	; (80022a8 <MX_GPIO_Init+0x1fc>)
 80021fc:	f002 f930 	bl	8004460 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002200:	2340      	movs	r3, #64	; 0x40
 8002202:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002204:	2301      	movs	r3, #1
 8002206:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002208:	2302      	movs	r3, #2
 800220a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	4825      	ldr	r0, [pc, #148]	; (80022ac <MX_GPIO_Init+0x200>)
 8002218:	f002 f922 	bl	8004460 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB3 PB5 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_9;
 800221c:	f44f 730a 	mov.w	r3, #552	; 0x228
 8002220:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002222:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002226:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002228:	2302      	movs	r3, #2
 800222a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	481f      	ldr	r0, [pc, #124]	; (80022b0 <MX_GPIO_Init+0x204>)
 8002234:	f002 f914 	bl	8004460 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB4 PB6 PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_8;
 8002238:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800223c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223e:	2301      	movs	r3, #1
 8002240:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	4817      	ldr	r0, [pc, #92]	; (80022b0 <MX_GPIO_Init+0x204>)
 8002252:	f002 f905 	bl	8004460 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2102      	movs	r1, #2
 800225a:	2006      	movs	r0, #6
 800225c:	f002 f8c9 	bl	80043f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002260:	2006      	movs	r0, #6
 8002262:	f002 f8e2 	bl	800442a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2102      	movs	r1, #2
 800226a:	2009      	movs	r0, #9
 800226c:	f002 f8c1 	bl	80043f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002270:	2009      	movs	r0, #9
 8002272:	f002 f8da 	bl	800442a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2102      	movs	r1, #2
 800227a:	200a      	movs	r0, #10
 800227c:	f002 f8b9 	bl	80043f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002280:	200a      	movs	r0, #10
 8002282:	f002 f8d2 	bl	800442a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2102      	movs	r1, #2
 800228a:	2017      	movs	r0, #23
 800228c:	f002 f8b1 	bl	80043f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002290:	2017      	movs	r0, #23
 8002292:	f002 f8ca 	bl	800442a <HAL_NVIC_EnableIRQ>

}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	; 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	48001000 	.word	0x48001000
 80022a8:	48000c00 	.word	0x48000c00
 80022ac:	48000800 	.word	0x48000800
 80022b0:	48000400 	.word	0x48000400

080022b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022b8:	b672      	cpsid	i
}
 80022ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022bc:	e7fe      	b.n	80022bc <Error_Handler+0x8>
	...

080022c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_MspInit+0x44>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_MspInit+0x44>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6193      	str	r3, [r2, #24]
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_MspInit+0x44>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_MspInit+0x44>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <HAL_MspInit+0x44>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e8:	61d3      	str	r3, [r2, #28]
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_MspInit+0x44>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000

08002308 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002328:	d12b      	bne.n	8002382 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_ADC_MspInit+0x84>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	4a17      	ldr	r2, [pc, #92]	; (800238c <HAL_ADC_MspInit+0x84>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	6153      	str	r3, [r2, #20]
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_ADC_MspInit+0x84>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_ADC_MspInit+0x84>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	4a11      	ldr	r2, [pc, #68]	; (800238c <HAL_ADC_MspInit+0x84>)
 8002348:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800234c:	6153      	str	r3, [r2, #20]
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_ADC_MspInit+0x84>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800235a:	2301      	movs	r3, #1
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800235e:	2303      	movs	r3, #3
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	4808      	ldr	r0, [pc, #32]	; (8002390 <HAL_ADC_MspInit+0x88>)
 800236e:	f002 f877 	bl	8004460 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2102      	movs	r1, #2
 8002376:	2012      	movs	r0, #18
 8002378:	f002 f83b 	bl	80043f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800237c:	2012      	movs	r0, #18
 800237e:	f002 f854 	bl	800442a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	48000800 	.word	0x48000800

08002394 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0d      	ldr	r2, [pc, #52]	; (80023d8 <HAL_RTC_MspInit+0x44>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d111      	bne.n	80023ca <HAL_RTC_MspInit+0x36>
 80023a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023aa:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023b4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_RTC_MspInit+0x48>)
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	461a      	mov	r2, r3
 80023c6:	2301      	movs	r3, #1
 80023c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40002800 	.word	0x40002800
 80023dc:	10908100 	.word	0x10908100

080023e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f0:	d114      	bne.n	800241c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023f2:	4b26      	ldr	r3, [pc, #152]	; (800248c <HAL_TIM_Base_MspInit+0xac>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4a25      	ldr	r2, [pc, #148]	; (800248c <HAL_TIM_Base_MspInit+0xac>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	61d3      	str	r3, [r2, #28]
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <HAL_TIM_Base_MspInit+0xac>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2102      	movs	r1, #2
 800240e:	201c      	movs	r0, #28
 8002410:	f001 ffef 	bl	80043f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002414:	201c      	movs	r0, #28
 8002416:	f002 f808 	bl	800442a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800241a:	e032      	b.n	8002482 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <HAL_TIM_Base_MspInit+0xb0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d114      	bne.n	8002450 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002426:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_TIM_Base_MspInit+0xac>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a18      	ldr	r2, [pc, #96]	; (800248c <HAL_TIM_Base_MspInit+0xac>)
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	61d3      	str	r3, [r2, #28]
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_TIM_Base_MspInit+0xac>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2101      	movs	r1, #1
 8002442:	201d      	movs	r0, #29
 8002444:	f001 ffd5 	bl	80043f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002448:	201d      	movs	r0, #29
 800244a:	f001 ffee 	bl	800442a <HAL_NVIC_EnableIRQ>
}
 800244e:	e018      	b.n	8002482 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0f      	ldr	r2, [pc, #60]	; (8002494 <HAL_TIM_Base_MspInit+0xb4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d113      	bne.n	8002482 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_TIM_Base_MspInit+0xac>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4a0b      	ldr	r2, [pc, #44]	; (800248c <HAL_TIM_Base_MspInit+0xac>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	61d3      	str	r3, [r2, #28]
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_TIM_Base_MspInit+0xac>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2102      	movs	r1, #2
 8002476:	201e      	movs	r0, #30
 8002478:	f001 ffbb 	bl	80043f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800247c:	201e      	movs	r0, #30
 800247e:	f001 ffd4 	bl	800442a <HAL_NVIC_EnableIRQ>
}
 8002482:	bf00      	nop
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	40000400 	.word	0x40000400
 8002494:	40000800 	.word	0x40000800

08002498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800249c:	e7fe      	b.n	800249c <NMI_Handler+0x4>

0800249e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <HardFault_Handler+0x4>

080024a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <MemManage_Handler+0x4>

080024aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ae:	e7fe      	b.n	80024ae <BusFault_Handler+0x4>

080024b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <UsageFault_Handler+0x4>

080024b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e4:	f000 fb3e 	bl	8002b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}

080024ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f002 f95f 	bl	80047b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if (program_state == start_page) {
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <EXTI0_IRQHandler+0x30>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d104      	bne.n	8002508 <EXTI0_IRQHandler+0x1c>
	  menupage();
 80024fe:	f7fe fe0f 	bl	8001120 <menupage>
	  program_state = menu_page;
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <EXTI0_IRQHandler+0x30>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]
  }
  if(program_state == game_page)
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <EXTI0_IRQHandler+0x30>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b05      	cmp	r3, #5
 800250e:	d103      	bne.n	8002518 <EXTI0_IRQHandler+0x2c>
  {
	  clear();
 8002510:	f7ff f8de 	bl	80016d0 <clear>
	  set_game_page();
 8002514:	f7fe fe30 	bl	8001178 <set_game_page>
  }

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000244 	.word	0x20000244

08002520 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002524:	2008      	movs	r0, #8
 8002526:	f002 f945 	bl	80047b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}

0800252e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002532:	2010      	movs	r0, #16
 8002534:	f002 f93e 	bl	80047b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}

0800253c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002542:	480c      	ldr	r0, [pc, #48]	; (8002574 <ADC1_2_IRQHandler+0x38>)
 8002544:	f000 fe9e 	bl	8003284 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	int val = HAL_ADC_GetValue(&hadc1);
 8002548:	480a      	ldr	r0, [pc, #40]	; (8002574 <ADC1_2_IRQHandler+0x38>)
 800254a:	f000 fe8d 	bl	8003268 <HAL_ADC_GetValue>
 800254e:	4603      	mov	r3, r0
 8002550:	607b      	str	r3, [r7, #4]

	difficulty_level = val * 9 / 4095;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a08      	ldr	r2, [pc, #32]	; (8002578 <ADC1_2_IRQHandler+0x3c>)
 8002556:	fb82 1203 	smull	r1, r2, r2, r3
 800255a:	441a      	add	r2, r3
 800255c:	1212      	asrs	r2, r2, #8
 800255e:	17db      	asrs	r3, r3, #31
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	4a06      	ldr	r2, [pc, #24]	; (800257c <ADC1_2_IRQHandler+0x40>)
 8002564:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_IT(&hadc1);
 8002566:	4803      	ldr	r0, [pc, #12]	; (8002574 <ADC1_2_IRQHandler+0x38>)
 8002568:	f000 fd3e 	bl	8002fe8 <HAL_ADC_Start_IT>
  /* USER CODE END ADC1_2_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000320 	.word	0x20000320
 8002578:	90090091 	.word	0x90090091
 800257c:	20000250 	.word	0x20000250

08002580 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002584:	2020      	movs	r0, #32
 8002586:	f002 f915 	bl	80047b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800258a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800258e:	f002 f911 	bl	80047b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800259c:	4805      	ldr	r0, [pc, #20]	; (80025b4 <TIM2_IRQHandler+0x1c>)
 800259e:	f003 fee7 	bl	8006370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if(program_state==game_page){
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <TIM2_IRQHandler+0x20>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d101      	bne.n	80025ae <TIM2_IRQHandler+0x16>
	  update_position();
 80025aa:	f7fe fcf9 	bl	8000fa0 <update_position>
  }


  /* USER CODE END TIM2_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000390 	.word	0x20000390
 80025b8:	20000244 	.word	0x20000244

080025bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025c0:	480c      	ldr	r0, [pc, #48]	; (80025f4 <TIM3_IRQHandler+0x38>)
 80025c2:	f003 fed5 	bl	8006370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	show_number_on_seven_segment(seven_segment_state);
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <TIM3_IRQHandler+0x3c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f8a0 	bl	8002710 <show_number_on_seven_segment>
	seven_segment_state++;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <TIM3_IRQHandler+0x3c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <TIM3_IRQHandler+0x3c>)
 80025d8:	6013      	str	r3, [r2, #0]
	seven_segment_state %= 4;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <TIM3_IRQHandler+0x3c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	425a      	negs	r2, r3
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	f002 0203 	and.w	r2, r2, #3
 80025e8:	bf58      	it	pl
 80025ea:	4253      	negpl	r3, r2
 80025ec:	4a02      	ldr	r2, [pc, #8]	; (80025f8 <TIM3_IRQHandler+0x3c>)
 80025ee:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200002d4 	.word	0x200002d4
 80025f8:	20000248 	.word	0x20000248

080025fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002600:	483f      	ldr	r0, [pc, #252]	; (8002700 <TIM4_IRQHandler+0x104>)
 8002602:	f003 feb5 	bl	8006370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
	if (led_state == 0) {
 8002606:	4b3f      	ldr	r3, [pc, #252]	; (8002704 <TIM4_IRQHandler+0x108>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d175      	bne.n	80026fa <TIM4_IRQHandler+0xfe>
		if (led_counter % 2 == 0) {
 800260e:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <TIM4_IRQHandler+0x10c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d130      	bne.n	800267c <TIM4_IRQHandler+0x80>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800261a:	2201      	movs	r2, #1
 800261c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002620:	483a      	ldr	r0, [pc, #232]	; (800270c <TIM4_IRQHandler+0x110>)
 8002622:	f002 f8af 	bl	8004784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8002626:	2201      	movs	r2, #1
 8002628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800262c:	4837      	ldr	r0, [pc, #220]	; (800270c <TIM4_IRQHandler+0x110>)
 800262e:	f002 f8a9 	bl	8004784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8002632:	2201      	movs	r2, #1
 8002634:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002638:	4834      	ldr	r0, [pc, #208]	; (800270c <TIM4_IRQHandler+0x110>)
 800263a:	f002 f8a3 	bl	8004784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800263e:	2201      	movs	r2, #1
 8002640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002644:	4831      	ldr	r0, [pc, #196]	; (800270c <TIM4_IRQHandler+0x110>)
 8002646:	f002 f89d 	bl	8004784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 800264a:	2201      	movs	r2, #1
 800264c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002650:	482e      	ldr	r0, [pc, #184]	; (800270c <TIM4_IRQHandler+0x110>)
 8002652:	f002 f897 	bl	8004784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8002656:	2201      	movs	r2, #1
 8002658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800265c:	482b      	ldr	r0, [pc, #172]	; (800270c <TIM4_IRQHandler+0x110>)
 800265e:	f002 f891 	bl	8004784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8002662:	2201      	movs	r2, #1
 8002664:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002668:	4828      	ldr	r0, [pc, #160]	; (800270c <TIM4_IRQHandler+0x110>)
 800266a:	f002 f88b 	bl	8004784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 800266e:	2201      	movs	r2, #1
 8002670:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002674:	4825      	ldr	r0, [pc, #148]	; (800270c <TIM4_IRQHandler+0x110>)
 8002676:	f002 f885 	bl	8004784 <HAL_GPIO_WritePin>
 800267a:	e02f      	b.n	80026dc <TIM4_IRQHandler+0xe0>
		} else {
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 800267c:	2200      	movs	r2, #0
 800267e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002682:	4822      	ldr	r0, [pc, #136]	; (800270c <TIM4_IRQHandler+0x110>)
 8002684:	f002 f87e 	bl	8004784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8002688:	2200      	movs	r2, #0
 800268a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800268e:	481f      	ldr	r0, [pc, #124]	; (800270c <TIM4_IRQHandler+0x110>)
 8002690:	f002 f878 	bl	8004784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8002694:	2200      	movs	r2, #0
 8002696:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800269a:	481c      	ldr	r0, [pc, #112]	; (800270c <TIM4_IRQHandler+0x110>)
 800269c:	f002 f872 	bl	8004784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026a6:	4819      	ldr	r0, [pc, #100]	; (800270c <TIM4_IRQHandler+0x110>)
 80026a8:	f002 f86c 	bl	8004784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026b2:	4816      	ldr	r0, [pc, #88]	; (800270c <TIM4_IRQHandler+0x110>)
 80026b4:	f002 f866 	bl	8004784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 80026b8:	2200      	movs	r2, #0
 80026ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026be:	4813      	ldr	r0, [pc, #76]	; (800270c <TIM4_IRQHandler+0x110>)
 80026c0:	f002 f860 	bl	8004784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 80026c4:	2200      	movs	r2, #0
 80026c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026ca:	4810      	ldr	r0, [pc, #64]	; (800270c <TIM4_IRQHandler+0x110>)
 80026cc:	f002 f85a 	bl	8004784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026d6:	480d      	ldr	r0, [pc, #52]	; (800270c <TIM4_IRQHandler+0x110>)
 80026d8:	f002 f854 	bl	8004784 <HAL_GPIO_WritePin>
		}
		led_counter++;
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <TIM4_IRQHandler+0x10c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3301      	adds	r3, #1
 80026e2:	4a09      	ldr	r2, [pc, #36]	; (8002708 <TIM4_IRQHandler+0x10c>)
 80026e4:	6013      	str	r3, [r2, #0]

		if (led_counter == 10) {
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <TIM4_IRQHandler+0x10c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b0a      	cmp	r3, #10
 80026ec:	d105      	bne.n	80026fa <TIM4_IRQHandler+0xfe>
			led_state = 1;
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <TIM4_IRQHandler+0x108>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
			led_counter = 0;
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <TIM4_IRQHandler+0x10c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
		}
	}

  /* USER CODE END TIM4_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000288 	.word	0x20000288
 8002704:	20000254 	.word	0x20000254
 8002708:	20000258 	.word	0x20000258
 800270c:	48001000 	.word	0x48001000

08002710 <show_number_on_seven_segment>:

/* USER CODE BEGIN 1 */
void show_number_on_seven_segment(int digit) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	digits_off();
 8002718:	f000 f896 	bl	8002848 <digits_off>
	int num = 0, original_number = difficulty_level * 1000 + score;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	4b42      	ldr	r3, [pc, #264]	; (800282c <show_number_on_seven_segment+0x11c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002728:	fb02 f203 	mul.w	r2, r2, r3
 800272c:	4b40      	ldr	r3, [pc, #256]	; (8002830 <show_number_on_seven_segment+0x120>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4413      	add	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]

	if (digit == 0) {
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d113      	bne.n	8002762 <show_number_on_seven_segment+0x52>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002740:	483c      	ldr	r0, [pc, #240]	; (8002834 <show_number_on_seven_segment+0x124>)
 8002742:	f002 f81f 	bl	8004784 <HAL_GPIO_WritePin>
		num = original_number % 10;
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <show_number_on_seven_segment+0x128>)
 800274a:	fb83 1302 	smull	r1, r3, r3, r2
 800274e:	1099      	asrs	r1, r3, #2
 8002750:	17d3      	asrs	r3, r2, #31
 8002752:	1ac9      	subs	r1, r1, r3
 8002754:	460b      	mov	r3, r1
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	e05d      	b.n	800281e <show_number_on_seven_segment+0x10e>
	} else if (digit == 1) {
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d11b      	bne.n	80027a0 <show_number_on_seven_segment+0x90>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8002768:	2200      	movs	r2, #0
 800276a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800276e:	4831      	ldr	r0, [pc, #196]	; (8002834 <show_number_on_seven_segment+0x124>)
 8002770:	f002 f808 	bl	8004784 <HAL_GPIO_WritePin>
		original_number /= 10;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4a30      	ldr	r2, [pc, #192]	; (8002838 <show_number_on_seven_segment+0x128>)
 8002778:	fb82 1203 	smull	r1, r2, r2, r3
 800277c:	1092      	asrs	r2, r2, #2
 800277e:	17db      	asrs	r3, r3, #31
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	60bb      	str	r3, [r7, #8]
		num = original_number % 10;
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <show_number_on_seven_segment+0x128>)
 8002788:	fb83 1302 	smull	r1, r3, r3, r2
 800278c:	1099      	asrs	r1, r3, #2
 800278e:	17d3      	asrs	r3, r2, #31
 8002790:	1ac9      	subs	r1, r1, r3
 8002792:	460b      	mov	r3, r1
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	e03e      	b.n	800281e <show_number_on_seven_segment+0x10e>
	} else if (digit == 2) {
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d11b      	bne.n	80027de <show_number_on_seven_segment+0xce>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027ac:	4821      	ldr	r0, [pc, #132]	; (8002834 <show_number_on_seven_segment+0x124>)
 80027ae:	f001 ffe9 	bl	8004784 <HAL_GPIO_WritePin>
		original_number /= 100;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4a21      	ldr	r2, [pc, #132]	; (800283c <show_number_on_seven_segment+0x12c>)
 80027b6:	fb82 1203 	smull	r1, r2, r2, r3
 80027ba:	1152      	asrs	r2, r2, #5
 80027bc:	17db      	asrs	r3, r3, #31
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	60bb      	str	r3, [r7, #8]
		num = original_number % 10;
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <show_number_on_seven_segment+0x128>)
 80027c6:	fb83 1302 	smull	r1, r3, r3, r2
 80027ca:	1099      	asrs	r1, r3, #2
 80027cc:	17d3      	asrs	r3, r2, #31
 80027ce:	1ac9      	subs	r1, r1, r3
 80027d0:	460b      	mov	r3, r1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	e01f      	b.n	800281e <show_number_on_seven_segment+0x10e>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027e4:	4813      	ldr	r0, [pc, #76]	; (8002834 <show_number_on_seven_segment+0x124>)
 80027e6:	f001 ffcd 	bl	8004784 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 80027ea:	2201      	movs	r2, #1
 80027ec:	2140      	movs	r1, #64	; 0x40
 80027ee:	4814      	ldr	r0, [pc, #80]	; (8002840 <show_number_on_seven_segment+0x130>)
 80027f0:	f001 ffc8 	bl	8004784 <HAL_GPIO_WritePin>
		original_number /= 1000;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4a13      	ldr	r2, [pc, #76]	; (8002844 <show_number_on_seven_segment+0x134>)
 80027f8:	fb82 1203 	smull	r1, r2, r2, r3
 80027fc:	1192      	asrs	r2, r2, #6
 80027fe:	17db      	asrs	r3, r3, #31
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	60bb      	str	r3, [r7, #8]
		num = original_number % 10;
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <show_number_on_seven_segment+0x128>)
 8002808:	fb83 1302 	smull	r1, r3, r3, r2
 800280c:	1099      	asrs	r1, r3, #2
 800280e:	17d3      	asrs	r3, r2, #31
 8002810:	1ac9      	subs	r1, r1, r3
 8002812:	460b      	mov	r3, r1
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	60fb      	str	r3, [r7, #12]
	}

	ic_input_value(num);
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f82e 	bl	8002880 <ic_input_value>
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000250 	.word	0x20000250
 8002830:	2000024c 	.word	0x2000024c
 8002834:	48000c00 	.word	0x48000c00
 8002838:	66666667 	.word	0x66666667
 800283c:	51eb851f 	.word	0x51eb851f
 8002840:	48000800 	.word	0x48000800
 8002844:	10624dd3 	.word	0x10624dd3

08002848 <digits_off>:

void digits_off() {
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,
 800284c:	2201      	movs	r2, #1
 800284e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002852:	4808      	ldr	r0, [pc, #32]	; (8002874 <digits_off+0x2c>)
 8002854:	f001 ff96 	bl	8004784 <HAL_GPIO_WritePin>
	GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, 1);
	HAL_GPIO_WritePin(GPIOB,
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800285e:	4806      	ldr	r0, [pc, #24]	; (8002878 <digits_off+0x30>)
 8002860:	f001 ff90 	bl	8004784 <HAL_GPIO_WritePin>
	GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, 1);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8002864:	2200      	movs	r2, #0
 8002866:	2140      	movs	r1, #64	; 0x40
 8002868:	4804      	ldr	r0, [pc, #16]	; (800287c <digits_off+0x34>)
 800286a:	f001 ff8b 	bl	8004784 <HAL_GPIO_WritePin>
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	48000c00 	.word	0x48000c00
 8002878:	48000400 	.word	0x48000400
 800287c:	48000800 	.word	0x48000800

08002880 <ic_input_value>:
	HAL_GPIO_WritePin(GPIOD,
	GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, 0);
	ic_input_value(8);
}

void ic_input_value(int num) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	int bcd = BCD_Convertor(num);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f86d 	bl	8002968 <BCD_Convertor>
 800288e:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, (bcd % 10));
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4b33      	ldr	r3, [pc, #204]	; (8002960 <ic_input_value+0xe0>)
 8002894:	fb83 1302 	smull	r1, r3, r3, r2
 8002898:	1099      	asrs	r1, r3, #2
 800289a:	17d3      	asrs	r3, r2, #31
 800289c:	1ac9      	subs	r1, r1, r3
 800289e:	460b      	mov	r3, r1
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	1ad1      	subs	r1, r2, r3
 80028a8:	b2cb      	uxtb	r3, r1
 80028aa:	461a      	mov	r2, r3
 80028ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028b0:	482c      	ldr	r0, [pc, #176]	; (8002964 <ic_input_value+0xe4>)
 80028b2:	f001 ff67 	bl	8004784 <HAL_GPIO_WritePin>
	bcd /= 10;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4a29      	ldr	r2, [pc, #164]	; (8002960 <ic_input_value+0xe0>)
 80028ba:	fb82 1203 	smull	r1, r2, r2, r3
 80028be:	1092      	asrs	r2, r2, #2
 80028c0:	17db      	asrs	r3, r3, #31
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, (bcd % 10));
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4b25      	ldr	r3, [pc, #148]	; (8002960 <ic_input_value+0xe0>)
 80028ca:	fb83 1302 	smull	r1, r3, r3, r2
 80028ce:	1099      	asrs	r1, r3, #2
 80028d0:	17d3      	asrs	r3, r2, #31
 80028d2:	1ac9      	subs	r1, r1, r3
 80028d4:	460b      	mov	r3, r1
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	1ad1      	subs	r1, r2, r3
 80028de:	b2cb      	uxtb	r3, r1
 80028e0:	461a      	mov	r2, r3
 80028e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028e6:	481f      	ldr	r0, [pc, #124]	; (8002964 <ic_input_value+0xe4>)
 80028e8:	f001 ff4c 	bl	8004784 <HAL_GPIO_WritePin>
	bcd /= 10;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <ic_input_value+0xe0>)
 80028f0:	fb82 1203 	smull	r1, r2, r2, r3
 80028f4:	1092      	asrs	r2, r2, #2
 80028f6:	17db      	asrs	r3, r3, #31
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, (bcd % 10));
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4b18      	ldr	r3, [pc, #96]	; (8002960 <ic_input_value+0xe0>)
 8002900:	fb83 1302 	smull	r1, r3, r3, r2
 8002904:	1099      	asrs	r1, r3, #2
 8002906:	17d3      	asrs	r3, r2, #31
 8002908:	1ac9      	subs	r1, r1, r3
 800290a:	460b      	mov	r3, r1
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	1ad1      	subs	r1, r2, r3
 8002914:	b2cb      	uxtb	r3, r1
 8002916:	461a      	mov	r2, r3
 8002918:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800291c:	4811      	ldr	r0, [pc, #68]	; (8002964 <ic_input_value+0xe4>)
 800291e:	f001 ff31 	bl	8004784 <HAL_GPIO_WritePin>
	bcd /= 10;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <ic_input_value+0xe0>)
 8002926:	fb82 1203 	smull	r1, r2, r2, r3
 800292a:	1092      	asrs	r2, r2, #2
 800292c:	17db      	asrs	r3, r3, #31
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, (bcd % 10));
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <ic_input_value+0xe0>)
 8002936:	fb83 1302 	smull	r1, r3, r3, r2
 800293a:	1099      	asrs	r1, r3, #2
 800293c:	17d3      	asrs	r3, r2, #31
 800293e:	1ac9      	subs	r1, r1, r3
 8002940:	460b      	mov	r3, r1
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	1ad1      	subs	r1, r2, r3
 800294a:	b2cb      	uxtb	r3, r1
 800294c:	461a      	mov	r2, r3
 800294e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002952:	4804      	ldr	r0, [pc, #16]	; (8002964 <ic_input_value+0xe4>)
 8002954:	f001 ff16 	bl	8004784 <HAL_GPIO_WritePin>
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	66666667 	.word	0x66666667
 8002964:	48000c00 	.word	0x48000c00

08002968 <BCD_Convertor>:

int BCD_Convertor(int number) {
 8002968:	b5b0      	push	{r4, r5, r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	int converted[4];
	int bcd = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < 4; i++) {
 8002974:	2300      	movs	r3, #0
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	e060      	b.n	8002a3c <BCD_Convertor+0xd4>
		converted[i] = number & (int) (pow(2, i));
 800297a:	69b8      	ldr	r0, [r7, #24]
 800297c:	f7fd fd7e 	bl	800047c <__aeabi_i2d>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	ec43 2b11 	vmov	d1, r2, r3
 8002988:	ed9f 0b31 	vldr	d0, [pc, #196]	; 8002a50 <BCD_Convertor+0xe8>
 800298c:	f004 f904 	bl	8006b98 <pow>
 8002990:	ec53 2b10 	vmov	r2, r3, d0
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	f7fe f88a 	bl	8000ab0 <__aeabi_d2iz>
 800299c:	4602      	mov	r2, r0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	401a      	ands	r2, r3
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	f107 0120 	add.w	r1, r7, #32
 80029aa:	440b      	add	r3, r1
 80029ac:	f843 2c18 	str.w	r2, [r3, #-24]
		if (converted[i] > 0)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	f107 0220 	add.w	r2, r7, #32
 80029b8:	4413      	add	r3, r2
 80029ba:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	dd07      	ble.n	80029d2 <BCD_Convertor+0x6a>
			converted[i] = 1;
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	f107 0220 	add.w	r2, r7, #32
 80029ca:	4413      	add	r3, r2
 80029cc:	2201      	movs	r2, #1
 80029ce:	f843 2c18 	str.w	r2, [r3, #-24]
		bcd += converted[i] * (pow(10, i));
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	f107 0220 	add.w	r2, r7, #32
 80029da:	4413      	add	r3, r2
 80029dc:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fd4b 	bl	800047c <__aeabi_i2d>
 80029e6:	4604      	mov	r4, r0
 80029e8:	460d      	mov	r5, r1
 80029ea:	69b8      	ldr	r0, [r7, #24]
 80029ec:	f7fd fd46 	bl	800047c <__aeabi_i2d>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	ec43 2b11 	vmov	d1, r2, r3
 80029f8:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002a58 <BCD_Convertor+0xf0>
 80029fc:	f004 f8cc 	bl	8006b98 <pow>
 8002a00:	ec53 2b10 	vmov	r2, r3, d0
 8002a04:	4620      	mov	r0, r4
 8002a06:	4629      	mov	r1, r5
 8002a08:	f7fd fda2 	bl	8000550 <__aeabi_dmul>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4614      	mov	r4, r2
 8002a12:	461d      	mov	r5, r3
 8002a14:	69f8      	ldr	r0, [r7, #28]
 8002a16:	f7fd fd31 	bl	800047c <__aeabi_i2d>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4620      	mov	r0, r4
 8002a20:	4629      	mov	r1, r5
 8002a22:	f7fd fbdf 	bl	80001e4 <__adddf3>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f7fe f83f 	bl	8000ab0 <__aeabi_d2iz>
 8002a32:	4603      	mov	r3, r0
 8002a34:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 4; i++) {
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	dd9b      	ble.n	800297a <BCD_Convertor+0x12>
	}

	return bcd;
 8002a42:	69fb      	ldr	r3, [r7, #28]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3720      	adds	r7, #32
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a4c:	f3af 8000 	nop.w
 8002a50:	00000000 	.word	0x00000000
 8002a54:	40000000 	.word	0x40000000
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	40240000 	.word	0x40240000

08002a60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <SystemInit+0x20>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	4a05      	ldr	r2, [pc, #20]	; (8002a80 <SystemInit+0x20>)
 8002a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002abc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a88:	480d      	ldr	r0, [pc, #52]	; (8002ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a8a:	490e      	ldr	r1, [pc, #56]	; (8002ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <LoopForever+0xe>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a90:	e002      	b.n	8002a98 <LoopCopyDataInit>

08002a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a96:	3304      	adds	r3, #4

08002a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a9c:	d3f9      	bcc.n	8002a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a9e:	4a0b      	ldr	r2, [pc, #44]	; (8002acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002aa0:	4c0b      	ldr	r4, [pc, #44]	; (8002ad0 <LoopForever+0x16>)
  movs r3, #0
 8002aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aa4:	e001      	b.n	8002aaa <LoopFillZerobss>

08002aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa8:	3204      	adds	r2, #4

08002aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aac:	d3fb      	bcc.n	8002aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002aae:	f7ff ffd7 	bl	8002a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ab2:	f004 f845 	bl	8006b40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ab6:	f7ff f8a7 	bl	8001c08 <main>

08002aba <LoopForever>:

LoopForever:
    b LoopForever
 8002aba:	e7fe      	b.n	8002aba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002abc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ac4:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002ac8:	08007c40 	.word	0x08007c40
  ldr r2, =_sbss
 8002acc:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002ad0:	200003e4 	.word	0x200003e4

08002ad4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ad4:	e7fe      	b.n	8002ad4 <ADC3_IRQHandler>
	...

08002ad8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <HAL_Init+0x28>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a07      	ldr	r2, [pc, #28]	; (8002b00 <HAL_Init+0x28>)
 8002ae2:	f043 0310 	orr.w	r3, r3, #16
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae8:	2003      	movs	r0, #3
 8002aea:	f001 fc77 	bl	80043dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f000 f808 	bl	8002b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af4:	f7ff fbe4 	bl	80022c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40022000 	.word	0x40022000

08002b04 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_InitTick+0x54>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_InitTick+0x58>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	f001 fc8f 	bl	8004446 <HAL_SYSTICK_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00e      	b.n	8002b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b0f      	cmp	r3, #15
 8002b36:	d80a      	bhi.n	8002b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b40:	f001 fc57 	bl	80043f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b44:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <HAL_InitTick+0x5c>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000044 	.word	0x20000044
 8002b5c:	2000004c 	.word	0x2000004c
 8002b60:	20000048 	.word	0x20000048

08002b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_IncTick+0x20>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_IncTick+0x24>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <HAL_IncTick+0x24>)
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	2000004c 	.word	0x2000004c
 8002b88:	200003e0 	.word	0x200003e0

08002b8c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <HAL_GetTick+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	200003e0 	.word	0x200003e0

08002ba4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bac:	f7ff ffee 	bl	8002b8c <HAL_GetTick>
 8002bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d005      	beq.n	8002bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_Delay+0x44>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002bca:	bf00      	nop
 8002bcc:	f7ff ffde 	bl	8002b8c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d8f7      	bhi.n	8002bcc <HAL_Delay+0x28>
  {
  }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	2000004c 	.word	0x2000004c

08002bec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b09a      	sub	sp, #104	; 0x68
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e1c9      	b.n	8002fdc <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d176      	bne.n	8002d48 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d152      	bne.n	8002d08 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff fb43 	bl	8002308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d13b      	bne.n	8002d08 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f001 fa6d 	bl	8004170 <ADC_Disable>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d12f      	bne.n	8002d08 <HAL_ADC_Init+0xe0>
 8002ca8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d12b      	bne.n	8002d08 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cb8:	f023 0302 	bic.w	r3, r3, #2
 8002cbc:	f043 0202 	orr.w	r2, r3, #2
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cd2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ce2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce4:	4b86      	ldr	r3, [pc, #536]	; (8002f00 <HAL_ADC_Init+0x2d8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a86      	ldr	r2, [pc, #536]	; (8002f04 <HAL_ADC_Init+0x2dc>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	0c9a      	lsrs	r2, r3, #18
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cfa:	e002      	b.n	8002d02 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f9      	bne.n	8002cfc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d007      	beq.n	8002d26 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d24:	d110      	bne.n	8002d48 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f023 0312 	bic.w	r3, r3, #18
 8002d2e:	f043 0210 	orr.w	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f040 8136 	bne.w	8002fc2 <HAL_ADC_Init+0x39a>
 8002d56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 8131 	bne.w	8002fc2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 8129 	bne.w	8002fc2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d78:	f043 0202 	orr.w	r2, r3, #2
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d88:	d004      	beq.n	8002d94 <HAL_ADC_Init+0x16c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a5e      	ldr	r2, [pc, #376]	; (8002f08 <HAL_ADC_Init+0x2e0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_Init+0x170>
 8002d94:	4b5d      	ldr	r3, [pc, #372]	; (8002f0c <HAL_ADC_Init+0x2e4>)
 8002d96:	e000      	b.n	8002d9a <HAL_ADC_Init+0x172>
 8002d98:	4b5d      	ldr	r3, [pc, #372]	; (8002f10 <HAL_ADC_Init+0x2e8>)
 8002d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002da4:	d102      	bne.n	8002dac <HAL_ADC_Init+0x184>
 8002da6:	4b58      	ldr	r3, [pc, #352]	; (8002f08 <HAL_ADC_Init+0x2e0>)
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	e01a      	b.n	8002de2 <HAL_ADC_Init+0x1ba>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a55      	ldr	r2, [pc, #340]	; (8002f08 <HAL_ADC_Init+0x2e0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d103      	bne.n	8002dbe <HAL_ADC_Init+0x196>
 8002db6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	e011      	b.n	8002de2 <HAL_ADC_Init+0x1ba>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a54      	ldr	r2, [pc, #336]	; (8002f14 <HAL_ADC_Init+0x2ec>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d102      	bne.n	8002dce <HAL_ADC_Init+0x1a6>
 8002dc8:	4b53      	ldr	r3, [pc, #332]	; (8002f18 <HAL_ADC_Init+0x2f0>)
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e009      	b.n	8002de2 <HAL_ADC_Init+0x1ba>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a51      	ldr	r2, [pc, #324]	; (8002f18 <HAL_ADC_Init+0x2f0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d102      	bne.n	8002dde <HAL_ADC_Init+0x1b6>
 8002dd8:	4b4e      	ldr	r3, [pc, #312]	; (8002f14 <HAL_ADC_Init+0x2ec>)
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	e001      	b.n	8002de2 <HAL_ADC_Init+0x1ba>
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d108      	bne.n	8002e02 <HAL_ADC_Init+0x1da>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_Init+0x1da>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_ADC_Init+0x1dc>
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d11c      	bne.n	8002e42 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e08:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d010      	beq.n	8002e30 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d107      	bne.n	8002e2a <HAL_ADC_Init+0x202>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_Init+0x202>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_ADC_Init+0x204>
 8002e2a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d108      	bne.n	8002e42 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e40:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	7e5b      	ldrb	r3, [r3, #25]
 8002e46:	035b      	lsls	r3, r3, #13
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e4c:	2a01      	cmp	r2, #1
 8002e4e:	d002      	beq.n	8002e56 <HAL_ADC_Init+0x22e>
 8002e50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e54:	e000      	b.n	8002e58 <HAL_ADC_Init+0x230>
 8002e56:	2200      	movs	r2, #0
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d11b      	bne.n	8002eae <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7e5b      	ldrb	r3, [r3, #25]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	3b01      	subs	r3, #1
 8002e84:	045a      	lsls	r2, r3, #17
 8002e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8e:	663b      	str	r3, [r7, #96]	; 0x60
 8002e90:	e00d      	b.n	8002eae <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002e9a:	f043 0220 	orr.w	r2, r3, #32
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d03a      	beq.n	8002f2c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a16      	ldr	r2, [pc, #88]	; (8002f14 <HAL_ADC_Init+0x2ec>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d004      	beq.n	8002eca <HAL_ADC_Init+0x2a2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <HAL_ADC_Init+0x2f0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d128      	bne.n	8002f1c <HAL_ADC_Init+0x2f4>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002ed2:	d012      	beq.n	8002efa <HAL_ADC_Init+0x2d2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002edc:	d00a      	beq.n	8002ef4 <HAL_ADC_Init+0x2cc>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002ee6:	d002      	beq.n	8002eee <HAL_ADC_Init+0x2c6>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	e018      	b.n	8002f20 <HAL_ADC_Init+0x2f8>
 8002eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef2:	e015      	b.n	8002f20 <HAL_ADC_Init+0x2f8>
 8002ef4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002ef8:	e012      	b.n	8002f20 <HAL_ADC_Init+0x2f8>
 8002efa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002efe:	e00f      	b.n	8002f20 <HAL_ADC_Init+0x2f8>
 8002f00:	20000044 	.word	0x20000044
 8002f04:	431bde83 	.word	0x431bde83
 8002f08:	50000100 	.word	0x50000100
 8002f0c:	50000300 	.word	0x50000300
 8002f10:	50000700 	.word	0x50000700
 8002f14:	50000400 	.word	0x50000400
 8002f18:	50000500 	.word	0x50000500
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f24:	4313      	orrs	r3, r2
 8002f26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d114      	bne.n	8002f64 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f48:	f023 0302 	bic.w	r3, r3, #2
 8002f4c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7e1b      	ldrb	r3, [r3, #24]
 8002f52:	039a      	lsls	r2, r3, #14
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f60:	4313      	orrs	r3, r2
 8002f62:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <HAL_ADC_Init+0x3bc>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002f74:	430b      	orrs	r3, r1
 8002f76:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d10c      	bne.n	8002f9a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f023 010f 	bic.w	r1, r3, #15
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	1e5a      	subs	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
 8002f98:	e007      	b.n	8002faa <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 020f 	bic.w	r2, r2, #15
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f023 0303 	bic.w	r3, r3, #3
 8002fb8:	f043 0201 	orr.w	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
 8002fc0:	e00a      	b.n	8002fd8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f023 0312 	bic.w	r3, r3, #18
 8002fca:	f043 0210 	orr.w	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002fd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3768      	adds	r7, #104	; 0x68
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	fff0c007 	.word	0xfff0c007

08002fe8 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f040 8123 	bne.w	800324a <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_ADC_Start_IT+0x2a>
 800300e:	2302      	movs	r3, #2
 8003010:	e11e      	b.n	8003250 <HAL_ADC_Start_IT+0x268>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f001 f844 	bl	80040a8 <ADC_Enable>
 8003020:	4603      	mov	r3, r0
 8003022:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f040 810a 	bne.w	8003240 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003048:	d004      	beq.n	8003054 <HAL_ADC_Start_IT+0x6c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a82      	ldr	r2, [pc, #520]	; (8003258 <HAL_ADC_Start_IT+0x270>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d106      	bne.n	8003062 <HAL_ADC_Start_IT+0x7a>
 8003054:	4b81      	ldr	r3, [pc, #516]	; (800325c <HAL_ADC_Start_IT+0x274>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	2b00      	cmp	r3, #0
 800305e:	d010      	beq.n	8003082 <HAL_ADC_Start_IT+0x9a>
 8003060:	e005      	b.n	800306e <HAL_ADC_Start_IT+0x86>
 8003062:	4b7f      	ldr	r3, [pc, #508]	; (8003260 <HAL_ADC_Start_IT+0x278>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_ADC_Start_IT+0x9a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003076:	d004      	beq.n	8003082 <HAL_ADC_Start_IT+0x9a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a79      	ldr	r2, [pc, #484]	; (8003264 <HAL_ADC_Start_IT+0x27c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d115      	bne.n	80030ae <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d036      	beq.n	800310a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80030ac:	e02d      	b.n	800310a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c2:	d004      	beq.n	80030ce <HAL_ADC_Start_IT+0xe6>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a63      	ldr	r2, [pc, #396]	; (8003258 <HAL_ADC_Start_IT+0x270>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d10a      	bne.n	80030e4 <HAL_ADC_Start_IT+0xfc>
 80030ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e008      	b.n	80030f6 <HAL_ADC_Start_IT+0x10e>
 80030e4:	4b5f      	ldr	r3, [pc, #380]	; (8003264 <HAL_ADC_Start_IT+0x27c>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003102:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003116:	d106      	bne.n	8003126 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	f023 0206 	bic.w	r2, r3, #6
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	645a      	str	r2, [r3, #68]	; 0x44
 8003124:	e002      	b.n	800312c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	221c      	movs	r2, #28
 800313a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d110      	bne.n	8003166 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0204 	bic.w	r2, r2, #4
 8003152:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0208 	orr.w	r2, r2, #8
 8003162:	605a      	str	r2, [r3, #4]
          break;
 8003164:	e008      	b.n	8003178 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 020c 	orr.w	r2, r2, #12
 8003174:	605a      	str	r2, [r3, #4]
          break;
 8003176:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317c:	2b01      	cmp	r3, #1
 800317e:	d107      	bne.n	8003190 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0210 	bic.w	r2, r2, #16
 800318e:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003198:	d004      	beq.n	80031a4 <HAL_ADC_Start_IT+0x1bc>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a2e      	ldr	r2, [pc, #184]	; (8003258 <HAL_ADC_Start_IT+0x270>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d106      	bne.n	80031b2 <HAL_ADC_Start_IT+0x1ca>
 80031a4:	4b2d      	ldr	r3, [pc, #180]	; (800325c <HAL_ADC_Start_IT+0x274>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d03e      	beq.n	800322e <HAL_ADC_Start_IT+0x246>
 80031b0:	e005      	b.n	80031be <HAL_ADC_Start_IT+0x1d6>
 80031b2:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <HAL_ADC_Start_IT+0x278>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d037      	beq.n	800322e <HAL_ADC_Start_IT+0x246>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031c6:	d004      	beq.n	80031d2 <HAL_ADC_Start_IT+0x1ea>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a22      	ldr	r2, [pc, #136]	; (8003258 <HAL_ADC_Start_IT+0x270>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d106      	bne.n	80031e0 <HAL_ADC_Start_IT+0x1f8>
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <HAL_ADC_Start_IT+0x274>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d027      	beq.n	800322e <HAL_ADC_Start_IT+0x246>
 80031de:	e005      	b.n	80031ec <HAL_ADC_Start_IT+0x204>
 80031e0:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <HAL_ADC_Start_IT+0x278>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d020      	beq.n	800322e <HAL_ADC_Start_IT+0x246>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f4:	d004      	beq.n	8003200 <HAL_ADC_Start_IT+0x218>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a17      	ldr	r2, [pc, #92]	; (8003258 <HAL_ADC_Start_IT+0x270>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d106      	bne.n	800320e <HAL_ADC_Start_IT+0x226>
 8003200:	4b16      	ldr	r3, [pc, #88]	; (800325c <HAL_ADC_Start_IT+0x274>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2b09      	cmp	r3, #9
 800320a:	d010      	beq.n	800322e <HAL_ADC_Start_IT+0x246>
 800320c:	e005      	b.n	800321a <HAL_ADC_Start_IT+0x232>
 800320e:	4b14      	ldr	r3, [pc, #80]	; (8003260 <HAL_ADC_Start_IT+0x278>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	2b09      	cmp	r3, #9
 8003218:	d009      	beq.n	800322e <HAL_ADC_Start_IT+0x246>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003222:	d004      	beq.n	800322e <HAL_ADC_Start_IT+0x246>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0e      	ldr	r2, [pc, #56]	; (8003264 <HAL_ADC_Start_IT+0x27c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d10f      	bne.n	800324e <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0204 	orr.w	r2, r2, #4
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	e006      	b.n	800324e <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003248:	e001      	b.n	800324e <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800324a:	2302      	movs	r3, #2
 800324c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800324e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	50000100 	.word	0x50000100
 800325c:	50000300 	.word	0x50000300
 8003260:	50000700 	.word	0x50000700
 8003264:	50000400 	.word	0x50000400

08003268 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d106      	bne.n	80032b4 <HAL_ADC_IRQHandler+0x30>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d00f      	beq.n	80032d4 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80032be:	2b08      	cmp	r3, #8
 80032c0:	f040 80c0 	bne.w	8003444 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	f040 80b8 	bne.w	8003444 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032f4:	d004      	beq.n	8003300 <HAL_ADC_IRQHandler+0x7c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a95      	ldr	r2, [pc, #596]	; (8003550 <HAL_ADC_IRQHandler+0x2cc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d106      	bne.n	800330e <HAL_ADC_IRQHandler+0x8a>
 8003300:	4b94      	ldr	r3, [pc, #592]	; (8003554 <HAL_ADC_IRQHandler+0x2d0>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	2b00      	cmp	r3, #0
 800330a:	d03e      	beq.n	800338a <HAL_ADC_IRQHandler+0x106>
 800330c:	e005      	b.n	800331a <HAL_ADC_IRQHandler+0x96>
 800330e:	4b92      	ldr	r3, [pc, #584]	; (8003558 <HAL_ADC_IRQHandler+0x2d4>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	2b00      	cmp	r3, #0
 8003318:	d037      	beq.n	800338a <HAL_ADC_IRQHandler+0x106>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003322:	d004      	beq.n	800332e <HAL_ADC_IRQHandler+0xaa>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a89      	ldr	r2, [pc, #548]	; (8003550 <HAL_ADC_IRQHandler+0x2cc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d106      	bne.n	800333c <HAL_ADC_IRQHandler+0xb8>
 800332e:	4b89      	ldr	r3, [pc, #548]	; (8003554 <HAL_ADC_IRQHandler+0x2d0>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2b05      	cmp	r3, #5
 8003338:	d027      	beq.n	800338a <HAL_ADC_IRQHandler+0x106>
 800333a:	e005      	b.n	8003348 <HAL_ADC_IRQHandler+0xc4>
 800333c:	4b86      	ldr	r3, [pc, #536]	; (8003558 <HAL_ADC_IRQHandler+0x2d4>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	2b05      	cmp	r3, #5
 8003346:	d020      	beq.n	800338a <HAL_ADC_IRQHandler+0x106>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003350:	d004      	beq.n	800335c <HAL_ADC_IRQHandler+0xd8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a7e      	ldr	r2, [pc, #504]	; (8003550 <HAL_ADC_IRQHandler+0x2cc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d106      	bne.n	800336a <HAL_ADC_IRQHandler+0xe6>
 800335c:	4b7d      	ldr	r3, [pc, #500]	; (8003554 <HAL_ADC_IRQHandler+0x2d0>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2b09      	cmp	r3, #9
 8003366:	d010      	beq.n	800338a <HAL_ADC_IRQHandler+0x106>
 8003368:	e005      	b.n	8003376 <HAL_ADC_IRQHandler+0xf2>
 800336a:	4b7b      	ldr	r3, [pc, #492]	; (8003558 <HAL_ADC_IRQHandler+0x2d4>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	2b09      	cmp	r3, #9
 8003374:	d009      	beq.n	800338a <HAL_ADC_IRQHandler+0x106>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800337e:	d004      	beq.n	800338a <HAL_ADC_IRQHandler+0x106>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a75      	ldr	r2, [pc, #468]	; (800355c <HAL_ADC_IRQHandler+0x2d8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d104      	bne.n	8003394 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	e00f      	b.n	80033b4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800339c:	d004      	beq.n	80033a8 <HAL_ADC_IRQHandler+0x124>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a6b      	ldr	r2, [pc, #428]	; (8003550 <HAL_ADC_IRQHandler+0x2cc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d102      	bne.n	80033ae <HAL_ADC_IRQHandler+0x12a>
 80033a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033ac:	e000      	b.n	80033b0 <HAL_ADC_IRQHandler+0x12c>
 80033ae:	4b6b      	ldr	r3, [pc, #428]	; (800355c <HAL_ADC_IRQHandler+0x2d8>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d139      	bne.n	8003436 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d134      	bne.n	8003436 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d12d      	bne.n	8003436 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d11a      	bne.n	800341e <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 020c 	bic.w	r2, r2, #12
 80033f6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d112      	bne.n	8003436 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f043 0201 	orr.w	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
 800341c:	e00b      	b.n	8003436 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f043 0210 	orr.w	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff fbd8 	bl	8002bec <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	220c      	movs	r2, #12
 8003442:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b20      	cmp	r3, #32
 8003450:	d106      	bne.n	8003460 <HAL_ADC_IRQHandler+0x1dc>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b20      	cmp	r3, #32
 800345e:	d00f      	beq.n	8003480 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	f040 813c 	bne.w	80036e8 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	f040 8134 	bne.w	80036e8 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003494:	d004      	beq.n	80034a0 <HAL_ADC_IRQHandler+0x21c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a2d      	ldr	r2, [pc, #180]	; (8003550 <HAL_ADC_IRQHandler+0x2cc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d106      	bne.n	80034ae <HAL_ADC_IRQHandler+0x22a>
 80034a0:	4b2c      	ldr	r3, [pc, #176]	; (8003554 <HAL_ADC_IRQHandler+0x2d0>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d03e      	beq.n	800352a <HAL_ADC_IRQHandler+0x2a6>
 80034ac:	e005      	b.n	80034ba <HAL_ADC_IRQHandler+0x236>
 80034ae:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <HAL_ADC_IRQHandler+0x2d4>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d037      	beq.n	800352a <HAL_ADC_IRQHandler+0x2a6>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c2:	d004      	beq.n	80034ce <HAL_ADC_IRQHandler+0x24a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a21      	ldr	r2, [pc, #132]	; (8003550 <HAL_ADC_IRQHandler+0x2cc>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d106      	bne.n	80034dc <HAL_ADC_IRQHandler+0x258>
 80034ce:	4b21      	ldr	r3, [pc, #132]	; (8003554 <HAL_ADC_IRQHandler+0x2d0>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 031f 	and.w	r3, r3, #31
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d027      	beq.n	800352a <HAL_ADC_IRQHandler+0x2a6>
 80034da:	e005      	b.n	80034e8 <HAL_ADC_IRQHandler+0x264>
 80034dc:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <HAL_ADC_IRQHandler+0x2d4>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d020      	beq.n	800352a <HAL_ADC_IRQHandler+0x2a6>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034f0:	d004      	beq.n	80034fc <HAL_ADC_IRQHandler+0x278>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a16      	ldr	r2, [pc, #88]	; (8003550 <HAL_ADC_IRQHandler+0x2cc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d106      	bne.n	800350a <HAL_ADC_IRQHandler+0x286>
 80034fc:	4b15      	ldr	r3, [pc, #84]	; (8003554 <HAL_ADC_IRQHandler+0x2d0>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2b09      	cmp	r3, #9
 8003506:	d010      	beq.n	800352a <HAL_ADC_IRQHandler+0x2a6>
 8003508:	e005      	b.n	8003516 <HAL_ADC_IRQHandler+0x292>
 800350a:	4b13      	ldr	r3, [pc, #76]	; (8003558 <HAL_ADC_IRQHandler+0x2d4>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2b09      	cmp	r3, #9
 8003514:	d009      	beq.n	800352a <HAL_ADC_IRQHandler+0x2a6>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800351e:	d004      	beq.n	800352a <HAL_ADC_IRQHandler+0x2a6>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a0d      	ldr	r2, [pc, #52]	; (800355c <HAL_ADC_IRQHandler+0x2d8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d104      	bne.n	8003534 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	e018      	b.n	8003566 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800353c:	d004      	beq.n	8003548 <HAL_ADC_IRQHandler+0x2c4>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a03      	ldr	r2, [pc, #12]	; (8003550 <HAL_ADC_IRQHandler+0x2cc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d10b      	bne.n	8003560 <HAL_ADC_IRQHandler+0x2dc>
 8003548:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800354c:	e009      	b.n	8003562 <HAL_ADC_IRQHandler+0x2de>
 800354e:	bf00      	nop
 8003550:	50000100 	.word	0x50000100
 8003554:	50000300 	.word	0x50000300
 8003558:	50000700 	.word	0x50000700
 800355c:	50000400 	.word	0x50000400
 8003560:	4b9d      	ldr	r3, [pc, #628]	; (80037d8 <HAL_ADC_IRQHandler+0x554>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003570:	2b00      	cmp	r3, #0
 8003572:	f040 80b2 	bne.w	80036da <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00d      	beq.n	800359c <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 80a5 	bne.w	80036da <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 809f 	bne.w	80036da <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b40      	cmp	r3, #64	; 0x40
 80035a8:	f040 8097 	bne.w	80036da <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035b4:	d004      	beq.n	80035c0 <HAL_ADC_IRQHandler+0x33c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a88      	ldr	r2, [pc, #544]	; (80037dc <HAL_ADC_IRQHandler+0x558>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d106      	bne.n	80035ce <HAL_ADC_IRQHandler+0x34a>
 80035c0:	4b87      	ldr	r3, [pc, #540]	; (80037e0 <HAL_ADC_IRQHandler+0x55c>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d03e      	beq.n	800364a <HAL_ADC_IRQHandler+0x3c6>
 80035cc:	e005      	b.n	80035da <HAL_ADC_IRQHandler+0x356>
 80035ce:	4b85      	ldr	r3, [pc, #532]	; (80037e4 <HAL_ADC_IRQHandler+0x560>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d037      	beq.n	800364a <HAL_ADC_IRQHandler+0x3c6>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035e2:	d004      	beq.n	80035ee <HAL_ADC_IRQHandler+0x36a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a7c      	ldr	r2, [pc, #496]	; (80037dc <HAL_ADC_IRQHandler+0x558>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d106      	bne.n	80035fc <HAL_ADC_IRQHandler+0x378>
 80035ee:	4b7c      	ldr	r3, [pc, #496]	; (80037e0 <HAL_ADC_IRQHandler+0x55c>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d027      	beq.n	800364a <HAL_ADC_IRQHandler+0x3c6>
 80035fa:	e005      	b.n	8003608 <HAL_ADC_IRQHandler+0x384>
 80035fc:	4b79      	ldr	r3, [pc, #484]	; (80037e4 <HAL_ADC_IRQHandler+0x560>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2b06      	cmp	r3, #6
 8003606:	d020      	beq.n	800364a <HAL_ADC_IRQHandler+0x3c6>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003610:	d004      	beq.n	800361c <HAL_ADC_IRQHandler+0x398>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a71      	ldr	r2, [pc, #452]	; (80037dc <HAL_ADC_IRQHandler+0x558>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d106      	bne.n	800362a <HAL_ADC_IRQHandler+0x3a6>
 800361c:	4b70      	ldr	r3, [pc, #448]	; (80037e0 <HAL_ADC_IRQHandler+0x55c>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	2b07      	cmp	r3, #7
 8003626:	d010      	beq.n	800364a <HAL_ADC_IRQHandler+0x3c6>
 8003628:	e005      	b.n	8003636 <HAL_ADC_IRQHandler+0x3b2>
 800362a:	4b6e      	ldr	r3, [pc, #440]	; (80037e4 <HAL_ADC_IRQHandler+0x560>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	2b07      	cmp	r3, #7
 8003634:	d009      	beq.n	800364a <HAL_ADC_IRQHandler+0x3c6>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800363e:	d004      	beq.n	800364a <HAL_ADC_IRQHandler+0x3c6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a64      	ldr	r2, [pc, #400]	; (80037d8 <HAL_ADC_IRQHandler+0x554>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d104      	bne.n	8003654 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e00f      	b.n	8003674 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800365c:	d004      	beq.n	8003668 <HAL_ADC_IRQHandler+0x3e4>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a5e      	ldr	r2, [pc, #376]	; (80037dc <HAL_ADC_IRQHandler+0x558>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d102      	bne.n	800366e <HAL_ADC_IRQHandler+0x3ea>
 8003668:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800366c:	e000      	b.n	8003670 <HAL_ADC_IRQHandler+0x3ec>
 800366e:	4b5a      	ldr	r3, [pc, #360]	; (80037d8 <HAL_ADC_IRQHandler+0x554>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d12d      	bne.n	80036da <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d11a      	bne.n	80036c2 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800369a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d112      	bne.n	80036da <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f043 0201 	orr.w	r2, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
 80036c0:	e00b      	b.n	80036da <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f043 0210 	orr.w	r2, r3, #16
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f043 0201 	orr.w	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f8de 	bl	800389c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2260      	movs	r2, #96	; 0x60
 80036e6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f2:	2b80      	cmp	r3, #128	; 0x80
 80036f4:	d113      	bne.n	800371e <HAL_ADC_IRQHandler+0x49a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003700:	2b80      	cmp	r3, #128	; 0x80
 8003702:	d10c      	bne.n	800371e <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff fa75 	bl	8002c00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2280      	movs	r2, #128	; 0x80
 800371c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372c:	d115      	bne.n	800375a <HAL_ADC_IRQHandler+0x4d6>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373c:	d10d      	bne.n	800375a <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8ba 	bl	80038c4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003758:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003768:	d115      	bne.n	8003796 <HAL_ADC_IRQHandler+0x512>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003778:	d10d      	bne.n	8003796 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8a6 	bl	80038d8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003794:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d151      	bne.n	8003848 <HAL_ADC_IRQHandler+0x5c4>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	d14a      	bne.n	8003848 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d102      	bne.n	80037c0 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 80037ba:	2301      	movs	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	e02d      	b.n	800381c <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037c8:	d004      	beq.n	80037d4 <HAL_ADC_IRQHandler+0x550>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a03      	ldr	r2, [pc, #12]	; (80037dc <HAL_ADC_IRQHandler+0x558>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d109      	bne.n	80037e8 <HAL_ADC_IRQHandler+0x564>
 80037d4:	4b02      	ldr	r3, [pc, #8]	; (80037e0 <HAL_ADC_IRQHandler+0x55c>)
 80037d6:	e008      	b.n	80037ea <HAL_ADC_IRQHandler+0x566>
 80037d8:	50000400 	.word	0x50000400
 80037dc:	50000100 	.word	0x50000100
 80037e0:	50000300 	.word	0x50000300
 80037e4:	50000700 	.word	0x50000700
 80037e8:	4b2b      	ldr	r3, [pc, #172]	; (8003898 <HAL_ADC_IRQHandler+0x614>)
 80037ea:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d109      	bne.n	800380c <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d10a      	bne.n	800381c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003806:	2301      	movs	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	e007      	b.n	800381c <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003818:	2301      	movs	r3, #1
 800381a:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10e      	bne.n	8003840 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	f043 0202 	orr.w	r2, r3, #2
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff f9ea 	bl	8002c14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2210      	movs	r2, #16
 8003846:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003856:	d11b      	bne.n	8003890 <HAL_ADC_IRQHandler+0x60c>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003866:	d113      	bne.n	8003890 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	f043 0208 	orr.w	r2, r3, #8
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003888:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f810 	bl	80038b0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003890:	bf00      	nop
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	50000700 	.word	0x50000700

0800389c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b09b      	sub	sp, #108	; 0x6c
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_ADC_ConfigChannel+0x22>
 800390a:	2302      	movs	r3, #2
 800390c:	e2cb      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x5ba>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	f040 82af 	bne.w	8003e84 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b04      	cmp	r3, #4
 800392c:	d81c      	bhi.n	8003968 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	461a      	mov	r2, r3
 8003942:	231f      	movs	r3, #31
 8003944:	4093      	lsls	r3, r2
 8003946:	43db      	mvns	r3, r3
 8003948:	4019      	ands	r1, r3
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4413      	add	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	fa00 f203 	lsl.w	r2, r0, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
 8003966:	e063      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b09      	cmp	r3, #9
 800396e:	d81e      	bhi.n	80039ae <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	3b1e      	subs	r3, #30
 8003984:	221f      	movs	r2, #31
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	4019      	ands	r1, r3
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	3b1e      	subs	r3, #30
 80039a0:	fa00 f203 	lsl.w	r2, r0, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	635a      	str	r2, [r3, #52]	; 0x34
 80039ac:	e040      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b0e      	cmp	r3, #14
 80039b4:	d81e      	bhi.n	80039f4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	4413      	add	r3, r2
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	3b3c      	subs	r3, #60	; 0x3c
 80039ca:	221f      	movs	r2, #31
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	4019      	ands	r1, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	4413      	add	r3, r2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	3b3c      	subs	r3, #60	; 0x3c
 80039e6:	fa00 f203 	lsl.w	r2, r0, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
 80039f2:	e01d      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	3b5a      	subs	r3, #90	; 0x5a
 8003a08:	221f      	movs	r2, #31
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	4019      	ands	r1, r3
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4413      	add	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	3b5a      	subs	r3, #90	; 0x5a
 8003a24:	fa00 f203 	lsl.w	r2, r0, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f040 80e5 	bne.w	8003c0a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b09      	cmp	r3, #9
 8003a46:	d91c      	bls.n	8003a82 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6999      	ldr	r1, [r3, #24]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	3b1e      	subs	r3, #30
 8003a5a:	2207      	movs	r2, #7
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	4019      	ands	r1, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	6898      	ldr	r0, [r3, #8]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4413      	add	r3, r2
 8003a72:	3b1e      	subs	r3, #30
 8003a74:	fa00 f203 	lsl.w	r2, r0, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	619a      	str	r2, [r3, #24]
 8003a80:	e019      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6959      	ldr	r1, [r3, #20]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	2207      	movs	r2, #7
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	4019      	ands	r1, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	6898      	ldr	r0, [r3, #8]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	08db      	lsrs	r3, r3, #3
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d84f      	bhi.n	8003b78 <HAL_ADC_ConfigChannel+0x28c>
 8003ad8:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <HAL_ADC_ConfigChannel+0x1f4>)
 8003ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ade:	bf00      	nop
 8003ae0:	08003af1 	.word	0x08003af1
 8003ae4:	08003b13 	.word	0x08003b13
 8003ae8:	08003b35 	.word	0x08003b35
 8003aec:	08003b57 	.word	0x08003b57
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003af6:	4b9f      	ldr	r3, [pc, #636]	; (8003d74 <HAL_ADC_ConfigChannel+0x488>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	0691      	lsls	r1, r2, #26
 8003b00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b02:	430a      	orrs	r2, r1
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003b0e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003b10:	e07e      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b18:	4b96      	ldr	r3, [pc, #600]	; (8003d74 <HAL_ADC_ConfigChannel+0x488>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	0691      	lsls	r1, r2, #26
 8003b22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b24:	430a      	orrs	r2, r1
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003b30:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003b32:	e06d      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003b3a:	4b8e      	ldr	r3, [pc, #568]	; (8003d74 <HAL_ADC_ConfigChannel+0x488>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	0691      	lsls	r1, r2, #26
 8003b44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b46:	430a      	orrs	r2, r1
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003b52:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003b54:	e05c      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b5c:	4b85      	ldr	r3, [pc, #532]	; (8003d74 <HAL_ADC_ConfigChannel+0x488>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	0691      	lsls	r1, r2, #26
 8003b66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003b74:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003b76:	e04b      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	069b      	lsls	r3, r3, #26
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d107      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b9a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ba2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	069b      	lsls	r3, r3, #26
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d107      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003bbe:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	069b      	lsls	r3, r3, #26
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d107      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003be2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	069b      	lsls	r3, r3, #26
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d10a      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c06:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003c08:	e001      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003c0e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d108      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x344>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x344>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x346>
 8003c30:	2300      	movs	r3, #0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f040 8131 	bne.w	8003e9a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d00f      	beq.n	8003c60 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43da      	mvns	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	400a      	ands	r2, r1
 8003c5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003c5e:	e049      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b09      	cmp	r3, #9
 8003c80:	d91c      	bls.n	8003cbc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6999      	ldr	r1, [r3, #24]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	4413      	add	r3, r2
 8003c92:	3b1b      	subs	r3, #27
 8003c94:	2207      	movs	r2, #7
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	4019      	ands	r1, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6898      	ldr	r0, [r3, #8]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	4413      	add	r3, r2
 8003cac:	3b1b      	subs	r3, #27
 8003cae:	fa00 f203 	lsl.w	r2, r0, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	619a      	str	r2, [r3, #24]
 8003cba:	e01b      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6959      	ldr	r1, [r3, #20]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	2207      	movs	r2, #7
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	4019      	ands	r1, r3
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6898      	ldr	r0, [r3, #8]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	4413      	add	r3, r2
 8003ce8:	fa00 f203 	lsl.w	r2, r0, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cfc:	d004      	beq.n	8003d08 <HAL_ADC_ConfigChannel+0x41c>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <HAL_ADC_ConfigChannel+0x48c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d101      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x420>
 8003d08:	4b1c      	ldr	r3, [pc, #112]	; (8003d7c <HAL_ADC_ConfigChannel+0x490>)
 8003d0a:	e000      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x422>
 8003d0c:	4b1c      	ldr	r3, [pc, #112]	; (8003d80 <HAL_ADC_ConfigChannel+0x494>)
 8003d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b10      	cmp	r3, #16
 8003d16:	d105      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d015      	beq.n	8003d50 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003d28:	2b11      	cmp	r3, #17
 8003d2a:	d105      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00b      	beq.n	8003d50 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003d3c:	2b12      	cmp	r3, #18
 8003d3e:	f040 80ac 	bne.w	8003e9a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 80a5 	bne.w	8003e9a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d58:	d102      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x474>
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <HAL_ADC_ConfigChannel+0x48c>)
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e023      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x4bc>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <HAL_ADC_ConfigChannel+0x48c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d10c      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x498>
 8003d6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e01a      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x4bc>
 8003d72:	bf00      	nop
 8003d74:	83fff000 	.word	0x83fff000
 8003d78:	50000100 	.word	0x50000100
 8003d7c:	50000300 	.word	0x50000300
 8003d80:	50000700 	.word	0x50000700
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a4a      	ldr	r2, [pc, #296]	; (8003eb4 <HAL_ADC_ConfigChannel+0x5c8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d102      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x4a8>
 8003d8e:	4b4a      	ldr	r3, [pc, #296]	; (8003eb8 <HAL_ADC_ConfigChannel+0x5cc>)
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	e009      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x4bc>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a47      	ldr	r2, [pc, #284]	; (8003eb8 <HAL_ADC_ConfigChannel+0x5cc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d102      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x4b8>
 8003d9e:	4b45      	ldr	r3, [pc, #276]	; (8003eb4 <HAL_ADC_ConfigChannel+0x5c8>)
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e001      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x4bc>
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d108      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x4dc>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x4dc>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_ADC_ConfigChannel+0x4de>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d150      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003dce:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d010      	beq.n	8003df6 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d107      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x504>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x504>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x506>
 8003df0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d13c      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b10      	cmp	r3, #16
 8003dfc:	d11d      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x54e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e06:	d118      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e12:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e14:	4b29      	ldr	r3, [pc, #164]	; (8003ebc <HAL_ADC_ConfigChannel+0x5d0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <HAL_ADC_ConfigChannel+0x5d4>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	0c9a      	lsrs	r2, r3, #18
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e2a:	e002      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f9      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003e38:	e02e      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b11      	cmp	r3, #17
 8003e40:	d10b      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x56e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e4a:	d106      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e56:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003e58:	e01e      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b12      	cmp	r3, #18
 8003e60:	d11a      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e6c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003e6e:	e013      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003e82:	e00a      	b.n	8003e9a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	f043 0220 	orr.w	r2, r3, #32
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003e96:	e000      	b.n	8003e9a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003e98:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003ea2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	376c      	adds	r7, #108	; 0x6c
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	50000400 	.word	0x50000400
 8003eb8:	50000500 	.word	0x50000500
 8003ebc:	20000044 	.word	0x20000044
 8003ec0:	431bde83 	.word	0x431bde83

08003ec4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b099      	sub	sp, #100	; 0x64
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003edc:	d102      	bne.n	8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003ede:	4b6d      	ldr	r3, [pc, #436]	; (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	e01a      	b.n	8003f1a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a6a      	ldr	r2, [pc, #424]	; (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d103      	bne.n	8003ef6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003eee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	e011      	b.n	8003f1a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a67      	ldr	r2, [pc, #412]	; (8004098 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d102      	bne.n	8003f06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f00:	4b66      	ldr	r3, [pc, #408]	; (800409c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	e009      	b.n	8003f1a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a64      	ldr	r2, [pc, #400]	; (800409c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d102      	bne.n	8003f16 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003f10:	4b61      	ldr	r3, [pc, #388]	; (8004098 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	e001      	b.n	8003f1a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0b0      	b.n	8004086 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e0a9      	b.n	8004086 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f040 808d 	bne.w	8004064 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 8086 	bne.w	8004064 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f60:	d004      	beq.n	8003f6c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a4b      	ldr	r2, [pc, #300]	; (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d101      	bne.n	8003f70 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003f6c:	4b4c      	ldr	r3, [pc, #304]	; (80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003f6e:	e000      	b.n	8003f72 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003f70:	4b4c      	ldr	r3, [pc, #304]	; (80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003f72:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d040      	beq.n	8003ffe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	6859      	ldr	r1, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f8e:	035b      	lsls	r3, r3, #13
 8003f90:	430b      	orrs	r3, r1
 8003f92:	431a      	orrs	r2, r3
 8003f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f96:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d108      	bne.n	8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d15c      	bne.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d107      	bne.n	8003fda <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003fda:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d14b      	bne.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003fe8:	f023 030f 	bic.w	r3, r3, #15
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	6811      	ldr	r1, [r2, #0]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	6892      	ldr	r2, [r2, #8]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ffa:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ffc:	e03c      	b.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004008:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d108      	bne.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800402a:	2300      	movs	r3, #0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d123      	bne.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d107      	bne.n	800404c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800404c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800404e:	2b00      	cmp	r3, #0
 8004050:	d112      	bne.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800405a:	f023 030f 	bic.w	r3, r3, #15
 800405e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004060:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004062:	e009      	b.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004076:	e000      	b.n	800407a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004078:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004082:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004086:	4618      	mov	r0, r3
 8004088:	3764      	adds	r7, #100	; 0x64
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	50000100 	.word	0x50000100
 8004098:	50000400 	.word	0x50000400
 800409c:	50000500 	.word	0x50000500
 80040a0:	50000300 	.word	0x50000300
 80040a4:	50000700 	.word	0x50000700

080040a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d108      	bne.n	80040d4 <ADC_Enable+0x2c>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <ADC_Enable+0x2c>
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <ADC_Enable+0x2e>
 80040d4:	2300      	movs	r3, #0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d143      	bne.n	8004162 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	4b22      	ldr	r3, [pc, #136]	; (800416c <ADC_Enable+0xc4>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00d      	beq.n	8004104 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	f043 0210 	orr.w	r2, r3, #16
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f8:	f043 0201 	orr.w	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e02f      	b.n	8004164 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004114:	f7fe fd3a 	bl	8002b8c <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800411a:	e01b      	b.n	8004154 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800411c:	f7fe fd36 	bl	8002b8c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d914      	bls.n	8004154 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d00d      	beq.n	8004154 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	f043 0210 	orr.w	r2, r3, #16
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004148:	f043 0201 	orr.w	r2, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e007      	b.n	8004164 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b01      	cmp	r3, #1
 8004160:	d1dc      	bne.n	800411c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	8000003f 	.word	0x8000003f

08004170 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b01      	cmp	r3, #1
 8004188:	d108      	bne.n	800419c <ADC_Disable+0x2c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <ADC_Disable+0x2c>
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <ADC_Disable+0x2e>
 800419c:	2300      	movs	r3, #0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d047      	beq.n	8004232 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 030d 	and.w	r3, r3, #13
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d10f      	bne.n	80041d0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0202 	orr.w	r2, r2, #2
 80041be:	609a      	str	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2203      	movs	r2, #3
 80041c6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80041c8:	f7fe fce0 	bl	8002b8c <HAL_GetTick>
 80041cc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80041ce:	e029      	b.n	8004224 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	f043 0210 	orr.w	r2, r3, #16
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e0:	f043 0201 	orr.w	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e023      	b.n	8004234 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041ec:	f7fe fcce 	bl	8002b8c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d914      	bls.n	8004224 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d10d      	bne.n	8004224 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f043 0210 	orr.w	r2, r3, #16
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004218:	f043 0201 	orr.w	r2, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e007      	b.n	8004234 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d0dc      	beq.n	80041ec <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800424c:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <__NVIC_SetPriorityGrouping+0x44>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004258:	4013      	ands	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800426e:	4a04      	ldr	r2, [pc, #16]	; (8004280 <__NVIC_SetPriorityGrouping+0x44>)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	60d3      	str	r3, [r2, #12]
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <__NVIC_GetPriorityGrouping+0x18>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	f003 0307 	and.w	r3, r3, #7
}
 8004292:	4618      	mov	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	db0b      	blt.n	80042ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	f003 021f 	and.w	r2, r3, #31
 80042b8:	4907      	ldr	r1, [pc, #28]	; (80042d8 <__NVIC_EnableIRQ+0x38>)
 80042ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	2001      	movs	r0, #1
 80042c2:	fa00 f202 	lsl.w	r2, r0, r2
 80042c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	e000e100 	.word	0xe000e100

080042dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	6039      	str	r1, [r7, #0]
 80042e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	db0a      	blt.n	8004306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	490c      	ldr	r1, [pc, #48]	; (8004328 <__NVIC_SetPriority+0x4c>)
 80042f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fa:	0112      	lsls	r2, r2, #4
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	440b      	add	r3, r1
 8004300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004304:	e00a      	b.n	800431c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4908      	ldr	r1, [pc, #32]	; (800432c <__NVIC_SetPriority+0x50>)
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	3b04      	subs	r3, #4
 8004314:	0112      	lsls	r2, r2, #4
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	440b      	add	r3, r1
 800431a:	761a      	strb	r2, [r3, #24]
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000e100 	.word	0xe000e100
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004330:	b480      	push	{r7}
 8004332:	b089      	sub	sp, #36	; 0x24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f1c3 0307 	rsb	r3, r3, #7
 800434a:	2b04      	cmp	r3, #4
 800434c:	bf28      	it	cs
 800434e:	2304      	movcs	r3, #4
 8004350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3304      	adds	r3, #4
 8004356:	2b06      	cmp	r3, #6
 8004358:	d902      	bls.n	8004360 <NVIC_EncodePriority+0x30>
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	3b03      	subs	r3, #3
 800435e:	e000      	b.n	8004362 <NVIC_EncodePriority+0x32>
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004364:	f04f 32ff 	mov.w	r2, #4294967295
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43da      	mvns	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	401a      	ands	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004378:	f04f 31ff 	mov.w	r1, #4294967295
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	43d9      	mvns	r1, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004388:	4313      	orrs	r3, r2
         );
}
 800438a:	4618      	mov	r0, r3
 800438c:	3724      	adds	r7, #36	; 0x24
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043a8:	d301      	bcc.n	80043ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043aa:	2301      	movs	r3, #1
 80043ac:	e00f      	b.n	80043ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <SysTick_Config+0x40>)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043b6:	210f      	movs	r1, #15
 80043b8:	f04f 30ff 	mov.w	r0, #4294967295
 80043bc:	f7ff ff8e 	bl	80042dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <SysTick_Config+0x40>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043c6:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <SysTick_Config+0x40>)
 80043c8:	2207      	movs	r2, #7
 80043ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	e000e010 	.word	0xe000e010

080043dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff ff29 	bl	800423c <__NVIC_SetPriorityGrouping>
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b086      	sub	sp, #24
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	4603      	mov	r3, r0
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	607a      	str	r2, [r7, #4]
 80043fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004404:	f7ff ff3e 	bl	8004284 <__NVIC_GetPriorityGrouping>
 8004408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	6978      	ldr	r0, [r7, #20]
 8004410:	f7ff ff8e 	bl	8004330 <NVIC_EncodePriority>
 8004414:	4602      	mov	r2, r0
 8004416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800441a:	4611      	mov	r1, r2
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff ff5d 	bl	80042dc <__NVIC_SetPriority>
}
 8004422:	bf00      	nop
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	4603      	mov	r3, r0
 8004432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff31 	bl	80042a0 <__NVIC_EnableIRQ>
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff ffa2 	bl	8004398 <SysTick_Config>
 8004454:	4603      	mov	r3, r0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800446e:	e154      	b.n	800471a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	2101      	movs	r1, #1
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	fa01 f303 	lsl.w	r3, r1, r3
 800447c:	4013      	ands	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8146 	beq.w	8004714 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d005      	beq.n	80044a0 <HAL_GPIO_Init+0x40>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d130      	bne.n	8004502 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	2203      	movs	r2, #3
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	43db      	mvns	r3, r3
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044d6:	2201      	movs	r2, #1
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4013      	ands	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	f003 0201 	and.w	r2, r3, #1
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b03      	cmp	r3, #3
 800450c:	d017      	beq.n	800453e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	2203      	movs	r2, #3
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4013      	ands	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d123      	bne.n	8004592 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	08da      	lsrs	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3208      	adds	r2, #8
 8004552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004556:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	220f      	movs	r2, #15
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4013      	ands	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	08da      	lsrs	r2, r3, #3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3208      	adds	r2, #8
 800458c:	6939      	ldr	r1, [r7, #16]
 800458e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	2203      	movs	r2, #3
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f003 0203 	and.w	r2, r3, #3
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 80a0 	beq.w	8004714 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d4:	4b58      	ldr	r3, [pc, #352]	; (8004738 <HAL_GPIO_Init+0x2d8>)
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	4a57      	ldr	r2, [pc, #348]	; (8004738 <HAL_GPIO_Init+0x2d8>)
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	6193      	str	r3, [r2, #24]
 80045e0:	4b55      	ldr	r3, [pc, #340]	; (8004738 <HAL_GPIO_Init+0x2d8>)
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045ec:	4a53      	ldr	r2, [pc, #332]	; (800473c <HAL_GPIO_Init+0x2dc>)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	089b      	lsrs	r3, r3, #2
 80045f2:	3302      	adds	r3, #2
 80045f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	220f      	movs	r2, #15
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4013      	ands	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004616:	d019      	beq.n	800464c <HAL_GPIO_Init+0x1ec>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a49      	ldr	r2, [pc, #292]	; (8004740 <HAL_GPIO_Init+0x2e0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d013      	beq.n	8004648 <HAL_GPIO_Init+0x1e8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a48      	ldr	r2, [pc, #288]	; (8004744 <HAL_GPIO_Init+0x2e4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00d      	beq.n	8004644 <HAL_GPIO_Init+0x1e4>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a47      	ldr	r2, [pc, #284]	; (8004748 <HAL_GPIO_Init+0x2e8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <HAL_GPIO_Init+0x1e0>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a46      	ldr	r2, [pc, #280]	; (800474c <HAL_GPIO_Init+0x2ec>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d101      	bne.n	800463c <HAL_GPIO_Init+0x1dc>
 8004638:	2304      	movs	r3, #4
 800463a:	e008      	b.n	800464e <HAL_GPIO_Init+0x1ee>
 800463c:	2305      	movs	r3, #5
 800463e:	e006      	b.n	800464e <HAL_GPIO_Init+0x1ee>
 8004640:	2303      	movs	r3, #3
 8004642:	e004      	b.n	800464e <HAL_GPIO_Init+0x1ee>
 8004644:	2302      	movs	r3, #2
 8004646:	e002      	b.n	800464e <HAL_GPIO_Init+0x1ee>
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <HAL_GPIO_Init+0x1ee>
 800464c:	2300      	movs	r3, #0
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	f002 0203 	and.w	r2, r2, #3
 8004654:	0092      	lsls	r2, r2, #2
 8004656:	4093      	lsls	r3, r2
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800465e:	4937      	ldr	r1, [pc, #220]	; (800473c <HAL_GPIO_Init+0x2dc>)
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	089b      	lsrs	r3, r3, #2
 8004664:	3302      	adds	r3, #2
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800466c:	4b38      	ldr	r3, [pc, #224]	; (8004750 <HAL_GPIO_Init+0x2f0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	43db      	mvns	r3, r3
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4013      	ands	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004690:	4a2f      	ldr	r2, [pc, #188]	; (8004750 <HAL_GPIO_Init+0x2f0>)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004696:	4b2e      	ldr	r3, [pc, #184]	; (8004750 <HAL_GPIO_Init+0x2f0>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	43db      	mvns	r3, r3
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4013      	ands	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80046ba:	4a25      	ldr	r2, [pc, #148]	; (8004750 <HAL_GPIO_Init+0x2f0>)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046c0:	4b23      	ldr	r3, [pc, #140]	; (8004750 <HAL_GPIO_Init+0x2f0>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	43db      	mvns	r3, r3
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4013      	ands	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80046e4:	4a1a      	ldr	r2, [pc, #104]	; (8004750 <HAL_GPIO_Init+0x2f0>)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046ea:	4b19      	ldr	r3, [pc, #100]	; (8004750 <HAL_GPIO_Init+0x2f0>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	43db      	mvns	r3, r3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4013      	ands	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800470e:	4a10      	ldr	r2, [pc, #64]	; (8004750 <HAL_GPIO_Init+0x2f0>)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	3301      	adds	r3, #1
 8004718:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	f47f aea3 	bne.w	8004470 <HAL_GPIO_Init+0x10>
  }
}
 800472a:	bf00      	nop
 800472c:	bf00      	nop
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	40021000 	.word	0x40021000
 800473c:	40010000 	.word	0x40010000
 8004740:	48000400 	.word	0x48000400
 8004744:	48000800 	.word	0x48000800
 8004748:	48000c00 	.word	0x48000c00
 800474c:	48001000 	.word	0x48001000
 8004750:	40010400 	.word	0x40010400

08004754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	887b      	ldrh	r3, [r7, #2]
 8004766:	4013      	ands	r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
 8004770:	e001      	b.n	8004776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004776:	7bfb      	ldrb	r3, [r7, #15]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	807b      	strh	r3, [r7, #2]
 8004790:	4613      	mov	r3, r2
 8004792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004794:	787b      	ldrb	r3, [r7, #1]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800479a:	887a      	ldrh	r2, [r7, #2]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047a0:	e002      	b.n	80047a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047a2:	887a      	ldrh	r2, [r7, #2]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047be:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d006      	beq.n	80047d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047ca:	4a05      	ldr	r2, [pc, #20]	; (80047e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047d0:	88fb      	ldrh	r3, [r7, #6]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fd f8fc 	bl	80019d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40010400 	.word	0x40010400

080047e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	1d3b      	adds	r3, r7, #4
 80047ee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047f0:	1d3b      	adds	r3, r7, #4
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	f000 bef4 	b.w	80055e6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047fe:	1d3b      	adds	r3, r7, #4
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 816a 	beq.w	8004ae2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800480e:	4bb3      	ldr	r3, [pc, #716]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b04      	cmp	r3, #4
 8004818:	d00c      	beq.n	8004834 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800481a:	4bb0      	ldr	r3, [pc, #704]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b08      	cmp	r3, #8
 8004824:	d159      	bne.n	80048da <HAL_RCC_OscConfig+0xf6>
 8004826:	4bad      	ldr	r3, [pc, #692]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004832:	d152      	bne.n	80048da <HAL_RCC_OscConfig+0xf6>
 8004834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004838:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004840:	fa93 f3a3 	rbit	r3, r3
 8004844:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8004848:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484c:	fab3 f383 	clz	r3, r3
 8004850:	b2db      	uxtb	r3, r3
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d102      	bne.n	8004866 <HAL_RCC_OscConfig+0x82>
 8004860:	4b9e      	ldr	r3, [pc, #632]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	e015      	b.n	8004892 <HAL_RCC_OscConfig+0xae>
 8004866:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800486a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004872:	fa93 f3a3 	rbit	r3, r3
 8004876:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800487a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800487e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004882:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004886:	fa93 f3a3 	rbit	r3, r3
 800488a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800488e:	4b93      	ldr	r3, [pc, #588]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004896:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800489a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800489e:	fa92 f2a2 	rbit	r2, r2
 80048a2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80048a6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80048aa:	fab2 f282 	clz	r2, r2
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	f042 0220 	orr.w	r2, r2, #32
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	f002 021f 	and.w	r2, r2, #31
 80048ba:	2101      	movs	r1, #1
 80048bc:	fa01 f202 	lsl.w	r2, r1, r2
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 810c 	beq.w	8004ae0 <HAL_RCC_OscConfig+0x2fc>
 80048c8:	1d3b      	adds	r3, r7, #4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f040 8106 	bne.w	8004ae0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f000 be86 	b.w	80055e6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048da:	1d3b      	adds	r3, r7, #4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e4:	d106      	bne.n	80048f4 <HAL_RCC_OscConfig+0x110>
 80048e6:	4b7d      	ldr	r3, [pc, #500]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a7c      	ldr	r2, [pc, #496]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e030      	b.n	8004956 <HAL_RCC_OscConfig+0x172>
 80048f4:	1d3b      	adds	r3, r7, #4
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10c      	bne.n	8004918 <HAL_RCC_OscConfig+0x134>
 80048fe:	4b77      	ldr	r3, [pc, #476]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a76      	ldr	r2, [pc, #472]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	4b74      	ldr	r3, [pc, #464]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a73      	ldr	r2, [pc, #460]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	e01e      	b.n	8004956 <HAL_RCC_OscConfig+0x172>
 8004918:	1d3b      	adds	r3, r7, #4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004922:	d10c      	bne.n	800493e <HAL_RCC_OscConfig+0x15a>
 8004924:	4b6d      	ldr	r3, [pc, #436]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a6c      	ldr	r2, [pc, #432]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 800492a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	4b6a      	ldr	r3, [pc, #424]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a69      	ldr	r2, [pc, #420]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e00b      	b.n	8004956 <HAL_RCC_OscConfig+0x172>
 800493e:	4b67      	ldr	r3, [pc, #412]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a66      	ldr	r2, [pc, #408]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	4b64      	ldr	r3, [pc, #400]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a63      	ldr	r2, [pc, #396]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004954:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004956:	4b61      	ldr	r3, [pc, #388]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	f023 020f 	bic.w	r2, r3, #15
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	495d      	ldr	r1, [pc, #372]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004966:	4313      	orrs	r3, r2
 8004968:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d059      	beq.n	8004a28 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004974:	f7fe f90a 	bl	8002b8c <HAL_GetTick>
 8004978:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497c:	e00a      	b.n	8004994 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800497e:	f7fe f905 	bl	8002b8c <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d902      	bls.n	8004994 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	f000 be29 	b.w	80055e6 <HAL_RCC_OscConfig+0xe02>
 8004994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004998:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80049a0:	fa93 f3a3 	rbit	r3, r3
 80049a4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80049a8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ac:	fab3 f383 	clz	r3, r3
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d102      	bne.n	80049c6 <HAL_RCC_OscConfig+0x1e2>
 80049c0:	4b46      	ldr	r3, [pc, #280]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	e015      	b.n	80049f2 <HAL_RCC_OscConfig+0x20e>
 80049c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ce:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80049d2:	fa93 f3a3 	rbit	r3, r3
 80049d6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80049da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80049e2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80049e6:	fa93 f3a3 	rbit	r3, r3
 80049ea:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80049ee:	4b3b      	ldr	r3, [pc, #236]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049f6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80049fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80049fe:	fa92 f2a2 	rbit	r2, r2
 8004a02:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004a06:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004a0a:	fab2 f282 	clz	r2, r2
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	f042 0220 	orr.w	r2, r2, #32
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	f002 021f 	and.w	r2, r2, #31
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0ab      	beq.n	800497e <HAL_RCC_OscConfig+0x19a>
 8004a26:	e05c      	b.n	8004ae2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7fe f8b0 	bl	8002b8c <HAL_GetTick>
 8004a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a32:	f7fe f8ab 	bl	8002b8c <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d902      	bls.n	8004a48 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	f000 bdcf 	b.w	80055e6 <HAL_RCC_OscConfig+0xe02>
 8004a48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a4c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a50:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004a54:	fa93 f3a3 	rbit	r3, r3
 8004a58:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004a5c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a60:	fab3 f383 	clz	r3, r3
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d102      	bne.n	8004a7a <HAL_RCC_OscConfig+0x296>
 8004a74:	4b19      	ldr	r3, [pc, #100]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	e015      	b.n	8004aa6 <HAL_RCC_OscConfig+0x2c2>
 8004a7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a7e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a82:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004a86:	fa93 f3a3 	rbit	r3, r3
 8004a8a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004a8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a92:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a96:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004a9a:	fa93 f3a3 	rbit	r3, r3
 8004a9e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004aa2:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <HAL_RCC_OscConfig+0x2f8>)
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004aaa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004aae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004ab2:	fa92 f2a2 	rbit	r2, r2
 8004ab6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004aba:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004abe:	fab2 f282 	clz	r2, r2
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	f042 0220 	orr.w	r2, r2, #32
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	f002 021f 	and.w	r2, r2, #31
 8004ace:	2101      	movs	r1, #1
 8004ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1ab      	bne.n	8004a32 <HAL_RCC_OscConfig+0x24e>
 8004ada:	e002      	b.n	8004ae2 <HAL_RCC_OscConfig+0x2fe>
 8004adc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae2:	1d3b      	adds	r3, r7, #4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 816f 	beq.w	8004dd0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004af2:	4bd0      	ldr	r3, [pc, #832]	; (8004e34 <HAL_RCC_OscConfig+0x650>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004afe:	4bcd      	ldr	r3, [pc, #820]	; (8004e34 <HAL_RCC_OscConfig+0x650>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d16c      	bne.n	8004be4 <HAL_RCC_OscConfig+0x400>
 8004b0a:	4bca      	ldr	r3, [pc, #808]	; (8004e34 <HAL_RCC_OscConfig+0x650>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d166      	bne.n	8004be4 <HAL_RCC_OscConfig+0x400>
 8004b16:	2302      	movs	r3, #2
 8004b18:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004b20:	fa93 f3a3 	rbit	r3, r3
 8004b24:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004b28:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2c:	fab3 f383 	clz	r3, r3
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d102      	bne.n	8004b46 <HAL_RCC_OscConfig+0x362>
 8004b40:	4bbc      	ldr	r3, [pc, #752]	; (8004e34 <HAL_RCC_OscConfig+0x650>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	e013      	b.n	8004b6e <HAL_RCC_OscConfig+0x38a>
 8004b46:	2302      	movs	r3, #2
 8004b48:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004b50:	fa93 f3a3 	rbit	r3, r3
 8004b54:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004b58:	2302      	movs	r3, #2
 8004b5a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004b5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004b62:	fa93 f3a3 	rbit	r3, r3
 8004b66:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004b6a:	4bb2      	ldr	r3, [pc, #712]	; (8004e34 <HAL_RCC_OscConfig+0x650>)
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004b74:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004b78:	fa92 f2a2 	rbit	r2, r2
 8004b7c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004b80:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004b84:	fab2 f282 	clz	r2, r2
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	f042 0220 	orr.w	r2, r2, #32
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	f002 021f 	and.w	r2, r2, #31
 8004b94:	2101      	movs	r1, #1
 8004b96:	fa01 f202 	lsl.w	r2, r1, r2
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x3cc>
 8004ba0:	1d3b      	adds	r3, r7, #4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d002      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	f000 bd1b 	b.w	80055e6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	4ba0      	ldr	r3, [pc, #640]	; (8004e34 <HAL_RCC_OscConfig+0x650>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bb8:	1d3b      	adds	r3, r7, #4
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	21f8      	movs	r1, #248	; 0xf8
 8004bc0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004bc8:	fa91 f1a1 	rbit	r1, r1
 8004bcc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004bd0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004bd4:	fab1 f181 	clz	r1, r1
 8004bd8:	b2c9      	uxtb	r1, r1
 8004bda:	408b      	lsls	r3, r1
 8004bdc:	4995      	ldr	r1, [pc, #596]	; (8004e34 <HAL_RCC_OscConfig+0x650>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004be2:	e0f5      	b.n	8004dd0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004be4:	1d3b      	adds	r3, r7, #4
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 8085 	beq.w	8004cfa <HAL_RCC_OscConfig+0x516>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004bfa:	fa93 f3a3 	rbit	r3, r3
 8004bfe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004c02:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c06:	fab3 f383 	clz	r3, r3
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	461a      	mov	r2, r3
 8004c18:	2301      	movs	r3, #1
 8004c1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1c:	f7fd ffb6 	bl	8002b8c <HAL_GetTick>
 8004c20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c24:	e00a      	b.n	8004c3c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c26:	f7fd ffb1 	bl	8002b8c <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d902      	bls.n	8004c3c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	f000 bcd5 	b.w	80055e6 <HAL_RCC_OscConfig+0xe02>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c42:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004c46:	fa93 f3a3 	rbit	r3, r3
 8004c4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004c4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c52:	fab3 f383 	clz	r3, r3
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f043 0301 	orr.w	r3, r3, #1
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d102      	bne.n	8004c6c <HAL_RCC_OscConfig+0x488>
 8004c66:	4b73      	ldr	r3, [pc, #460]	; (8004e34 <HAL_RCC_OscConfig+0x650>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	e013      	b.n	8004c94 <HAL_RCC_OscConfig+0x4b0>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c72:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004c76:	fa93 f3a3 	rbit	r3, r3
 8004c7a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c7e:	2302      	movs	r3, #2
 8004c80:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c84:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c88:	fa93 f3a3 	rbit	r3, r3
 8004c8c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004c90:	4b68      	ldr	r3, [pc, #416]	; (8004e34 <HAL_RCC_OscConfig+0x650>)
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	2202      	movs	r2, #2
 8004c96:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004c9a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c9e:	fa92 f2a2 	rbit	r2, r2
 8004ca2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004ca6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004caa:	fab2 f282 	clz	r2, r2
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	f042 0220 	orr.w	r2, r2, #32
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	f002 021f 	and.w	r2, r2, #31
 8004cba:	2101      	movs	r1, #1
 8004cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0af      	beq.n	8004c26 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc6:	4b5b      	ldr	r3, [pc, #364]	; (8004e34 <HAL_RCC_OscConfig+0x650>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cce:	1d3b      	adds	r3, r7, #4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	21f8      	movs	r1, #248	; 0xf8
 8004cd6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cda:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004cde:	fa91 f1a1 	rbit	r1, r1
 8004ce2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004ce6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004cea:	fab1 f181 	clz	r1, r1
 8004cee:	b2c9      	uxtb	r1, r1
 8004cf0:	408b      	lsls	r3, r1
 8004cf2:	4950      	ldr	r1, [pc, #320]	; (8004e34 <HAL_RCC_OscConfig+0x650>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	600b      	str	r3, [r1, #0]
 8004cf8:	e06a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x5ec>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004d04:	fa93 f3a3 	rbit	r3, r3
 8004d08:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004d0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d10:	fab3 f383 	clz	r3, r3
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	461a      	mov	r2, r3
 8004d22:	2300      	movs	r3, #0
 8004d24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d26:	f7fd ff31 	bl	8002b8c <HAL_GetTick>
 8004d2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2e:	e00a      	b.n	8004d46 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d30:	f7fd ff2c 	bl	8002b8c <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d902      	bls.n	8004d46 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	f000 bc50 	b.w	80055e6 <HAL_RCC_OscConfig+0xe02>
 8004d46:	2302      	movs	r3, #2
 8004d48:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d50:	fa93 f3a3 	rbit	r3, r3
 8004d54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5c:	fab3 f383 	clz	r3, r3
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d102      	bne.n	8004d76 <HAL_RCC_OscConfig+0x592>
 8004d70:	4b30      	ldr	r3, [pc, #192]	; (8004e34 <HAL_RCC_OscConfig+0x650>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	e013      	b.n	8004d9e <HAL_RCC_OscConfig+0x5ba>
 8004d76:	2302      	movs	r3, #2
 8004d78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d80:	fa93 f3a3 	rbit	r3, r3
 8004d84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d88:	2302      	movs	r3, #2
 8004d8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d92:	fa93 f3a3 	rbit	r3, r3
 8004d96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d9a:	4b26      	ldr	r3, [pc, #152]	; (8004e34 <HAL_RCC_OscConfig+0x650>)
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004da4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004da8:	fa92 f2a2 	rbit	r2, r2
 8004dac:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004db0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004db4:	fab2 f282 	clz	r2, r2
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	f042 0220 	orr.w	r2, r2, #32
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	f002 021f 	and.w	r2, r2, #31
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1af      	bne.n	8004d30 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd0:	1d3b      	adds	r3, r7, #4
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 80da 	beq.w	8004f94 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004de0:	1d3b      	adds	r3, r7, #4
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d069      	beq.n	8004ebe <HAL_RCC_OscConfig+0x6da>
 8004dea:	2301      	movs	r3, #1
 8004dec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004df4:	fa93 f3a3 	rbit	r3, r3
 8004df8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e00:	fab3 f383 	clz	r3, r3
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <HAL_RCC_OscConfig+0x654>)
 8004e0a:	4413      	add	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	461a      	mov	r2, r3
 8004e10:	2301      	movs	r3, #1
 8004e12:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e14:	f7fd feba 	bl	8002b8c <HAL_GetTick>
 8004e18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1c:	e00e      	b.n	8004e3c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e1e:	f7fd feb5 	bl	8002b8c <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d906      	bls.n	8004e3c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e3d9      	b.n	80055e6 <HAL_RCC_OscConfig+0xe02>
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000
 8004e38:	10908120 	.word	0x10908120
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e46:	fa93 f3a3 	rbit	r3, r3
 8004e4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e4e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004e52:	2202      	movs	r2, #2
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	fa93 f2a3 	rbit	r2, r3
 8004e60:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	fa93 f2a3 	rbit	r2, r3
 8004e78:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004e7c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7e:	4ba5      	ldr	r3, [pc, #660]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8004e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e82:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004e86:	2102      	movs	r1, #2
 8004e88:	6019      	str	r1, [r3, #0]
 8004e8a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	fa93 f1a3 	rbit	r1, r3
 8004e94:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e98:	6019      	str	r1, [r3, #0]
  return result;
 8004e9a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	fab3 f383 	clz	r3, r3
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0b0      	beq.n	8004e1e <HAL_RCC_OscConfig+0x63a>
 8004ebc:	e06a      	b.n	8004f94 <HAL_RCC_OscConfig+0x7b0>
 8004ebe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	fa93 f2a3 	rbit	r2, r3
 8004ed0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004ed4:	601a      	str	r2, [r3, #0]
  return result;
 8004ed6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004eda:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004edc:	fab3 f383 	clz	r3, r3
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4b8c      	ldr	r3, [pc, #560]	; (8005118 <HAL_RCC_OscConfig+0x934>)
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	461a      	mov	r2, r3
 8004eec:	2300      	movs	r3, #0
 8004eee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef0:	f7fd fe4c 	bl	8002b8c <HAL_GetTick>
 8004ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef8:	e009      	b.n	8004f0e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004efa:	f7fd fe47 	bl	8002b8c <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e36b      	b.n	80055e6 <HAL_RCC_OscConfig+0xe02>
 8004f0e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004f12:	2202      	movs	r2, #2
 8004f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f16:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	fa93 f2a3 	rbit	r2, r3
 8004f20:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	fa93 f2a3 	rbit	r2, r3
 8004f38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004f42:	2202      	movs	r2, #2
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	fa93 f2a3 	rbit	r2, r3
 8004f50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004f54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f56:	4b6f      	ldr	r3, [pc, #444]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8004f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f5a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f5e:	2102      	movs	r1, #2
 8004f60:	6019      	str	r1, [r3, #0]
 8004f62:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	fa93 f1a3 	rbit	r1, r3
 8004f6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004f70:	6019      	str	r1, [r3, #0]
  return result;
 8004f72:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	fab3 f383 	clz	r3, r3
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 031f 	and.w	r3, r3, #31
 8004f88:	2101      	movs	r1, #1
 8004f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8e:	4013      	ands	r3, r2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1b2      	bne.n	8004efa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f94:	1d3b      	adds	r3, r7, #4
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 8158 	beq.w	8005254 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004faa:	4b5a      	ldr	r3, [pc, #360]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d112      	bne.n	8004fdc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb6:	4b57      	ldr	r3, [pc, #348]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	4a56      	ldr	r2, [pc, #344]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8004fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	61d3      	str	r3, [r2, #28]
 8004fc2:	4b54      	ldr	r3, [pc, #336]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004fca:	f107 0308 	add.w	r3, r7, #8
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	f107 0308 	add.w	r3, r7, #8
 8004fd4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fdc:	4b4f      	ldr	r3, [pc, #316]	; (800511c <HAL_RCC_OscConfig+0x938>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d11a      	bne.n	800501e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fe8:	4b4c      	ldr	r3, [pc, #304]	; (800511c <HAL_RCC_OscConfig+0x938>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a4b      	ldr	r2, [pc, #300]	; (800511c <HAL_RCC_OscConfig+0x938>)
 8004fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ff4:	f7fd fdca 	bl	8002b8c <HAL_GetTick>
 8004ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ffc:	e009      	b.n	8005012 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffe:	f7fd fdc5 	bl	8002b8c <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b64      	cmp	r3, #100	; 0x64
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e2e9      	b.n	80055e6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005012:	4b42      	ldr	r3, [pc, #264]	; (800511c <HAL_RCC_OscConfig+0x938>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0ef      	beq.n	8004ffe <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800501e:	1d3b      	adds	r3, r7, #4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d106      	bne.n	8005036 <HAL_RCC_OscConfig+0x852>
 8005028:	4b3a      	ldr	r3, [pc, #232]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	4a39      	ldr	r2, [pc, #228]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 800502e:	f043 0301 	orr.w	r3, r3, #1
 8005032:	6213      	str	r3, [r2, #32]
 8005034:	e02f      	b.n	8005096 <HAL_RCC_OscConfig+0x8b2>
 8005036:	1d3b      	adds	r3, r7, #4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10c      	bne.n	800505a <HAL_RCC_OscConfig+0x876>
 8005040:	4b34      	ldr	r3, [pc, #208]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	4a33      	ldr	r2, [pc, #204]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8005046:	f023 0301 	bic.w	r3, r3, #1
 800504a:	6213      	str	r3, [r2, #32]
 800504c:	4b31      	ldr	r3, [pc, #196]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	4a30      	ldr	r2, [pc, #192]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8005052:	f023 0304 	bic.w	r3, r3, #4
 8005056:	6213      	str	r3, [r2, #32]
 8005058:	e01d      	b.n	8005096 <HAL_RCC_OscConfig+0x8b2>
 800505a:	1d3b      	adds	r3, r7, #4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	2b05      	cmp	r3, #5
 8005062:	d10c      	bne.n	800507e <HAL_RCC_OscConfig+0x89a>
 8005064:	4b2b      	ldr	r3, [pc, #172]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 800506a:	f043 0304 	orr.w	r3, r3, #4
 800506e:	6213      	str	r3, [r2, #32]
 8005070:	4b28      	ldr	r3, [pc, #160]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	4a27      	ldr	r2, [pc, #156]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	6213      	str	r3, [r2, #32]
 800507c:	e00b      	b.n	8005096 <HAL_RCC_OscConfig+0x8b2>
 800507e:	4b25      	ldr	r3, [pc, #148]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	4a24      	ldr	r2, [pc, #144]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8005084:	f023 0301 	bic.w	r3, r3, #1
 8005088:	6213      	str	r3, [r2, #32]
 800508a:	4b22      	ldr	r3, [pc, #136]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	4a21      	ldr	r2, [pc, #132]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 8005090:	f023 0304 	bic.w	r3, r3, #4
 8005094:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005096:	1d3b      	adds	r3, r7, #4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d06b      	beq.n	8005178 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a0:	f7fd fd74 	bl	8002b8c <HAL_GetTick>
 80050a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a8:	e00b      	b.n	80050c2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050aa:	f7fd fd6f 	bl	8002b8c <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e291      	b.n	80055e6 <HAL_RCC_OscConfig+0xe02>
 80050c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80050c6:	2202      	movs	r2, #2
 80050c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	fa93 f2a3 	rbit	r2, r3
 80050d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80050de:	2202      	movs	r2, #2
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	fa93 f2a3 	rbit	r2, r3
 80050ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80050f0:	601a      	str	r2, [r3, #0]
  return result;
 80050f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80050f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f8:	fab3 f383 	clz	r3, r3
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f043 0302 	orr.w	r3, r3, #2
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d109      	bne.n	8005120 <HAL_RCC_OscConfig+0x93c>
 800510c:	4b01      	ldr	r3, [pc, #4]	; (8005114 <HAL_RCC_OscConfig+0x930>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	e014      	b.n	800513c <HAL_RCC_OscConfig+0x958>
 8005112:	bf00      	nop
 8005114:	40021000 	.word	0x40021000
 8005118:	10908120 	.word	0x10908120
 800511c:	40007000 	.word	0x40007000
 8005120:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005124:	2202      	movs	r2, #2
 8005126:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005128:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	fa93 f2a3 	rbit	r2, r3
 8005132:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	4bbb      	ldr	r3, [pc, #748]	; (8005428 <HAL_RCC_OscConfig+0xc44>)
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005140:	2102      	movs	r1, #2
 8005142:	6011      	str	r1, [r2, #0]
 8005144:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	fa92 f1a2 	rbit	r1, r2
 800514e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005152:	6011      	str	r1, [r2, #0]
  return result;
 8005154:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	fab2 f282 	clz	r2, r2
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	f002 021f 	and.w	r2, r2, #31
 800516a:	2101      	movs	r1, #1
 800516c:	fa01 f202 	lsl.w	r2, r1, r2
 8005170:	4013      	ands	r3, r2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d099      	beq.n	80050aa <HAL_RCC_OscConfig+0x8c6>
 8005176:	e063      	b.n	8005240 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005178:	f7fd fd08 	bl	8002b8c <HAL_GetTick>
 800517c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005180:	e00b      	b.n	800519a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005182:	f7fd fd03 	bl	8002b8c <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e225      	b.n	80055e6 <HAL_RCC_OscConfig+0xe02>
 800519a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800519e:	2202      	movs	r2, #2
 80051a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	fa93 f2a3 	rbit	r2, r3
 80051ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80051b6:	2202      	movs	r2, #2
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	fa93 f2a3 	rbit	r2, r3
 80051c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80051c8:	601a      	str	r2, [r3, #0]
  return result;
 80051ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80051ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d0:	fab3 f383 	clz	r3, r3
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	f043 0302 	orr.w	r3, r3, #2
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d102      	bne.n	80051ea <HAL_RCC_OscConfig+0xa06>
 80051e4:	4b90      	ldr	r3, [pc, #576]	; (8005428 <HAL_RCC_OscConfig+0xc44>)
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	e00d      	b.n	8005206 <HAL_RCC_OscConfig+0xa22>
 80051ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80051ee:	2202      	movs	r2, #2
 80051f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	fa93 f2a3 	rbit	r2, r3
 80051fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	4b89      	ldr	r3, [pc, #548]	; (8005428 <HAL_RCC_OscConfig+0xc44>)
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800520a:	2102      	movs	r1, #2
 800520c:	6011      	str	r1, [r2, #0]
 800520e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	fa92 f1a2 	rbit	r1, r2
 8005218:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800521c:	6011      	str	r1, [r2, #0]
  return result;
 800521e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	fab2 f282 	clz	r2, r2
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	f002 021f 	and.w	r2, r2, #31
 8005234:	2101      	movs	r1, #1
 8005236:	fa01 f202 	lsl.w	r2, r1, r2
 800523a:	4013      	ands	r3, r2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1a0      	bne.n	8005182 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005240:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005244:	2b01      	cmp	r3, #1
 8005246:	d105      	bne.n	8005254 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005248:	4b77      	ldr	r3, [pc, #476]	; (8005428 <HAL_RCC_OscConfig+0xc44>)
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	4a76      	ldr	r2, [pc, #472]	; (8005428 <HAL_RCC_OscConfig+0xc44>)
 800524e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005252:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005254:	1d3b      	adds	r3, r7, #4
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 81c2 	beq.w	80055e4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005260:	4b71      	ldr	r3, [pc, #452]	; (8005428 <HAL_RCC_OscConfig+0xc44>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 030c 	and.w	r3, r3, #12
 8005268:	2b08      	cmp	r3, #8
 800526a:	f000 819c 	beq.w	80055a6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800526e:	1d3b      	adds	r3, r7, #4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	2b02      	cmp	r3, #2
 8005276:	f040 8114 	bne.w	80054a2 <HAL_RCC_OscConfig+0xcbe>
 800527a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800527e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005284:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	fa93 f2a3 	rbit	r2, r3
 800528e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005292:	601a      	str	r2, [r3, #0]
  return result;
 8005294:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005298:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529a:	fab3 f383 	clz	r3, r3
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	461a      	mov	r2, r3
 80052ac:	2300      	movs	r3, #0
 80052ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b0:	f7fd fc6c 	bl	8002b8c <HAL_GetTick>
 80052b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052b8:	e009      	b.n	80052ce <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ba:	f7fd fc67 	bl	8002b8c <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e18b      	b.n	80055e6 <HAL_RCC_OscConfig+0xe02>
 80052ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80052d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	fa93 f2a3 	rbit	r2, r3
 80052e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80052e6:	601a      	str	r2, [r3, #0]
  return result;
 80052e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80052ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ee:	fab3 f383 	clz	r3, r3
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d102      	bne.n	8005308 <HAL_RCC_OscConfig+0xb24>
 8005302:	4b49      	ldr	r3, [pc, #292]	; (8005428 <HAL_RCC_OscConfig+0xc44>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	e01b      	b.n	8005340 <HAL_RCC_OscConfig+0xb5c>
 8005308:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800530c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005312:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	fa93 f2a3 	rbit	r2, r3
 800531c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005326:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	fa93 f2a3 	rbit	r2, r3
 8005336:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	4b3a      	ldr	r3, [pc, #232]	; (8005428 <HAL_RCC_OscConfig+0xc44>)
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005344:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005348:	6011      	str	r1, [r2, #0]
 800534a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	fa92 f1a2 	rbit	r1, r2
 8005354:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005358:	6011      	str	r1, [r2, #0]
  return result;
 800535a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800535e:	6812      	ldr	r2, [r2, #0]
 8005360:	fab2 f282 	clz	r2, r2
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	f042 0220 	orr.w	r2, r2, #32
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	f002 021f 	and.w	r2, r2, #31
 8005370:	2101      	movs	r1, #1
 8005372:	fa01 f202 	lsl.w	r2, r1, r2
 8005376:	4013      	ands	r3, r2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d19e      	bne.n	80052ba <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800537c:	4b2a      	ldr	r3, [pc, #168]	; (8005428 <HAL_RCC_OscConfig+0xc44>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005384:	1d3b      	adds	r3, r7, #4
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800538a:	1d3b      	adds	r3, r7, #4
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	430b      	orrs	r3, r1
 8005392:	4925      	ldr	r1, [pc, #148]	; (8005428 <HAL_RCC_OscConfig+0xc44>)
 8005394:	4313      	orrs	r3, r2
 8005396:	604b      	str	r3, [r1, #4]
 8005398:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800539c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	fa93 f2a3 	rbit	r2, r3
 80053ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80053b0:	601a      	str	r2, [r3, #0]
  return result;
 80053b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80053b6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053b8:	fab3 f383 	clz	r3, r3
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	461a      	mov	r2, r3
 80053ca:	2301      	movs	r3, #1
 80053cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ce:	f7fd fbdd 	bl	8002b8c <HAL_GetTick>
 80053d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053d6:	e009      	b.n	80053ec <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fd fbd8 	bl	8002b8c <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e0fc      	b.n	80055e6 <HAL_RCC_OscConfig+0xe02>
 80053ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80053f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	fa93 f2a3 	rbit	r2, r3
 8005400:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005404:	601a      	str	r2, [r3, #0]
  return result;
 8005406:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800540a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800540c:	fab3 f383 	clz	r3, r3
 8005410:	b2db      	uxtb	r3, r3
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	b2db      	uxtb	r3, r3
 8005416:	f043 0301 	orr.w	r3, r3, #1
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b01      	cmp	r3, #1
 800541e:	d105      	bne.n	800542c <HAL_RCC_OscConfig+0xc48>
 8005420:	4b01      	ldr	r3, [pc, #4]	; (8005428 <HAL_RCC_OscConfig+0xc44>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	e01e      	b.n	8005464 <HAL_RCC_OscConfig+0xc80>
 8005426:	bf00      	nop
 8005428:	40021000 	.word	0x40021000
 800542c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005436:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	fa93 f2a3 	rbit	r2, r3
 8005440:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800544a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	fa93 f2a3 	rbit	r2, r3
 800545a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	4b63      	ldr	r3, [pc, #396]	; (80055f0 <HAL_RCC_OscConfig+0xe0c>)
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005468:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800546c:	6011      	str	r1, [r2, #0]
 800546e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	fa92 f1a2 	rbit	r1, r2
 8005478:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800547c:	6011      	str	r1, [r2, #0]
  return result;
 800547e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	fab2 f282 	clz	r2, r2
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	f042 0220 	orr.w	r2, r2, #32
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	f002 021f 	and.w	r2, r2, #31
 8005494:	2101      	movs	r1, #1
 8005496:	fa01 f202 	lsl.w	r2, r1, r2
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d09b      	beq.n	80053d8 <HAL_RCC_OscConfig+0xbf4>
 80054a0:	e0a0      	b.n	80055e4 <HAL_RCC_OscConfig+0xe00>
 80054a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	fa93 f2a3 	rbit	r2, r3
 80054b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054ba:	601a      	str	r2, [r3, #0]
  return result;
 80054bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054c0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	fab3 f383 	clz	r3, r3
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	461a      	mov	r2, r3
 80054d4:	2300      	movs	r3, #0
 80054d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d8:	f7fd fb58 	bl	8002b8c <HAL_GetTick>
 80054dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e0:	e009      	b.n	80054f6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e2:	f7fd fb53 	bl	8002b8c <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e077      	b.n	80055e6 <HAL_RCC_OscConfig+0xe02>
 80054f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005500:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	fa93 f2a3 	rbit	r2, r3
 800550a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800550e:	601a      	str	r2, [r3, #0]
  return result;
 8005510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005514:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b01      	cmp	r3, #1
 8005528:	d102      	bne.n	8005530 <HAL_RCC_OscConfig+0xd4c>
 800552a:	4b31      	ldr	r3, [pc, #196]	; (80055f0 <HAL_RCC_OscConfig+0xe0c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	e01b      	b.n	8005568 <HAL_RCC_OscConfig+0xd84>
 8005530:	f107 0320 	add.w	r3, r7, #32
 8005534:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553a:	f107 0320 	add.w	r3, r7, #32
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	fa93 f2a3 	rbit	r2, r3
 8005544:	f107 031c 	add.w	r3, r7, #28
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	f107 0318 	add.w	r3, r7, #24
 800554e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	f107 0318 	add.w	r3, r7, #24
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	fa93 f2a3 	rbit	r2, r3
 800555e:	f107 0314 	add.w	r3, r7, #20
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	4b22      	ldr	r3, [pc, #136]	; (80055f0 <HAL_RCC_OscConfig+0xe0c>)
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	f107 0210 	add.w	r2, r7, #16
 800556c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005570:	6011      	str	r1, [r2, #0]
 8005572:	f107 0210 	add.w	r2, r7, #16
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	fa92 f1a2 	rbit	r1, r2
 800557c:	f107 020c 	add.w	r2, r7, #12
 8005580:	6011      	str	r1, [r2, #0]
  return result;
 8005582:	f107 020c 	add.w	r2, r7, #12
 8005586:	6812      	ldr	r2, [r2, #0]
 8005588:	fab2 f282 	clz	r2, r2
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	f042 0220 	orr.w	r2, r2, #32
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	f002 021f 	and.w	r2, r2, #31
 8005598:	2101      	movs	r1, #1
 800559a:	fa01 f202 	lsl.w	r2, r1, r2
 800559e:	4013      	ands	r3, r2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d19e      	bne.n	80054e2 <HAL_RCC_OscConfig+0xcfe>
 80055a4:	e01e      	b.n	80055e4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055a6:	1d3b      	adds	r3, r7, #4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e018      	b.n	80055e6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055b4:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <HAL_RCC_OscConfig+0xe0c>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055bc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80055c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055c4:	1d3b      	adds	r3, r7, #4
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d108      	bne.n	80055e0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80055ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80055d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055d6:	1d3b      	adds	r3, r7, #4
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40021000 	.word	0x40021000

080055f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b09e      	sub	sp, #120	; 0x78
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e162      	b.n	80058d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800560c:	4b90      	ldr	r3, [pc, #576]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d910      	bls.n	800563c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561a:	4b8d      	ldr	r3, [pc, #564]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 0207 	bic.w	r2, r3, #7
 8005622:	498b      	ldr	r1, [pc, #556]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	4313      	orrs	r3, r2
 8005628:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	4b89      	ldr	r3, [pc, #548]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e14a      	b.n	80058d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005648:	4b82      	ldr	r3, [pc, #520]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	497f      	ldr	r1, [pc, #508]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 8005656:	4313      	orrs	r3, r2
 8005658:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80dc 	beq.w	8005820 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d13c      	bne.n	80056ea <HAL_RCC_ClockConfig+0xf6>
 8005670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005674:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005678:	fa93 f3a3 	rbit	r3, r3
 800567c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800567e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005680:	fab3 f383 	clz	r3, r3
 8005684:	b2db      	uxtb	r3, r3
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d102      	bne.n	800569a <HAL_RCC_ClockConfig+0xa6>
 8005694:	4b6f      	ldr	r3, [pc, #444]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	e00f      	b.n	80056ba <HAL_RCC_ClockConfig+0xc6>
 800569a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800569e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056a2:	fa93 f3a3 	rbit	r3, r3
 80056a6:	667b      	str	r3, [r7, #100]	; 0x64
 80056a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056ac:	663b      	str	r3, [r7, #96]	; 0x60
 80056ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056b0:	fa93 f3a3 	rbit	r3, r3
 80056b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056b6:	4b67      	ldr	r3, [pc, #412]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056be:	65ba      	str	r2, [r7, #88]	; 0x58
 80056c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056c2:	fa92 f2a2 	rbit	r2, r2
 80056c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80056c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056ca:	fab2 f282 	clz	r2, r2
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	f042 0220 	orr.w	r2, r2, #32
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	f002 021f 	and.w	r2, r2, #31
 80056da:	2101      	movs	r1, #1
 80056dc:	fa01 f202 	lsl.w	r2, r1, r2
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d17b      	bne.n	80057de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e0f3      	b.n	80058d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d13c      	bne.n	800576c <HAL_RCC_ClockConfig+0x178>
 80056f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056fa:	fa93 f3a3 	rbit	r3, r3
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005702:	fab3 f383 	clz	r3, r3
 8005706:	b2db      	uxtb	r3, r3
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f043 0301 	orr.w	r3, r3, #1
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b01      	cmp	r3, #1
 8005714:	d102      	bne.n	800571c <HAL_RCC_ClockConfig+0x128>
 8005716:	4b4f      	ldr	r3, [pc, #316]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	e00f      	b.n	800573c <HAL_RCC_ClockConfig+0x148>
 800571c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005720:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005724:	fa93 f3a3 	rbit	r3, r3
 8005728:	647b      	str	r3, [r7, #68]	; 0x44
 800572a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800572e:	643b      	str	r3, [r7, #64]	; 0x40
 8005730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005732:	fa93 f3a3 	rbit	r3, r3
 8005736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005738:	4b46      	ldr	r3, [pc, #280]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005740:	63ba      	str	r2, [r7, #56]	; 0x38
 8005742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005744:	fa92 f2a2 	rbit	r2, r2
 8005748:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800574a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800574c:	fab2 f282 	clz	r2, r2
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	f042 0220 	orr.w	r2, r2, #32
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	f002 021f 	and.w	r2, r2, #31
 800575c:	2101      	movs	r1, #1
 800575e:	fa01 f202 	lsl.w	r2, r1, r2
 8005762:	4013      	ands	r3, r2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d13a      	bne.n	80057de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0b2      	b.n	80058d2 <HAL_RCC_ClockConfig+0x2de>
 800576c:	2302      	movs	r3, #2
 800576e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	fa93 f3a3 	rbit	r3, r3
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577a:	fab3 f383 	clz	r3, r3
 800577e:	b2db      	uxtb	r3, r3
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f043 0301 	orr.w	r3, r3, #1
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b01      	cmp	r3, #1
 800578c:	d102      	bne.n	8005794 <HAL_RCC_ClockConfig+0x1a0>
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	e00d      	b.n	80057b0 <HAL_RCC_ClockConfig+0x1bc>
 8005794:	2302      	movs	r3, #2
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	fa93 f3a3 	rbit	r3, r3
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
 80057a0:	2302      	movs	r3, #2
 80057a2:	623b      	str	r3, [r7, #32]
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	fa93 f3a3 	rbit	r3, r3
 80057aa:	61fb      	str	r3, [r7, #28]
 80057ac:	4b29      	ldr	r3, [pc, #164]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	2202      	movs	r2, #2
 80057b2:	61ba      	str	r2, [r7, #24]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	fa92 f2a2 	rbit	r2, r2
 80057ba:	617a      	str	r2, [r7, #20]
  return result;
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	fab2 f282 	clz	r2, r2
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	f042 0220 	orr.w	r2, r2, #32
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	f002 021f 	and.w	r2, r2, #31
 80057ce:	2101      	movs	r1, #1
 80057d0:	fa01 f202 	lsl.w	r2, r1, r2
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e079      	b.n	80058d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057de:	4b1d      	ldr	r3, [pc, #116]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f023 0203 	bic.w	r2, r3, #3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	491a      	ldr	r1, [pc, #104]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f0:	f7fd f9cc 	bl	8002b8c <HAL_GetTick>
 80057f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f6:	e00a      	b.n	800580e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f8:	f7fd f9c8 	bl	8002b8c <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	f241 3288 	movw	r2, #5000	; 0x1388
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e061      	b.n	80058d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580e:	4b11      	ldr	r3, [pc, #68]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f003 020c 	and.w	r2, r3, #12
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	429a      	cmp	r2, r3
 800581e:	d1eb      	bne.n	80057f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d214      	bcs.n	8005858 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b08      	ldr	r3, [pc, #32]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 0207 	bic.w	r2, r3, #7
 8005836:	4906      	ldr	r1, [pc, #24]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	4313      	orrs	r3, r2
 800583c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b04      	ldr	r3, [pc, #16]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d005      	beq.n	8005858 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e040      	b.n	80058d2 <HAL_RCC_ClockConfig+0x2de>
 8005850:	40022000 	.word	0x40022000
 8005854:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005864:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <HAL_RCC_ClockConfig+0x2e8>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	491a      	ldr	r1, [pc, #104]	; (80058dc <HAL_RCC_ClockConfig+0x2e8>)
 8005872:	4313      	orrs	r3, r2
 8005874:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005882:	4b16      	ldr	r3, [pc, #88]	; (80058dc <HAL_RCC_ClockConfig+0x2e8>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	4912      	ldr	r1, [pc, #72]	; (80058dc <HAL_RCC_ClockConfig+0x2e8>)
 8005892:	4313      	orrs	r3, r2
 8005894:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005896:	f000 f829 	bl	80058ec <HAL_RCC_GetSysClockFreq>
 800589a:	4601      	mov	r1, r0
 800589c:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <HAL_RCC_ClockConfig+0x2e8>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058a4:	22f0      	movs	r2, #240	; 0xf0
 80058a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	fa92 f2a2 	rbit	r2, r2
 80058ae:	60fa      	str	r2, [r7, #12]
  return result;
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	fab2 f282 	clz	r2, r2
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	40d3      	lsrs	r3, r2
 80058ba:	4a09      	ldr	r2, [pc, #36]	; (80058e0 <HAL_RCC_ClockConfig+0x2ec>)
 80058bc:	5cd3      	ldrb	r3, [r2, r3]
 80058be:	fa21 f303 	lsr.w	r3, r1, r3
 80058c2:	4a08      	ldr	r2, [pc, #32]	; (80058e4 <HAL_RCC_ClockConfig+0x2f0>)
 80058c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80058c6:	4b08      	ldr	r3, [pc, #32]	; (80058e8 <HAL_RCC_ClockConfig+0x2f4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fd f91a 	bl	8002b04 <HAL_InitTick>
  
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3778      	adds	r7, #120	; 0x78
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000
 80058e0:	08007bc4 	.word	0x08007bc4
 80058e4:	20000044 	.word	0x20000044
 80058e8:	20000048 	.word	0x20000048

080058ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b08b      	sub	sp, #44	; 0x2c
 80058f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61fb      	str	r3, [r7, #28]
 80058f6:	2300      	movs	r3, #0
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	2300      	movs	r3, #0
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005906:	4b29      	ldr	r3, [pc, #164]	; (80059ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f003 030c 	and.w	r3, r3, #12
 8005912:	2b04      	cmp	r3, #4
 8005914:	d002      	beq.n	800591c <HAL_RCC_GetSysClockFreq+0x30>
 8005916:	2b08      	cmp	r3, #8
 8005918:	d003      	beq.n	8005922 <HAL_RCC_GetSysClockFreq+0x36>
 800591a:	e03c      	b.n	8005996 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800591c:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800591e:	623b      	str	r3, [r7, #32]
      break;
 8005920:	e03c      	b.n	800599c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005928:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800592c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	fa92 f2a2 	rbit	r2, r2
 8005934:	607a      	str	r2, [r7, #4]
  return result;
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	fab2 f282 	clz	r2, r2
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	40d3      	lsrs	r3, r2
 8005940:	4a1c      	ldr	r2, [pc, #112]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005942:	5cd3      	ldrb	r3, [r2, r3]
 8005944:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005946:	4b19      	ldr	r3, [pc, #100]	; (80059ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	220f      	movs	r2, #15
 8005950:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	fa92 f2a2 	rbit	r2, r2
 8005958:	60fa      	str	r2, [r7, #12]
  return result;
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	fab2 f282 	clz	r2, r2
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	40d3      	lsrs	r3, r2
 8005964:	4a14      	ldr	r2, [pc, #80]	; (80059b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005966:	5cd3      	ldrb	r3, [r2, r3]
 8005968:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005974:	4a0e      	ldr	r2, [pc, #56]	; (80059b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	fbb2 f2f3 	udiv	r2, r2, r3
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	fb02 f303 	mul.w	r3, r2, r3
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
 8005984:	e004      	b.n	8005990 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	4a0c      	ldr	r2, [pc, #48]	; (80059bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800598a:	fb02 f303 	mul.w	r3, r2, r3
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	623b      	str	r3, [r7, #32]
      break;
 8005994:	e002      	b.n	800599c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005996:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005998:	623b      	str	r3, [r7, #32]
      break;
 800599a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800599c:	6a3b      	ldr	r3, [r7, #32]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	372c      	adds	r7, #44	; 0x2c
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40021000 	.word	0x40021000
 80059b0:	007a1200 	.word	0x007a1200
 80059b4:	08007bd4 	.word	0x08007bd4
 80059b8:	08007be4 	.word	0x08007be4
 80059bc:	003d0900 	.word	0x003d0900

080059c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b092      	sub	sp, #72	; 0x48
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80059d0:	2300      	movs	r3, #0
 80059d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 80d4 	beq.w	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e4:	4b4e      	ldr	r3, [pc, #312]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10e      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059f0:	4b4b      	ldr	r3, [pc, #300]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	4a4a      	ldr	r2, [pc, #296]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fa:	61d3      	str	r3, [r2, #28]
 80059fc:	4b48      	ldr	r3, [pc, #288]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0e:	4b45      	ldr	r3, [pc, #276]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d118      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a1a:	4b42      	ldr	r3, [pc, #264]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a41      	ldr	r2, [pc, #260]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a26:	f7fd f8b1 	bl	8002b8c <HAL_GetTick>
 8005a2a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2c:	e008      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a2e:	f7fd f8ad 	bl	8002b8c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b64      	cmp	r3, #100	; 0x64
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e169      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a40:	4b38      	ldr	r3, [pc, #224]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a4c:	4b34      	ldr	r3, [pc, #208]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a54:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 8084 	beq.w	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d07c      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a6c:	4b2c      	ldr	r3, [pc, #176]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	fa93 f3a3 	rbit	r3, r3
 8005a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a86:	fab3 f383 	clz	r3, r3
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4b26      	ldr	r3, [pc, #152]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	461a      	mov	r2, r3
 8005a96:	2301      	movs	r3, #1
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	fa93 f3a3 	rbit	r3, r3
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005aaa:	fab3 f383 	clz	r3, r3
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4b1d      	ldr	r3, [pc, #116]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2300      	movs	r3, #0
 8005abc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005abe:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d04b      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ace:	f7fd f85d 	bl	8002b8c <HAL_GetTick>
 8005ad2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad4:	e00a      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad6:	f7fd f859 	bl	8002b8c <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e113      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005aec:	2302      	movs	r3, #2
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	fa93 f3a3 	rbit	r3, r3
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
 8005af8:	2302      	movs	r3, #2
 8005afa:	623b      	str	r3, [r7, #32]
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	fa93 f3a3 	rbit	r3, r3
 8005b02:	61fb      	str	r3, [r7, #28]
  return result;
 8005b04:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b06:	fab3 f383 	clz	r3, r3
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f043 0302 	orr.w	r3, r3, #2
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d108      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005b1a:	4b01      	ldr	r3, [pc, #4]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	e00d      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005b20:	40021000 	.word	0x40021000
 8005b24:	40007000 	.word	0x40007000
 8005b28:	10908100 	.word	0x10908100
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	fa93 f3a3 	rbit	r3, r3
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	4b78      	ldr	r3, [pc, #480]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	613a      	str	r2, [r7, #16]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	fa92 f2a2 	rbit	r2, r2
 8005b46:	60fa      	str	r2, [r7, #12]
  return result;
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	fab2 f282 	clz	r2, r2
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	f002 021f 	and.w	r2, r2, #31
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0b7      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005b66:	4b6d      	ldr	r3, [pc, #436]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	496a      	ldr	r1, [pc, #424]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d105      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b80:	4b66      	ldr	r3, [pc, #408]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	4a65      	ldr	r2, [pc, #404]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b98:	4b60      	ldr	r3, [pc, #384]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	f023 0203 	bic.w	r2, r3, #3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	495d      	ldr	r1, [pc, #372]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d008      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bb6:	4b59      	ldr	r3, [pc, #356]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	4956      	ldr	r1, [pc, #344]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bd4:	4b51      	ldr	r3, [pc, #324]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	494e      	ldr	r1, [pc, #312]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d008      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bf2:	4b4a      	ldr	r3, [pc, #296]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	f023 0210 	bic.w	r2, r3, #16
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	4947      	ldr	r1, [pc, #284]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005c10:	4b42      	ldr	r3, [pc, #264]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1c:	493f      	ldr	r1, [pc, #252]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d008      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c2e:	4b3b      	ldr	r3, [pc, #236]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c32:	f023 0220 	bic.w	r2, r3, #32
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	4938      	ldr	r1, [pc, #224]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c4c:	4b33      	ldr	r3, [pc, #204]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	4930      	ldr	r1, [pc, #192]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0310 	and.w	r3, r3, #16
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d008      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c6a:	4b2c      	ldr	r3, [pc, #176]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	4929      	ldr	r1, [pc, #164]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d008      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c88:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	4921      	ldr	r1, [pc, #132]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d008      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ca6:	4b1d      	ldr	r3, [pc, #116]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	491a      	ldr	r1, [pc, #104]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d008      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005cc4:	4b15      	ldr	r3, [pc, #84]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	4912      	ldr	r1, [pc, #72]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d008      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	490b      	ldr	r1, [pc, #44]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	4903      	ldr	r1, [pc, #12]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3748      	adds	r7, #72	; 0x48
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40021000 	.word	0x40021000

08005d20 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e083      	b.n	8005e3a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	7f5b      	ldrb	r3, [r3, #29]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d105      	bne.n	8005d48 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fc fb26 	bl	8002394 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	22ca      	movs	r2, #202	; 0xca
 8005d54:	625a      	str	r2, [r3, #36]	; 0x24
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2253      	movs	r2, #83	; 0x53
 8005d5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f9fb 	bl	800615a <RTC_EnterInitMode>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d008      	beq.n	8005d7c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	22ff      	movs	r2, #255	; 0xff
 8005d70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2204      	movs	r2, #4
 8005d76:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e05e      	b.n	8005e3a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6812      	ldr	r2, [r2, #0]
 8005d86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d8e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6899      	ldr	r1, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	68d2      	ldr	r2, [r2, #12]
 8005db6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6919      	ldr	r1, [r3, #16]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	041a      	lsls	r2, r3, #16
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dda:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10e      	bne.n	8005e08 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f98d 	bl	800610a <HAL_RTC_WaitForSynchro>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d008      	beq.n	8005e08 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	22ff      	movs	r2, #255	; 0xff
 8005dfc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2204      	movs	r2, #4
 8005e02:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e018      	b.n	8005e3a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e16:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	22ff      	movs	r2, #255	; 0xff
 8005e30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005e38:	2300      	movs	r3, #0
  }
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e42:	b590      	push	{r4, r7, lr}
 8005e44:	b087      	sub	sp, #28
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	7f1b      	ldrb	r3, [r3, #28]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d101      	bne.n	8005e5e <HAL_RTC_SetTime+0x1c>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e0aa      	b.n	8005fb4 <HAL_RTC_SetTime+0x172>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2202      	movs	r2, #2
 8005e68:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d126      	bne.n	8005ebe <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d102      	bne.n	8005e84 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2200      	movs	r2, #0
 8005e82:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 f992 	bl	80061b2 <RTC_ByteToBcd2>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	785b      	ldrb	r3, [r3, #1]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 f98b 	bl	80061b2 <RTC_ByteToBcd2>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ea0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	789b      	ldrb	r3, [r3, #2]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 f983 	bl	80061b2 <RTC_ByteToBcd2>
 8005eac:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005eae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	78db      	ldrb	r3, [r3, #3]
 8005eb6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	e018      	b.n	8005ef0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d102      	bne.n	8005ed2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	785b      	ldrb	r3, [r3, #1]
 8005edc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005ede:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005ee4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	78db      	ldrb	r3, [r3, #3]
 8005eea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	22ca      	movs	r2, #202	; 0xca
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2253      	movs	r2, #83	; 0x53
 8005efe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f92a 	bl	800615a <RTC_EnterInitMode>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00b      	beq.n	8005f24 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	22ff      	movs	r2, #255	; 0xff
 8005f12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2204      	movs	r2, #4
 8005f18:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e047      	b.n	8005fb4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f2e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f32:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6899      	ldr	r1, [r3, #8]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	431a      	orrs	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f6a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d111      	bne.n	8005f9e <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f8c5 	bl	800610a <HAL_RTC_WaitForSynchro>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	22ff      	movs	r2, #255	; 0xff
 8005f8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2204      	movs	r2, #4
 8005f92:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e00a      	b.n	8005fb4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	22ff      	movs	r2, #255	; 0xff
 8005fa4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
  }
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	371c      	adds	r7, #28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd90      	pop	{r4, r7, pc}

08005fbc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fbc:	b590      	push	{r4, r7, lr}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	7f1b      	ldrb	r3, [r3, #28]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_RTC_SetDate+0x1c>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e094      	b.n	8006102 <HAL_RTC_SetDate+0x146>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10e      	bne.n	8006008 <HAL_RTC_SetDate+0x4c>
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	785b      	ldrb	r3, [r3, #1]
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d008      	beq.n	8006008 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	f023 0310 	bic.w	r3, r3, #16
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	330a      	adds	r3, #10
 8006002:	b2da      	uxtb	r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d11c      	bne.n	8006048 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	78db      	ldrb	r3, [r3, #3]
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f8cd 	bl	80061b2 <RTC_ByteToBcd2>
 8006018:	4603      	mov	r3, r0
 800601a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	785b      	ldrb	r3, [r3, #1]
 8006020:	4618      	mov	r0, r3
 8006022:	f000 f8c6 	bl	80061b2 <RTC_ByteToBcd2>
 8006026:	4603      	mov	r3, r0
 8006028:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800602a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	789b      	ldrb	r3, [r3, #2]
 8006030:	4618      	mov	r0, r3
 8006032:	f000 f8be 	bl	80061b2 <RTC_ByteToBcd2>
 8006036:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006038:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]
 8006046:	e00e      	b.n	8006066 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	78db      	ldrb	r3, [r3, #3]
 800604c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006054:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800605a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	22ca      	movs	r2, #202	; 0xca
 800606c:	625a      	str	r2, [r3, #36]	; 0x24
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2253      	movs	r2, #83	; 0x53
 8006074:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f86f 	bl	800615a <RTC_EnterInitMode>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00b      	beq.n	800609a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	22ff      	movs	r2, #255	; 0xff
 8006088:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2204      	movs	r2, #4
 800608e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e033      	b.n	8006102 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060b8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d111      	bne.n	80060ec <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f81e 	bl	800610a <HAL_RTC_WaitForSynchro>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00b      	beq.n	80060ec <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	22ff      	movs	r2, #255	; 0xff
 80060da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2204      	movs	r2, #4
 80060e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e00a      	b.n	8006102 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	22ff      	movs	r2, #255	; 0xff
 80060f2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006100:	2300      	movs	r3, #0
  }
}
 8006102:	4618      	mov	r0, r3
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	bd90      	pop	{r4, r7, pc}

0800610a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006124:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006126:	f7fc fd31 	bl	8002b8c <HAL_GetTick>
 800612a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800612c:	e009      	b.n	8006142 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800612e:	f7fc fd2d 	bl	8002b8c <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800613c:	d901      	bls.n	8006142 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e007      	b.n	8006152 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0ee      	beq.n	800612e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b084      	sub	sp, #16
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d119      	bne.n	80061a8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f04f 32ff 	mov.w	r2, #4294967295
 800617c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800617e:	f7fc fd05 	bl	8002b8c <HAL_GetTick>
 8006182:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006184:	e009      	b.n	800619a <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006186:	f7fc fd01 	bl	8002b8c <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006194:	d901      	bls.n	800619a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e007      	b.n	80061aa <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0ee      	beq.n	8006186 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	4603      	mov	r3, r0
 80061ba:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80061c0:	e005      	b.n	80061ce <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3301      	adds	r3, #1
 80061c6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80061c8:	79fb      	ldrb	r3, [r7, #7]
 80061ca:	3b0a      	subs	r3, #10
 80061cc:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	2b09      	cmp	r3, #9
 80061d2:	d8f6      	bhi.n	80061c2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	79fb      	ldrb	r3, [r7, #7]
 80061de:	4313      	orrs	r3, r2
 80061e0:	b2db      	uxtb	r3, r3
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e049      	b.n	8006294 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	d106      	bne.n	800621a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7fc f8e3 	bl	80023e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2202      	movs	r2, #2
 800621e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	3304      	adds	r3, #4
 800622a:	4619      	mov	r1, r3
 800622c:	4610      	mov	r0, r2
 800622e:	f000 fab9 	bl	80067a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d001      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e04a      	b.n	800634a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0201 	orr.w	r2, r2, #1
 80062ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a21      	ldr	r2, [pc, #132]	; (8006358 <HAL_TIM_Base_Start_IT+0xbc>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d018      	beq.n	8006308 <HAL_TIM_Base_Start_IT+0x6c>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062de:	d013      	beq.n	8006308 <HAL_TIM_Base_Start_IT+0x6c>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1d      	ldr	r2, [pc, #116]	; (800635c <HAL_TIM_Base_Start_IT+0xc0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00e      	beq.n	8006308 <HAL_TIM_Base_Start_IT+0x6c>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1c      	ldr	r2, [pc, #112]	; (8006360 <HAL_TIM_Base_Start_IT+0xc4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d009      	beq.n	8006308 <HAL_TIM_Base_Start_IT+0x6c>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1a      	ldr	r2, [pc, #104]	; (8006364 <HAL_TIM_Base_Start_IT+0xc8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <HAL_TIM_Base_Start_IT+0x6c>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a19      	ldr	r2, [pc, #100]	; (8006368 <HAL_TIM_Base_Start_IT+0xcc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d115      	bne.n	8006334 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	4b17      	ldr	r3, [pc, #92]	; (800636c <HAL_TIM_Base_Start_IT+0xd0>)
 8006310:	4013      	ands	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b06      	cmp	r3, #6
 8006318:	d015      	beq.n	8006346 <HAL_TIM_Base_Start_IT+0xaa>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006320:	d011      	beq.n	8006346 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0201 	orr.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006332:	e008      	b.n	8006346 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	e000      	b.n	8006348 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006346:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40012c00 	.word	0x40012c00
 800635c:	40000400 	.word	0x40000400
 8006360:	40000800 	.word	0x40000800
 8006364:	40013400 	.word	0x40013400
 8006368:	40014000 	.word	0x40014000
 800636c:	00010007 	.word	0x00010007

08006370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b02      	cmp	r3, #2
 8006384:	d122      	bne.n	80063cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b02      	cmp	r3, #2
 8006392:	d11b      	bne.n	80063cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0202 	mvn.w	r2, #2
 800639c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f9d8 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 80063b8:	e005      	b.n	80063c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f9ca 	bl	8006754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f9db 	bl	800677c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d122      	bne.n	8006420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d11b      	bne.n	8006420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0204 	mvn.w	r2, #4
 80063f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2202      	movs	r2, #2
 80063f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f9ae 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 800640c:	e005      	b.n	800641a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f9a0 	bl	8006754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f9b1 	bl	800677c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b08      	cmp	r3, #8
 800642c:	d122      	bne.n	8006474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f003 0308 	and.w	r3, r3, #8
 8006438:	2b08      	cmp	r3, #8
 800643a:	d11b      	bne.n	8006474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f06f 0208 	mvn.w	r2, #8
 8006444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2204      	movs	r2, #4
 800644a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f984 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 8006460:	e005      	b.n	800646e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f976 	bl	8006754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f987 	bl	800677c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0310 	and.w	r3, r3, #16
 800647e:	2b10      	cmp	r3, #16
 8006480:	d122      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b10      	cmp	r3, #16
 800648e:	d11b      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f06f 0210 	mvn.w	r2, #16
 8006498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2208      	movs	r2, #8
 800649e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f95a 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 80064b4:	e005      	b.n	80064c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f94c 	bl	8006754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f95d 	bl	800677c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d10e      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d107      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0201 	mvn.w	r2, #1
 80064ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f926 	bl	8006740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d10e      	bne.n	8006520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650c:	2b80      	cmp	r3, #128	; 0x80
 800650e:	d107      	bne.n	8006520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 faf6 	bl	8006b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800652e:	d10e      	bne.n	800654e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653a:	2b80      	cmp	r3, #128	; 0x80
 800653c:	d107      	bne.n	800654e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fae9 	bl	8006b20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	d10e      	bne.n	800657a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006566:	2b40      	cmp	r3, #64	; 0x40
 8006568:	d107      	bne.n	800657a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f90b 	bl	8006790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b20      	cmp	r3, #32
 8006586:	d10e      	bne.n	80065a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b20      	cmp	r3, #32
 8006594:	d107      	bne.n	80065a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f06f 0220 	mvn.w	r2, #32
 800659e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 faa9 	bl	8006af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065a6:	bf00      	nop
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d101      	bne.n	80065ca <HAL_TIM_ConfigClockSource+0x1c>
 80065c6:	2302      	movs	r3, #2
 80065c8:	e0b6      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x18a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2202      	movs	r2, #2
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065f4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006606:	d03e      	beq.n	8006686 <HAL_TIM_ConfigClockSource+0xd8>
 8006608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800660c:	f200 8087 	bhi.w	800671e <HAL_TIM_ConfigClockSource+0x170>
 8006610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006614:	f000 8086 	beq.w	8006724 <HAL_TIM_ConfigClockSource+0x176>
 8006618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661c:	d87f      	bhi.n	800671e <HAL_TIM_ConfigClockSource+0x170>
 800661e:	2b70      	cmp	r3, #112	; 0x70
 8006620:	d01a      	beq.n	8006658 <HAL_TIM_ConfigClockSource+0xaa>
 8006622:	2b70      	cmp	r3, #112	; 0x70
 8006624:	d87b      	bhi.n	800671e <HAL_TIM_ConfigClockSource+0x170>
 8006626:	2b60      	cmp	r3, #96	; 0x60
 8006628:	d050      	beq.n	80066cc <HAL_TIM_ConfigClockSource+0x11e>
 800662a:	2b60      	cmp	r3, #96	; 0x60
 800662c:	d877      	bhi.n	800671e <HAL_TIM_ConfigClockSource+0x170>
 800662e:	2b50      	cmp	r3, #80	; 0x50
 8006630:	d03c      	beq.n	80066ac <HAL_TIM_ConfigClockSource+0xfe>
 8006632:	2b50      	cmp	r3, #80	; 0x50
 8006634:	d873      	bhi.n	800671e <HAL_TIM_ConfigClockSource+0x170>
 8006636:	2b40      	cmp	r3, #64	; 0x40
 8006638:	d058      	beq.n	80066ec <HAL_TIM_ConfigClockSource+0x13e>
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d86f      	bhi.n	800671e <HAL_TIM_ConfigClockSource+0x170>
 800663e:	2b30      	cmp	r3, #48	; 0x30
 8006640:	d064      	beq.n	800670c <HAL_TIM_ConfigClockSource+0x15e>
 8006642:	2b30      	cmp	r3, #48	; 0x30
 8006644:	d86b      	bhi.n	800671e <HAL_TIM_ConfigClockSource+0x170>
 8006646:	2b20      	cmp	r3, #32
 8006648:	d060      	beq.n	800670c <HAL_TIM_ConfigClockSource+0x15e>
 800664a:	2b20      	cmp	r3, #32
 800664c:	d867      	bhi.n	800671e <HAL_TIM_ConfigClockSource+0x170>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d05c      	beq.n	800670c <HAL_TIM_ConfigClockSource+0x15e>
 8006652:	2b10      	cmp	r3, #16
 8006654:	d05a      	beq.n	800670c <HAL_TIM_ConfigClockSource+0x15e>
 8006656:	e062      	b.n	800671e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	6899      	ldr	r1, [r3, #8]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f000 f9a6 	bl	80069b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800667a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	609a      	str	r2, [r3, #8]
      break;
 8006684:	e04f      	b.n	8006726 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	6899      	ldr	r1, [r3, #8]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f000 f98f 	bl	80069b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066a8:	609a      	str	r2, [r3, #8]
      break;
 80066aa:	e03c      	b.n	8006726 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	6859      	ldr	r1, [r3, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	461a      	mov	r2, r3
 80066ba:	f000 f903 	bl	80068c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2150      	movs	r1, #80	; 0x50
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 f95c 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 80066ca:	e02c      	b.n	8006726 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6818      	ldr	r0, [r3, #0]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	6859      	ldr	r1, [r3, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	461a      	mov	r2, r3
 80066da:	f000 f922 	bl	8006922 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2160      	movs	r1, #96	; 0x60
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 f94c 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 80066ea:	e01c      	b.n	8006726 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	6859      	ldr	r1, [r3, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	461a      	mov	r2, r3
 80066fa:	f000 f8e3 	bl	80068c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2140      	movs	r1, #64	; 0x40
 8006704:	4618      	mov	r0, r3
 8006706:	f000 f93c 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 800670a:	e00c      	b.n	8006726 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4619      	mov	r1, r3
 8006716:	4610      	mov	r0, r2
 8006718:	f000 f933 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 800671c:	e003      	b.n	8006726 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	73fb      	strb	r3, [r7, #15]
      break;
 8006722:	e000      	b.n	8006726 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006724:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a3c      	ldr	r2, [pc, #240]	; (80068a8 <TIM_Base_SetConfig+0x104>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00f      	beq.n	80067dc <TIM_Base_SetConfig+0x38>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c2:	d00b      	beq.n	80067dc <TIM_Base_SetConfig+0x38>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a39      	ldr	r2, [pc, #228]	; (80068ac <TIM_Base_SetConfig+0x108>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d007      	beq.n	80067dc <TIM_Base_SetConfig+0x38>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a38      	ldr	r2, [pc, #224]	; (80068b0 <TIM_Base_SetConfig+0x10c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_Base_SetConfig+0x38>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a37      	ldr	r2, [pc, #220]	; (80068b4 <TIM_Base_SetConfig+0x110>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d108      	bne.n	80067ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a2d      	ldr	r2, [pc, #180]	; (80068a8 <TIM_Base_SetConfig+0x104>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d01b      	beq.n	800682e <TIM_Base_SetConfig+0x8a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fc:	d017      	beq.n	800682e <TIM_Base_SetConfig+0x8a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a2a      	ldr	r2, [pc, #168]	; (80068ac <TIM_Base_SetConfig+0x108>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d013      	beq.n	800682e <TIM_Base_SetConfig+0x8a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a29      	ldr	r2, [pc, #164]	; (80068b0 <TIM_Base_SetConfig+0x10c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00f      	beq.n	800682e <TIM_Base_SetConfig+0x8a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a28      	ldr	r2, [pc, #160]	; (80068b4 <TIM_Base_SetConfig+0x110>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00b      	beq.n	800682e <TIM_Base_SetConfig+0x8a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a27      	ldr	r2, [pc, #156]	; (80068b8 <TIM_Base_SetConfig+0x114>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d007      	beq.n	800682e <TIM_Base_SetConfig+0x8a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a26      	ldr	r2, [pc, #152]	; (80068bc <TIM_Base_SetConfig+0x118>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d003      	beq.n	800682e <TIM_Base_SetConfig+0x8a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a25      	ldr	r2, [pc, #148]	; (80068c0 <TIM_Base_SetConfig+0x11c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d108      	bne.n	8006840 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a10      	ldr	r2, [pc, #64]	; (80068a8 <TIM_Base_SetConfig+0x104>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00f      	beq.n	800688c <TIM_Base_SetConfig+0xe8>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a11      	ldr	r2, [pc, #68]	; (80068b4 <TIM_Base_SetConfig+0x110>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00b      	beq.n	800688c <TIM_Base_SetConfig+0xe8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a10      	ldr	r2, [pc, #64]	; (80068b8 <TIM_Base_SetConfig+0x114>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d007      	beq.n	800688c <TIM_Base_SetConfig+0xe8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a0f      	ldr	r2, [pc, #60]	; (80068bc <TIM_Base_SetConfig+0x118>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d003      	beq.n	800688c <TIM_Base_SetConfig+0xe8>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a0e      	ldr	r2, [pc, #56]	; (80068c0 <TIM_Base_SetConfig+0x11c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d103      	bne.n	8006894 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	615a      	str	r2, [r3, #20]
}
 800689a:	bf00      	nop
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	40012c00 	.word	0x40012c00
 80068ac:	40000400 	.word	0x40000400
 80068b0:	40000800 	.word	0x40000800
 80068b4:	40013400 	.word	0x40013400
 80068b8:	40014000 	.word	0x40014000
 80068bc:	40014400 	.word	0x40014400
 80068c0:	40014800 	.word	0x40014800

080068c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	f023 0201 	bic.w	r2, r3, #1
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f023 030a 	bic.w	r3, r3, #10
 8006900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4313      	orrs	r3, r2
 8006908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	621a      	str	r2, [r3, #32]
}
 8006916:	bf00      	nop
 8006918:	371c      	adds	r7, #28
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006922:	b480      	push	{r7}
 8006924:	b087      	sub	sp, #28
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	f023 0210 	bic.w	r2, r3, #16
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800694c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	031b      	lsls	r3, r3, #12
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	4313      	orrs	r3, r2
 8006956:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800695e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	f043 0307 	orr.w	r3, r3, #7
 80069a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	609a      	str	r2, [r3, #8]
}
 80069ac:	bf00      	nop
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	021a      	lsls	r2, r3, #8
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	431a      	orrs	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4313      	orrs	r3, r2
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	609a      	str	r2, [r3, #8]
}
 80069ec:	bf00      	nop
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e063      	b.n	8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a2b      	ldr	r2, [pc, #172]	; (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a2a      	ldr	r2, [pc, #168]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d108      	bne.n	8006a56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a1b      	ldr	r2, [pc, #108]	; (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d018      	beq.n	8006aac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a82:	d013      	beq.n	8006aac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a18      	ldr	r2, [pc, #96]	; (8006aec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d00e      	beq.n	8006aac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a17      	ldr	r2, [pc, #92]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d009      	beq.n	8006aac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a12      	ldr	r2, [pc, #72]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d004      	beq.n	8006aac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a13      	ldr	r2, [pc, #76]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d10c      	bne.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ab2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	40012c00 	.word	0x40012c00
 8006ae8:	40013400 	.word	0x40013400
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40014000 	.word	0x40014000

08006af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <__errno>:
 8006b34:	4b01      	ldr	r3, [pc, #4]	; (8006b3c <__errno+0x8>)
 8006b36:	6818      	ldr	r0, [r3, #0]
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	20000050 	.word	0x20000050

08006b40 <__libc_init_array>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	4d0d      	ldr	r5, [pc, #52]	; (8006b78 <__libc_init_array+0x38>)
 8006b44:	4c0d      	ldr	r4, [pc, #52]	; (8006b7c <__libc_init_array+0x3c>)
 8006b46:	1b64      	subs	r4, r4, r5
 8006b48:	10a4      	asrs	r4, r4, #2
 8006b4a:	2600      	movs	r6, #0
 8006b4c:	42a6      	cmp	r6, r4
 8006b4e:	d109      	bne.n	8006b64 <__libc_init_array+0x24>
 8006b50:	4d0b      	ldr	r5, [pc, #44]	; (8006b80 <__libc_init_array+0x40>)
 8006b52:	4c0c      	ldr	r4, [pc, #48]	; (8006b84 <__libc_init_array+0x44>)
 8006b54:	f000 ffd6 	bl	8007b04 <_init>
 8006b58:	1b64      	subs	r4, r4, r5
 8006b5a:	10a4      	asrs	r4, r4, #2
 8006b5c:	2600      	movs	r6, #0
 8006b5e:	42a6      	cmp	r6, r4
 8006b60:	d105      	bne.n	8006b6e <__libc_init_array+0x2e>
 8006b62:	bd70      	pop	{r4, r5, r6, pc}
 8006b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b68:	4798      	blx	r3
 8006b6a:	3601      	adds	r6, #1
 8006b6c:	e7ee      	b.n	8006b4c <__libc_init_array+0xc>
 8006b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b72:	4798      	blx	r3
 8006b74:	3601      	adds	r6, #1
 8006b76:	e7f2      	b.n	8006b5e <__libc_init_array+0x1e>
 8006b78:	08007c38 	.word	0x08007c38
 8006b7c:	08007c38 	.word	0x08007c38
 8006b80:	08007c38 	.word	0x08007c38
 8006b84:	08007c3c 	.word	0x08007c3c

08006b88 <memset>:
 8006b88:	4402      	add	r2, r0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d100      	bne.n	8006b92 <memset+0xa>
 8006b90:	4770      	bx	lr
 8006b92:	f803 1b01 	strb.w	r1, [r3], #1
 8006b96:	e7f9      	b.n	8006b8c <memset+0x4>

08006b98 <pow>:
 8006b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b9c:	ec59 8b10 	vmov	r8, r9, d0
 8006ba0:	ec57 6b11 	vmov	r6, r7, d1
 8006ba4:	f000 f8a8 	bl	8006cf8 <__ieee754_pow>
 8006ba8:	4b4e      	ldr	r3, [pc, #312]	; (8006ce4 <pow+0x14c>)
 8006baa:	f993 3000 	ldrsb.w	r3, [r3]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	ec55 4b10 	vmov	r4, r5, d0
 8006bb4:	d015      	beq.n	8006be2 <pow+0x4a>
 8006bb6:	4632      	mov	r2, r6
 8006bb8:	463b      	mov	r3, r7
 8006bba:	4630      	mov	r0, r6
 8006bbc:	4639      	mov	r1, r7
 8006bbe:	f7f9 ff61 	bl	8000a84 <__aeabi_dcmpun>
 8006bc2:	b970      	cbnz	r0, 8006be2 <pow+0x4a>
 8006bc4:	4642      	mov	r2, r8
 8006bc6:	464b      	mov	r3, r9
 8006bc8:	4640      	mov	r0, r8
 8006bca:	4649      	mov	r1, r9
 8006bcc:	f7f9 ff5a 	bl	8000a84 <__aeabi_dcmpun>
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	b148      	cbz	r0, 8006bea <pow+0x52>
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	4639      	mov	r1, r7
 8006bda:	f7f9 ff21 	bl	8000a20 <__aeabi_dcmpeq>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d17d      	bne.n	8006cde <pow+0x146>
 8006be2:	ec45 4b10 	vmov	d0, r4, r5
 8006be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bea:	4640      	mov	r0, r8
 8006bec:	4649      	mov	r1, r9
 8006bee:	f7f9 ff17 	bl	8000a20 <__aeabi_dcmpeq>
 8006bf2:	b1e0      	cbz	r0, 8006c2e <pow+0x96>
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	4639      	mov	r1, r7
 8006bfc:	f7f9 ff10 	bl	8000a20 <__aeabi_dcmpeq>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d16c      	bne.n	8006cde <pow+0x146>
 8006c04:	ec47 6b10 	vmov	d0, r6, r7
 8006c08:	f000 fe55 	bl	80078b6 <finite>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d0e8      	beq.n	8006be2 <pow+0x4a>
 8006c10:	2200      	movs	r2, #0
 8006c12:	2300      	movs	r3, #0
 8006c14:	4630      	mov	r0, r6
 8006c16:	4639      	mov	r1, r7
 8006c18:	f7f9 ff0c 	bl	8000a34 <__aeabi_dcmplt>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d0e0      	beq.n	8006be2 <pow+0x4a>
 8006c20:	f7ff ff88 	bl	8006b34 <__errno>
 8006c24:	2321      	movs	r3, #33	; 0x21
 8006c26:	6003      	str	r3, [r0, #0]
 8006c28:	2400      	movs	r4, #0
 8006c2a:	4d2f      	ldr	r5, [pc, #188]	; (8006ce8 <pow+0x150>)
 8006c2c:	e7d9      	b.n	8006be2 <pow+0x4a>
 8006c2e:	ec45 4b10 	vmov	d0, r4, r5
 8006c32:	f000 fe40 	bl	80078b6 <finite>
 8006c36:	bbb8      	cbnz	r0, 8006ca8 <pow+0x110>
 8006c38:	ec49 8b10 	vmov	d0, r8, r9
 8006c3c:	f000 fe3b 	bl	80078b6 <finite>
 8006c40:	b390      	cbz	r0, 8006ca8 <pow+0x110>
 8006c42:	ec47 6b10 	vmov	d0, r6, r7
 8006c46:	f000 fe36 	bl	80078b6 <finite>
 8006c4a:	b368      	cbz	r0, 8006ca8 <pow+0x110>
 8006c4c:	4622      	mov	r2, r4
 8006c4e:	462b      	mov	r3, r5
 8006c50:	4620      	mov	r0, r4
 8006c52:	4629      	mov	r1, r5
 8006c54:	f7f9 ff16 	bl	8000a84 <__aeabi_dcmpun>
 8006c58:	b160      	cbz	r0, 8006c74 <pow+0xdc>
 8006c5a:	f7ff ff6b 	bl	8006b34 <__errno>
 8006c5e:	2321      	movs	r3, #33	; 0x21
 8006c60:	6003      	str	r3, [r0, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	2300      	movs	r3, #0
 8006c66:	4610      	mov	r0, r2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	f7f9 fd9b 	bl	80007a4 <__aeabi_ddiv>
 8006c6e:	4604      	mov	r4, r0
 8006c70:	460d      	mov	r5, r1
 8006c72:	e7b6      	b.n	8006be2 <pow+0x4a>
 8006c74:	f7ff ff5e 	bl	8006b34 <__errno>
 8006c78:	2322      	movs	r3, #34	; 0x22
 8006c7a:	6003      	str	r3, [r0, #0]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2300      	movs	r3, #0
 8006c80:	4640      	mov	r0, r8
 8006c82:	4649      	mov	r1, r9
 8006c84:	f7f9 fed6 	bl	8000a34 <__aeabi_dcmplt>
 8006c88:	2400      	movs	r4, #0
 8006c8a:	b158      	cbz	r0, 8006ca4 <pow+0x10c>
 8006c8c:	ec47 6b10 	vmov	d0, r6, r7
 8006c90:	f000 fe26 	bl	80078e0 <rint>
 8006c94:	4632      	mov	r2, r6
 8006c96:	ec51 0b10 	vmov	r0, r1, d0
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	f7f9 fec0 	bl	8000a20 <__aeabi_dcmpeq>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d0c2      	beq.n	8006c2a <pow+0x92>
 8006ca4:	4d11      	ldr	r5, [pc, #68]	; (8006cec <pow+0x154>)
 8006ca6:	e79c      	b.n	8006be2 <pow+0x4a>
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2300      	movs	r3, #0
 8006cac:	4620      	mov	r0, r4
 8006cae:	4629      	mov	r1, r5
 8006cb0:	f7f9 feb6 	bl	8000a20 <__aeabi_dcmpeq>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d094      	beq.n	8006be2 <pow+0x4a>
 8006cb8:	ec49 8b10 	vmov	d0, r8, r9
 8006cbc:	f000 fdfb 	bl	80078b6 <finite>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d08e      	beq.n	8006be2 <pow+0x4a>
 8006cc4:	ec47 6b10 	vmov	d0, r6, r7
 8006cc8:	f000 fdf5 	bl	80078b6 <finite>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d088      	beq.n	8006be2 <pow+0x4a>
 8006cd0:	f7ff ff30 	bl	8006b34 <__errno>
 8006cd4:	2322      	movs	r3, #34	; 0x22
 8006cd6:	6003      	str	r3, [r0, #0]
 8006cd8:	2400      	movs	r4, #0
 8006cda:	2500      	movs	r5, #0
 8006cdc:	e781      	b.n	8006be2 <pow+0x4a>
 8006cde:	4d04      	ldr	r5, [pc, #16]	; (8006cf0 <pow+0x158>)
 8006ce0:	2400      	movs	r4, #0
 8006ce2:	e77e      	b.n	8006be2 <pow+0x4a>
 8006ce4:	200000b4 	.word	0x200000b4
 8006ce8:	fff00000 	.word	0xfff00000
 8006cec:	7ff00000 	.word	0x7ff00000
 8006cf0:	3ff00000 	.word	0x3ff00000
 8006cf4:	00000000 	.word	0x00000000

08006cf8 <__ieee754_pow>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	ed2d 8b06 	vpush	{d8-d10}
 8006d00:	b08d      	sub	sp, #52	; 0x34
 8006d02:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006d06:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006d0a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006d0e:	ea56 0100 	orrs.w	r1, r6, r0
 8006d12:	ec53 2b10 	vmov	r2, r3, d0
 8006d16:	f000 84d1 	beq.w	80076bc <__ieee754_pow+0x9c4>
 8006d1a:	497f      	ldr	r1, [pc, #508]	; (8006f18 <__ieee754_pow+0x220>)
 8006d1c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006d20:	428c      	cmp	r4, r1
 8006d22:	ee10 8a10 	vmov	r8, s0
 8006d26:	4699      	mov	r9, r3
 8006d28:	dc09      	bgt.n	8006d3e <__ieee754_pow+0x46>
 8006d2a:	d103      	bne.n	8006d34 <__ieee754_pow+0x3c>
 8006d2c:	b97a      	cbnz	r2, 8006d4e <__ieee754_pow+0x56>
 8006d2e:	42a6      	cmp	r6, r4
 8006d30:	dd02      	ble.n	8006d38 <__ieee754_pow+0x40>
 8006d32:	e00c      	b.n	8006d4e <__ieee754_pow+0x56>
 8006d34:	428e      	cmp	r6, r1
 8006d36:	dc02      	bgt.n	8006d3e <__ieee754_pow+0x46>
 8006d38:	428e      	cmp	r6, r1
 8006d3a:	d110      	bne.n	8006d5e <__ieee754_pow+0x66>
 8006d3c:	b178      	cbz	r0, 8006d5e <__ieee754_pow+0x66>
 8006d3e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006d42:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006d46:	ea54 0308 	orrs.w	r3, r4, r8
 8006d4a:	f000 84b7 	beq.w	80076bc <__ieee754_pow+0x9c4>
 8006d4e:	4873      	ldr	r0, [pc, #460]	; (8006f1c <__ieee754_pow+0x224>)
 8006d50:	b00d      	add	sp, #52	; 0x34
 8006d52:	ecbd 8b06 	vpop	{d8-d10}
 8006d56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5a:	f000 bdb9 	b.w	80078d0 <nan>
 8006d5e:	f1b9 0f00 	cmp.w	r9, #0
 8006d62:	da36      	bge.n	8006dd2 <__ieee754_pow+0xda>
 8006d64:	496e      	ldr	r1, [pc, #440]	; (8006f20 <__ieee754_pow+0x228>)
 8006d66:	428e      	cmp	r6, r1
 8006d68:	dc51      	bgt.n	8006e0e <__ieee754_pow+0x116>
 8006d6a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8006d6e:	428e      	cmp	r6, r1
 8006d70:	f340 84af 	ble.w	80076d2 <__ieee754_pow+0x9da>
 8006d74:	1531      	asrs	r1, r6, #20
 8006d76:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006d7a:	2914      	cmp	r1, #20
 8006d7c:	dd0f      	ble.n	8006d9e <__ieee754_pow+0xa6>
 8006d7e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8006d82:	fa20 fc01 	lsr.w	ip, r0, r1
 8006d86:	fa0c f101 	lsl.w	r1, ip, r1
 8006d8a:	4281      	cmp	r1, r0
 8006d8c:	f040 84a1 	bne.w	80076d2 <__ieee754_pow+0x9da>
 8006d90:	f00c 0c01 	and.w	ip, ip, #1
 8006d94:	f1cc 0102 	rsb	r1, ip, #2
 8006d98:	9100      	str	r1, [sp, #0]
 8006d9a:	b180      	cbz	r0, 8006dbe <__ieee754_pow+0xc6>
 8006d9c:	e059      	b.n	8006e52 <__ieee754_pow+0x15a>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d155      	bne.n	8006e4e <__ieee754_pow+0x156>
 8006da2:	f1c1 0114 	rsb	r1, r1, #20
 8006da6:	fa46 fc01 	asr.w	ip, r6, r1
 8006daa:	fa0c f101 	lsl.w	r1, ip, r1
 8006dae:	42b1      	cmp	r1, r6
 8006db0:	f040 848c 	bne.w	80076cc <__ieee754_pow+0x9d4>
 8006db4:	f00c 0c01 	and.w	ip, ip, #1
 8006db8:	f1cc 0102 	rsb	r1, ip, #2
 8006dbc:	9100      	str	r1, [sp, #0]
 8006dbe:	4959      	ldr	r1, [pc, #356]	; (8006f24 <__ieee754_pow+0x22c>)
 8006dc0:	428e      	cmp	r6, r1
 8006dc2:	d12d      	bne.n	8006e20 <__ieee754_pow+0x128>
 8006dc4:	2f00      	cmp	r7, #0
 8006dc6:	da79      	bge.n	8006ebc <__ieee754_pow+0x1c4>
 8006dc8:	4956      	ldr	r1, [pc, #344]	; (8006f24 <__ieee754_pow+0x22c>)
 8006dca:	2000      	movs	r0, #0
 8006dcc:	f7f9 fcea 	bl	80007a4 <__aeabi_ddiv>
 8006dd0:	e016      	b.n	8006e00 <__ieee754_pow+0x108>
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	9100      	str	r1, [sp, #0]
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d13b      	bne.n	8006e52 <__ieee754_pow+0x15a>
 8006dda:	494f      	ldr	r1, [pc, #316]	; (8006f18 <__ieee754_pow+0x220>)
 8006ddc:	428e      	cmp	r6, r1
 8006dde:	d1ee      	bne.n	8006dbe <__ieee754_pow+0xc6>
 8006de0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006de4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006de8:	ea53 0308 	orrs.w	r3, r3, r8
 8006dec:	f000 8466 	beq.w	80076bc <__ieee754_pow+0x9c4>
 8006df0:	4b4d      	ldr	r3, [pc, #308]	; (8006f28 <__ieee754_pow+0x230>)
 8006df2:	429c      	cmp	r4, r3
 8006df4:	dd0d      	ble.n	8006e12 <__ieee754_pow+0x11a>
 8006df6:	2f00      	cmp	r7, #0
 8006df8:	f280 8464 	bge.w	80076c4 <__ieee754_pow+0x9cc>
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	2100      	movs	r1, #0
 8006e00:	ec41 0b10 	vmov	d0, r0, r1
 8006e04:	b00d      	add	sp, #52	; 0x34
 8006e06:	ecbd 8b06 	vpop	{d8-d10}
 8006e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0e:	2102      	movs	r1, #2
 8006e10:	e7e0      	b.n	8006dd4 <__ieee754_pow+0xdc>
 8006e12:	2f00      	cmp	r7, #0
 8006e14:	daf2      	bge.n	8006dfc <__ieee754_pow+0x104>
 8006e16:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006e1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006e1e:	e7ef      	b.n	8006e00 <__ieee754_pow+0x108>
 8006e20:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006e24:	d104      	bne.n	8006e30 <__ieee754_pow+0x138>
 8006e26:	4610      	mov	r0, r2
 8006e28:	4619      	mov	r1, r3
 8006e2a:	f7f9 fb91 	bl	8000550 <__aeabi_dmul>
 8006e2e:	e7e7      	b.n	8006e00 <__ieee754_pow+0x108>
 8006e30:	493e      	ldr	r1, [pc, #248]	; (8006f2c <__ieee754_pow+0x234>)
 8006e32:	428f      	cmp	r7, r1
 8006e34:	d10d      	bne.n	8006e52 <__ieee754_pow+0x15a>
 8006e36:	f1b9 0f00 	cmp.w	r9, #0
 8006e3a:	db0a      	blt.n	8006e52 <__ieee754_pow+0x15a>
 8006e3c:	ec43 2b10 	vmov	d0, r2, r3
 8006e40:	b00d      	add	sp, #52	; 0x34
 8006e42:	ecbd 8b06 	vpop	{d8-d10}
 8006e46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4a:	f000 bc77 	b.w	800773c <__ieee754_sqrt>
 8006e4e:	2100      	movs	r1, #0
 8006e50:	9100      	str	r1, [sp, #0]
 8006e52:	ec43 2b10 	vmov	d0, r2, r3
 8006e56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e5a:	f000 fd23 	bl	80078a4 <fabs>
 8006e5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e62:	ec51 0b10 	vmov	r0, r1, d0
 8006e66:	f1b8 0f00 	cmp.w	r8, #0
 8006e6a:	d12a      	bne.n	8006ec2 <__ieee754_pow+0x1ca>
 8006e6c:	b12c      	cbz	r4, 8006e7a <__ieee754_pow+0x182>
 8006e6e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8006f24 <__ieee754_pow+0x22c>
 8006e72:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8006e76:	45e6      	cmp	lr, ip
 8006e78:	d123      	bne.n	8006ec2 <__ieee754_pow+0x1ca>
 8006e7a:	2f00      	cmp	r7, #0
 8006e7c:	da05      	bge.n	8006e8a <__ieee754_pow+0x192>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	2000      	movs	r0, #0
 8006e84:	4927      	ldr	r1, [pc, #156]	; (8006f24 <__ieee754_pow+0x22c>)
 8006e86:	f7f9 fc8d 	bl	80007a4 <__aeabi_ddiv>
 8006e8a:	f1b9 0f00 	cmp.w	r9, #0
 8006e8e:	dab7      	bge.n	8006e00 <__ieee754_pow+0x108>
 8006e90:	9b00      	ldr	r3, [sp, #0]
 8006e92:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006e96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e9a:	4323      	orrs	r3, r4
 8006e9c:	d108      	bne.n	8006eb0 <__ieee754_pow+0x1b8>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f7f9 f99b 	bl	80001e0 <__aeabi_dsub>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	e78d      	b.n	8006dcc <__ieee754_pow+0xd4>
 8006eb0:	9b00      	ldr	r3, [sp, #0]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d1a4      	bne.n	8006e00 <__ieee754_pow+0x108>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	e79e      	b.n	8006e00 <__ieee754_pow+0x108>
 8006ec2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8006ec6:	f10c 35ff 	add.w	r5, ip, #4294967295
 8006eca:	950a      	str	r5, [sp, #40]	; 0x28
 8006ecc:	9d00      	ldr	r5, [sp, #0]
 8006ece:	46ac      	mov	ip, r5
 8006ed0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006ed2:	ea5c 0505 	orrs.w	r5, ip, r5
 8006ed6:	d0e4      	beq.n	8006ea2 <__ieee754_pow+0x1aa>
 8006ed8:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <__ieee754_pow+0x238>)
 8006eda:	429e      	cmp	r6, r3
 8006edc:	f340 80fc 	ble.w	80070d8 <__ieee754_pow+0x3e0>
 8006ee0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006ee4:	429e      	cmp	r6, r3
 8006ee6:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <__ieee754_pow+0x230>)
 8006ee8:	dd07      	ble.n	8006efa <__ieee754_pow+0x202>
 8006eea:	429c      	cmp	r4, r3
 8006eec:	dc0a      	bgt.n	8006f04 <__ieee754_pow+0x20c>
 8006eee:	2f00      	cmp	r7, #0
 8006ef0:	da84      	bge.n	8006dfc <__ieee754_pow+0x104>
 8006ef2:	a307      	add	r3, pc, #28	; (adr r3, 8006f10 <__ieee754_pow+0x218>)
 8006ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef8:	e795      	b.n	8006e26 <__ieee754_pow+0x12e>
 8006efa:	429c      	cmp	r4, r3
 8006efc:	dbf7      	blt.n	8006eee <__ieee754_pow+0x1f6>
 8006efe:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <__ieee754_pow+0x22c>)
 8006f00:	429c      	cmp	r4, r3
 8006f02:	dd17      	ble.n	8006f34 <__ieee754_pow+0x23c>
 8006f04:	2f00      	cmp	r7, #0
 8006f06:	dcf4      	bgt.n	8006ef2 <__ieee754_pow+0x1fa>
 8006f08:	e778      	b.n	8006dfc <__ieee754_pow+0x104>
 8006f0a:	bf00      	nop
 8006f0c:	f3af 8000 	nop.w
 8006f10:	8800759c 	.word	0x8800759c
 8006f14:	7e37e43c 	.word	0x7e37e43c
 8006f18:	7ff00000 	.word	0x7ff00000
 8006f1c:	08007bf4 	.word	0x08007bf4
 8006f20:	433fffff 	.word	0x433fffff
 8006f24:	3ff00000 	.word	0x3ff00000
 8006f28:	3fefffff 	.word	0x3fefffff
 8006f2c:	3fe00000 	.word	0x3fe00000
 8006f30:	41e00000 	.word	0x41e00000
 8006f34:	4b64      	ldr	r3, [pc, #400]	; (80070c8 <__ieee754_pow+0x3d0>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	f7f9 f952 	bl	80001e0 <__aeabi_dsub>
 8006f3c:	a356      	add	r3, pc, #344	; (adr r3, 8007098 <__ieee754_pow+0x3a0>)
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	4604      	mov	r4, r0
 8006f44:	460d      	mov	r5, r1
 8006f46:	f7f9 fb03 	bl	8000550 <__aeabi_dmul>
 8006f4a:	a355      	add	r3, pc, #340	; (adr r3, 80070a0 <__ieee754_pow+0x3a8>)
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	4606      	mov	r6, r0
 8006f52:	460f      	mov	r7, r1
 8006f54:	4620      	mov	r0, r4
 8006f56:	4629      	mov	r1, r5
 8006f58:	f7f9 fafa 	bl	8000550 <__aeabi_dmul>
 8006f5c:	4b5b      	ldr	r3, [pc, #364]	; (80070cc <__ieee754_pow+0x3d4>)
 8006f5e:	4682      	mov	sl, r0
 8006f60:	468b      	mov	fp, r1
 8006f62:	2200      	movs	r2, #0
 8006f64:	4620      	mov	r0, r4
 8006f66:	4629      	mov	r1, r5
 8006f68:	f7f9 faf2 	bl	8000550 <__aeabi_dmul>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	a14d      	add	r1, pc, #308	; (adr r1, 80070a8 <__ieee754_pow+0x3b0>)
 8006f72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f76:	f7f9 f933 	bl	80001e0 <__aeabi_dsub>
 8006f7a:	4622      	mov	r2, r4
 8006f7c:	462b      	mov	r3, r5
 8006f7e:	f7f9 fae7 	bl	8000550 <__aeabi_dmul>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	2000      	movs	r0, #0
 8006f88:	4951      	ldr	r1, [pc, #324]	; (80070d0 <__ieee754_pow+0x3d8>)
 8006f8a:	f7f9 f929 	bl	80001e0 <__aeabi_dsub>
 8006f8e:	4622      	mov	r2, r4
 8006f90:	4680      	mov	r8, r0
 8006f92:	4689      	mov	r9, r1
 8006f94:	462b      	mov	r3, r5
 8006f96:	4620      	mov	r0, r4
 8006f98:	4629      	mov	r1, r5
 8006f9a:	f7f9 fad9 	bl	8000550 <__aeabi_dmul>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	f7f9 fad3 	bl	8000550 <__aeabi_dmul>
 8006faa:	a341      	add	r3, pc, #260	; (adr r3, 80070b0 <__ieee754_pow+0x3b8>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	f7f9 face 	bl	8000550 <__aeabi_dmul>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4650      	mov	r0, sl
 8006fba:	4659      	mov	r1, fp
 8006fbc:	f7f9 f910 	bl	80001e0 <__aeabi_dsub>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4680      	mov	r8, r0
 8006fc6:	4689      	mov	r9, r1
 8006fc8:	4630      	mov	r0, r6
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f7f9 f90a 	bl	80001e4 <__adddf3>
 8006fd0:	2400      	movs	r4, #0
 8006fd2:	4632      	mov	r2, r6
 8006fd4:	463b      	mov	r3, r7
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	460d      	mov	r5, r1
 8006fda:	f7f9 f901 	bl	80001e0 <__aeabi_dsub>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	f7f9 f8fb 	bl	80001e0 <__aeabi_dsub>
 8006fea:	9b00      	ldr	r3, [sp, #0]
 8006fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	4682      	mov	sl, r0
 8006ff4:	468b      	mov	fp, r1
 8006ff6:	f040 81f1 	bne.w	80073dc <__ieee754_pow+0x6e4>
 8006ffa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80070b8 <__ieee754_pow+0x3c0>
 8006ffe:	eeb0 8a47 	vmov.f32	s16, s14
 8007002:	eef0 8a67 	vmov.f32	s17, s15
 8007006:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800700a:	2600      	movs	r6, #0
 800700c:	4632      	mov	r2, r6
 800700e:	463b      	mov	r3, r7
 8007010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007014:	f7f9 f8e4 	bl	80001e0 <__aeabi_dsub>
 8007018:	4622      	mov	r2, r4
 800701a:	462b      	mov	r3, r5
 800701c:	f7f9 fa98 	bl	8000550 <__aeabi_dmul>
 8007020:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007024:	4680      	mov	r8, r0
 8007026:	4689      	mov	r9, r1
 8007028:	4650      	mov	r0, sl
 800702a:	4659      	mov	r1, fp
 800702c:	f7f9 fa90 	bl	8000550 <__aeabi_dmul>
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	4640      	mov	r0, r8
 8007036:	4649      	mov	r1, r9
 8007038:	f7f9 f8d4 	bl	80001e4 <__adddf3>
 800703c:	4632      	mov	r2, r6
 800703e:	463b      	mov	r3, r7
 8007040:	4680      	mov	r8, r0
 8007042:	4689      	mov	r9, r1
 8007044:	4620      	mov	r0, r4
 8007046:	4629      	mov	r1, r5
 8007048:	f7f9 fa82 	bl	8000550 <__aeabi_dmul>
 800704c:	460b      	mov	r3, r1
 800704e:	4604      	mov	r4, r0
 8007050:	460d      	mov	r5, r1
 8007052:	4602      	mov	r2, r0
 8007054:	4649      	mov	r1, r9
 8007056:	4640      	mov	r0, r8
 8007058:	f7f9 f8c4 	bl	80001e4 <__adddf3>
 800705c:	4b1d      	ldr	r3, [pc, #116]	; (80070d4 <__ieee754_pow+0x3dc>)
 800705e:	4299      	cmp	r1, r3
 8007060:	ec45 4b19 	vmov	d9, r4, r5
 8007064:	4606      	mov	r6, r0
 8007066:	460f      	mov	r7, r1
 8007068:	468b      	mov	fp, r1
 800706a:	f340 82fe 	ble.w	800766a <__ieee754_pow+0x972>
 800706e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007072:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007076:	4303      	orrs	r3, r0
 8007078:	f000 81f0 	beq.w	800745c <__ieee754_pow+0x764>
 800707c:	a310      	add	r3, pc, #64	; (adr r3, 80070c0 <__ieee754_pow+0x3c8>)
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	ec51 0b18 	vmov	r0, r1, d8
 8007086:	f7f9 fa63 	bl	8000550 <__aeabi_dmul>
 800708a:	a30d      	add	r3, pc, #52	; (adr r3, 80070c0 <__ieee754_pow+0x3c8>)
 800708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007090:	e6cb      	b.n	8006e2a <__ieee754_pow+0x132>
 8007092:	bf00      	nop
 8007094:	f3af 8000 	nop.w
 8007098:	60000000 	.word	0x60000000
 800709c:	3ff71547 	.word	0x3ff71547
 80070a0:	f85ddf44 	.word	0xf85ddf44
 80070a4:	3e54ae0b 	.word	0x3e54ae0b
 80070a8:	55555555 	.word	0x55555555
 80070ac:	3fd55555 	.word	0x3fd55555
 80070b0:	652b82fe 	.word	0x652b82fe
 80070b4:	3ff71547 	.word	0x3ff71547
 80070b8:	00000000 	.word	0x00000000
 80070bc:	bff00000 	.word	0xbff00000
 80070c0:	8800759c 	.word	0x8800759c
 80070c4:	7e37e43c 	.word	0x7e37e43c
 80070c8:	3ff00000 	.word	0x3ff00000
 80070cc:	3fd00000 	.word	0x3fd00000
 80070d0:	3fe00000 	.word	0x3fe00000
 80070d4:	408fffff 	.word	0x408fffff
 80070d8:	4bd7      	ldr	r3, [pc, #860]	; (8007438 <__ieee754_pow+0x740>)
 80070da:	ea03 0309 	and.w	r3, r3, r9
 80070de:	2200      	movs	r2, #0
 80070e0:	b92b      	cbnz	r3, 80070ee <__ieee754_pow+0x3f6>
 80070e2:	4bd6      	ldr	r3, [pc, #856]	; (800743c <__ieee754_pow+0x744>)
 80070e4:	f7f9 fa34 	bl	8000550 <__aeabi_dmul>
 80070e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80070ec:	460c      	mov	r4, r1
 80070ee:	1523      	asrs	r3, r4, #20
 80070f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80070f4:	4413      	add	r3, r2
 80070f6:	9309      	str	r3, [sp, #36]	; 0x24
 80070f8:	4bd1      	ldr	r3, [pc, #836]	; (8007440 <__ieee754_pow+0x748>)
 80070fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80070fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007102:	429c      	cmp	r4, r3
 8007104:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007108:	dd08      	ble.n	800711c <__ieee754_pow+0x424>
 800710a:	4bce      	ldr	r3, [pc, #824]	; (8007444 <__ieee754_pow+0x74c>)
 800710c:	429c      	cmp	r4, r3
 800710e:	f340 8163 	ble.w	80073d8 <__ieee754_pow+0x6e0>
 8007112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007114:	3301      	adds	r3, #1
 8007116:	9309      	str	r3, [sp, #36]	; 0x24
 8007118:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800711c:	2400      	movs	r4, #0
 800711e:	00e3      	lsls	r3, r4, #3
 8007120:	930b      	str	r3, [sp, #44]	; 0x2c
 8007122:	4bc9      	ldr	r3, [pc, #804]	; (8007448 <__ieee754_pow+0x750>)
 8007124:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007128:	ed93 7b00 	vldr	d7, [r3]
 800712c:	4629      	mov	r1, r5
 800712e:	ec53 2b17 	vmov	r2, r3, d7
 8007132:	eeb0 8a47 	vmov.f32	s16, s14
 8007136:	eef0 8a67 	vmov.f32	s17, s15
 800713a:	4682      	mov	sl, r0
 800713c:	f7f9 f850 	bl	80001e0 <__aeabi_dsub>
 8007140:	4652      	mov	r2, sl
 8007142:	4606      	mov	r6, r0
 8007144:	460f      	mov	r7, r1
 8007146:	462b      	mov	r3, r5
 8007148:	ec51 0b18 	vmov	r0, r1, d8
 800714c:	f7f9 f84a 	bl	80001e4 <__adddf3>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	2000      	movs	r0, #0
 8007156:	49bd      	ldr	r1, [pc, #756]	; (800744c <__ieee754_pow+0x754>)
 8007158:	f7f9 fb24 	bl	80007a4 <__aeabi_ddiv>
 800715c:	ec41 0b19 	vmov	d9, r0, r1
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	f7f9 f9f2 	bl	8000550 <__aeabi_dmul>
 800716c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007170:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007174:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007178:	2300      	movs	r3, #0
 800717a:	9304      	str	r3, [sp, #16]
 800717c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007180:	46ab      	mov	fp, r5
 8007182:	106d      	asrs	r5, r5, #1
 8007184:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007188:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800718c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007190:	2200      	movs	r2, #0
 8007192:	4640      	mov	r0, r8
 8007194:	4649      	mov	r1, r9
 8007196:	4614      	mov	r4, r2
 8007198:	461d      	mov	r5, r3
 800719a:	f7f9 f9d9 	bl	8000550 <__aeabi_dmul>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4630      	mov	r0, r6
 80071a4:	4639      	mov	r1, r7
 80071a6:	f7f9 f81b 	bl	80001e0 <__aeabi_dsub>
 80071aa:	ec53 2b18 	vmov	r2, r3, d8
 80071ae:	4606      	mov	r6, r0
 80071b0:	460f      	mov	r7, r1
 80071b2:	4620      	mov	r0, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7f9 f813 	bl	80001e0 <__aeabi_dsub>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4650      	mov	r0, sl
 80071c0:	4659      	mov	r1, fp
 80071c2:	f7f9 f80d 	bl	80001e0 <__aeabi_dsub>
 80071c6:	4642      	mov	r2, r8
 80071c8:	464b      	mov	r3, r9
 80071ca:	f7f9 f9c1 	bl	8000550 <__aeabi_dmul>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	4630      	mov	r0, r6
 80071d4:	4639      	mov	r1, r7
 80071d6:	f7f9 f803 	bl	80001e0 <__aeabi_dsub>
 80071da:	ec53 2b19 	vmov	r2, r3, d9
 80071de:	f7f9 f9b7 	bl	8000550 <__aeabi_dmul>
 80071e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071e6:	ec41 0b18 	vmov	d8, r0, r1
 80071ea:	4610      	mov	r0, r2
 80071ec:	4619      	mov	r1, r3
 80071ee:	f7f9 f9af 	bl	8000550 <__aeabi_dmul>
 80071f2:	a37d      	add	r3, pc, #500	; (adr r3, 80073e8 <__ieee754_pow+0x6f0>)
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	4604      	mov	r4, r0
 80071fa:	460d      	mov	r5, r1
 80071fc:	f7f9 f9a8 	bl	8000550 <__aeabi_dmul>
 8007200:	a37b      	add	r3, pc, #492	; (adr r3, 80073f0 <__ieee754_pow+0x6f8>)
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	f7f8 ffed 	bl	80001e4 <__adddf3>
 800720a:	4622      	mov	r2, r4
 800720c:	462b      	mov	r3, r5
 800720e:	f7f9 f99f 	bl	8000550 <__aeabi_dmul>
 8007212:	a379      	add	r3, pc, #484	; (adr r3, 80073f8 <__ieee754_pow+0x700>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f8 ffe4 	bl	80001e4 <__adddf3>
 800721c:	4622      	mov	r2, r4
 800721e:	462b      	mov	r3, r5
 8007220:	f7f9 f996 	bl	8000550 <__aeabi_dmul>
 8007224:	a376      	add	r3, pc, #472	; (adr r3, 8007400 <__ieee754_pow+0x708>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f8 ffdb 	bl	80001e4 <__adddf3>
 800722e:	4622      	mov	r2, r4
 8007230:	462b      	mov	r3, r5
 8007232:	f7f9 f98d 	bl	8000550 <__aeabi_dmul>
 8007236:	a374      	add	r3, pc, #464	; (adr r3, 8007408 <__ieee754_pow+0x710>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f7f8 ffd2 	bl	80001e4 <__adddf3>
 8007240:	4622      	mov	r2, r4
 8007242:	462b      	mov	r3, r5
 8007244:	f7f9 f984 	bl	8000550 <__aeabi_dmul>
 8007248:	a371      	add	r3, pc, #452	; (adr r3, 8007410 <__ieee754_pow+0x718>)
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f7f8 ffc9 	bl	80001e4 <__adddf3>
 8007252:	4622      	mov	r2, r4
 8007254:	4606      	mov	r6, r0
 8007256:	460f      	mov	r7, r1
 8007258:	462b      	mov	r3, r5
 800725a:	4620      	mov	r0, r4
 800725c:	4629      	mov	r1, r5
 800725e:	f7f9 f977 	bl	8000550 <__aeabi_dmul>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4630      	mov	r0, r6
 8007268:	4639      	mov	r1, r7
 800726a:	f7f9 f971 	bl	8000550 <__aeabi_dmul>
 800726e:	4642      	mov	r2, r8
 8007270:	4604      	mov	r4, r0
 8007272:	460d      	mov	r5, r1
 8007274:	464b      	mov	r3, r9
 8007276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800727a:	f7f8 ffb3 	bl	80001e4 <__adddf3>
 800727e:	ec53 2b18 	vmov	r2, r3, d8
 8007282:	f7f9 f965 	bl	8000550 <__aeabi_dmul>
 8007286:	4622      	mov	r2, r4
 8007288:	462b      	mov	r3, r5
 800728a:	f7f8 ffab 	bl	80001e4 <__adddf3>
 800728e:	4642      	mov	r2, r8
 8007290:	4682      	mov	sl, r0
 8007292:	468b      	mov	fp, r1
 8007294:	464b      	mov	r3, r9
 8007296:	4640      	mov	r0, r8
 8007298:	4649      	mov	r1, r9
 800729a:	f7f9 f959 	bl	8000550 <__aeabi_dmul>
 800729e:	4b6c      	ldr	r3, [pc, #432]	; (8007450 <__ieee754_pow+0x758>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	4606      	mov	r6, r0
 80072a4:	460f      	mov	r7, r1
 80072a6:	f7f8 ff9d 	bl	80001e4 <__adddf3>
 80072aa:	4652      	mov	r2, sl
 80072ac:	465b      	mov	r3, fp
 80072ae:	f7f8 ff99 	bl	80001e4 <__adddf3>
 80072b2:	9c04      	ldr	r4, [sp, #16]
 80072b4:	460d      	mov	r5, r1
 80072b6:	4622      	mov	r2, r4
 80072b8:	460b      	mov	r3, r1
 80072ba:	4640      	mov	r0, r8
 80072bc:	4649      	mov	r1, r9
 80072be:	f7f9 f947 	bl	8000550 <__aeabi_dmul>
 80072c2:	4b63      	ldr	r3, [pc, #396]	; (8007450 <__ieee754_pow+0x758>)
 80072c4:	4680      	mov	r8, r0
 80072c6:	4689      	mov	r9, r1
 80072c8:	2200      	movs	r2, #0
 80072ca:	4620      	mov	r0, r4
 80072cc:	4629      	mov	r1, r5
 80072ce:	f7f8 ff87 	bl	80001e0 <__aeabi_dsub>
 80072d2:	4632      	mov	r2, r6
 80072d4:	463b      	mov	r3, r7
 80072d6:	f7f8 ff83 	bl	80001e0 <__aeabi_dsub>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	4650      	mov	r0, sl
 80072e0:	4659      	mov	r1, fp
 80072e2:	f7f8 ff7d 	bl	80001e0 <__aeabi_dsub>
 80072e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072ea:	f7f9 f931 	bl	8000550 <__aeabi_dmul>
 80072ee:	4622      	mov	r2, r4
 80072f0:	4606      	mov	r6, r0
 80072f2:	460f      	mov	r7, r1
 80072f4:	462b      	mov	r3, r5
 80072f6:	ec51 0b18 	vmov	r0, r1, d8
 80072fa:	f7f9 f929 	bl	8000550 <__aeabi_dmul>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4630      	mov	r0, r6
 8007304:	4639      	mov	r1, r7
 8007306:	f7f8 ff6d 	bl	80001e4 <__adddf3>
 800730a:	4606      	mov	r6, r0
 800730c:	460f      	mov	r7, r1
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4640      	mov	r0, r8
 8007314:	4649      	mov	r1, r9
 8007316:	f7f8 ff65 	bl	80001e4 <__adddf3>
 800731a:	9c04      	ldr	r4, [sp, #16]
 800731c:	a33e      	add	r3, pc, #248	; (adr r3, 8007418 <__ieee754_pow+0x720>)
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	4620      	mov	r0, r4
 8007324:	460d      	mov	r5, r1
 8007326:	f7f9 f913 	bl	8000550 <__aeabi_dmul>
 800732a:	4642      	mov	r2, r8
 800732c:	ec41 0b18 	vmov	d8, r0, r1
 8007330:	464b      	mov	r3, r9
 8007332:	4620      	mov	r0, r4
 8007334:	4629      	mov	r1, r5
 8007336:	f7f8 ff53 	bl	80001e0 <__aeabi_dsub>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4630      	mov	r0, r6
 8007340:	4639      	mov	r1, r7
 8007342:	f7f8 ff4d 	bl	80001e0 <__aeabi_dsub>
 8007346:	a336      	add	r3, pc, #216	; (adr r3, 8007420 <__ieee754_pow+0x728>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	f7f9 f900 	bl	8000550 <__aeabi_dmul>
 8007350:	a335      	add	r3, pc, #212	; (adr r3, 8007428 <__ieee754_pow+0x730>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	4606      	mov	r6, r0
 8007358:	460f      	mov	r7, r1
 800735a:	4620      	mov	r0, r4
 800735c:	4629      	mov	r1, r5
 800735e:	f7f9 f8f7 	bl	8000550 <__aeabi_dmul>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4630      	mov	r0, r6
 8007368:	4639      	mov	r1, r7
 800736a:	f7f8 ff3b 	bl	80001e4 <__adddf3>
 800736e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007370:	4b38      	ldr	r3, [pc, #224]	; (8007454 <__ieee754_pow+0x75c>)
 8007372:	4413      	add	r3, r2
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f8 ff34 	bl	80001e4 <__adddf3>
 800737c:	4682      	mov	sl, r0
 800737e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007380:	468b      	mov	fp, r1
 8007382:	f7f9 f87b 	bl	800047c <__aeabi_i2d>
 8007386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007388:	4b33      	ldr	r3, [pc, #204]	; (8007458 <__ieee754_pow+0x760>)
 800738a:	4413      	add	r3, r2
 800738c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007390:	4606      	mov	r6, r0
 8007392:	460f      	mov	r7, r1
 8007394:	4652      	mov	r2, sl
 8007396:	465b      	mov	r3, fp
 8007398:	ec51 0b18 	vmov	r0, r1, d8
 800739c:	f7f8 ff22 	bl	80001e4 <__adddf3>
 80073a0:	4642      	mov	r2, r8
 80073a2:	464b      	mov	r3, r9
 80073a4:	f7f8 ff1e 	bl	80001e4 <__adddf3>
 80073a8:	4632      	mov	r2, r6
 80073aa:	463b      	mov	r3, r7
 80073ac:	f7f8 ff1a 	bl	80001e4 <__adddf3>
 80073b0:	9c04      	ldr	r4, [sp, #16]
 80073b2:	4632      	mov	r2, r6
 80073b4:	463b      	mov	r3, r7
 80073b6:	4620      	mov	r0, r4
 80073b8:	460d      	mov	r5, r1
 80073ba:	f7f8 ff11 	bl	80001e0 <__aeabi_dsub>
 80073be:	4642      	mov	r2, r8
 80073c0:	464b      	mov	r3, r9
 80073c2:	f7f8 ff0d 	bl	80001e0 <__aeabi_dsub>
 80073c6:	ec53 2b18 	vmov	r2, r3, d8
 80073ca:	f7f8 ff09 	bl	80001e0 <__aeabi_dsub>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4650      	mov	r0, sl
 80073d4:	4659      	mov	r1, fp
 80073d6:	e606      	b.n	8006fe6 <__ieee754_pow+0x2ee>
 80073d8:	2401      	movs	r4, #1
 80073da:	e6a0      	b.n	800711e <__ieee754_pow+0x426>
 80073dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007430 <__ieee754_pow+0x738>
 80073e0:	e60d      	b.n	8006ffe <__ieee754_pow+0x306>
 80073e2:	bf00      	nop
 80073e4:	f3af 8000 	nop.w
 80073e8:	4a454eef 	.word	0x4a454eef
 80073ec:	3fca7e28 	.word	0x3fca7e28
 80073f0:	93c9db65 	.word	0x93c9db65
 80073f4:	3fcd864a 	.word	0x3fcd864a
 80073f8:	a91d4101 	.word	0xa91d4101
 80073fc:	3fd17460 	.word	0x3fd17460
 8007400:	518f264d 	.word	0x518f264d
 8007404:	3fd55555 	.word	0x3fd55555
 8007408:	db6fabff 	.word	0xdb6fabff
 800740c:	3fdb6db6 	.word	0x3fdb6db6
 8007410:	33333303 	.word	0x33333303
 8007414:	3fe33333 	.word	0x3fe33333
 8007418:	e0000000 	.word	0xe0000000
 800741c:	3feec709 	.word	0x3feec709
 8007420:	dc3a03fd 	.word	0xdc3a03fd
 8007424:	3feec709 	.word	0x3feec709
 8007428:	145b01f5 	.word	0x145b01f5
 800742c:	be3e2fe0 	.word	0xbe3e2fe0
 8007430:	00000000 	.word	0x00000000
 8007434:	3ff00000 	.word	0x3ff00000
 8007438:	7ff00000 	.word	0x7ff00000
 800743c:	43400000 	.word	0x43400000
 8007440:	0003988e 	.word	0x0003988e
 8007444:	000bb679 	.word	0x000bb679
 8007448:	08007bf8 	.word	0x08007bf8
 800744c:	3ff00000 	.word	0x3ff00000
 8007450:	40080000 	.word	0x40080000
 8007454:	08007c18 	.word	0x08007c18
 8007458:	08007c08 	.word	0x08007c08
 800745c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007734 <__ieee754_pow+0xa3c>)
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	4640      	mov	r0, r8
 8007464:	4649      	mov	r1, r9
 8007466:	f7f8 febd 	bl	80001e4 <__adddf3>
 800746a:	4622      	mov	r2, r4
 800746c:	ec41 0b1a 	vmov	d10, r0, r1
 8007470:	462b      	mov	r3, r5
 8007472:	4630      	mov	r0, r6
 8007474:	4639      	mov	r1, r7
 8007476:	f7f8 feb3 	bl	80001e0 <__aeabi_dsub>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	ec51 0b1a 	vmov	r0, r1, d10
 8007482:	f7f9 faf5 	bl	8000a70 <__aeabi_dcmpgt>
 8007486:	2800      	cmp	r0, #0
 8007488:	f47f adf8 	bne.w	800707c <__ieee754_pow+0x384>
 800748c:	4aa4      	ldr	r2, [pc, #656]	; (8007720 <__ieee754_pow+0xa28>)
 800748e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007492:	4293      	cmp	r3, r2
 8007494:	f340 810b 	ble.w	80076ae <__ieee754_pow+0x9b6>
 8007498:	151b      	asrs	r3, r3, #20
 800749a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800749e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80074a2:	fa4a f303 	asr.w	r3, sl, r3
 80074a6:	445b      	add	r3, fp
 80074a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80074ac:	4e9d      	ldr	r6, [pc, #628]	; (8007724 <__ieee754_pow+0xa2c>)
 80074ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80074b2:	4116      	asrs	r6, r2
 80074b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80074b8:	2000      	movs	r0, #0
 80074ba:	ea23 0106 	bic.w	r1, r3, r6
 80074be:	f1c2 0214 	rsb	r2, r2, #20
 80074c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80074c6:	fa4a fa02 	asr.w	sl, sl, r2
 80074ca:	f1bb 0f00 	cmp.w	fp, #0
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4620      	mov	r0, r4
 80074d4:	4629      	mov	r1, r5
 80074d6:	bfb8      	it	lt
 80074d8:	f1ca 0a00 	rsblt	sl, sl, #0
 80074dc:	f7f8 fe80 	bl	80001e0 <__aeabi_dsub>
 80074e0:	ec41 0b19 	vmov	d9, r0, r1
 80074e4:	4642      	mov	r2, r8
 80074e6:	464b      	mov	r3, r9
 80074e8:	ec51 0b19 	vmov	r0, r1, d9
 80074ec:	f7f8 fe7a 	bl	80001e4 <__adddf3>
 80074f0:	2400      	movs	r4, #0
 80074f2:	a379      	add	r3, pc, #484	; (adr r3, 80076d8 <__ieee754_pow+0x9e0>)
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	4620      	mov	r0, r4
 80074fa:	460d      	mov	r5, r1
 80074fc:	f7f9 f828 	bl	8000550 <__aeabi_dmul>
 8007500:	ec53 2b19 	vmov	r2, r3, d9
 8007504:	4606      	mov	r6, r0
 8007506:	460f      	mov	r7, r1
 8007508:	4620      	mov	r0, r4
 800750a:	4629      	mov	r1, r5
 800750c:	f7f8 fe68 	bl	80001e0 <__aeabi_dsub>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4640      	mov	r0, r8
 8007516:	4649      	mov	r1, r9
 8007518:	f7f8 fe62 	bl	80001e0 <__aeabi_dsub>
 800751c:	a370      	add	r3, pc, #448	; (adr r3, 80076e0 <__ieee754_pow+0x9e8>)
 800751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007522:	f7f9 f815 	bl	8000550 <__aeabi_dmul>
 8007526:	a370      	add	r3, pc, #448	; (adr r3, 80076e8 <__ieee754_pow+0x9f0>)
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	4680      	mov	r8, r0
 800752e:	4689      	mov	r9, r1
 8007530:	4620      	mov	r0, r4
 8007532:	4629      	mov	r1, r5
 8007534:	f7f9 f80c 	bl	8000550 <__aeabi_dmul>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	4640      	mov	r0, r8
 800753e:	4649      	mov	r1, r9
 8007540:	f7f8 fe50 	bl	80001e4 <__adddf3>
 8007544:	4604      	mov	r4, r0
 8007546:	460d      	mov	r5, r1
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4630      	mov	r0, r6
 800754e:	4639      	mov	r1, r7
 8007550:	f7f8 fe48 	bl	80001e4 <__adddf3>
 8007554:	4632      	mov	r2, r6
 8007556:	463b      	mov	r3, r7
 8007558:	4680      	mov	r8, r0
 800755a:	4689      	mov	r9, r1
 800755c:	f7f8 fe40 	bl	80001e0 <__aeabi_dsub>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4620      	mov	r0, r4
 8007566:	4629      	mov	r1, r5
 8007568:	f7f8 fe3a 	bl	80001e0 <__aeabi_dsub>
 800756c:	4642      	mov	r2, r8
 800756e:	4606      	mov	r6, r0
 8007570:	460f      	mov	r7, r1
 8007572:	464b      	mov	r3, r9
 8007574:	4640      	mov	r0, r8
 8007576:	4649      	mov	r1, r9
 8007578:	f7f8 ffea 	bl	8000550 <__aeabi_dmul>
 800757c:	a35c      	add	r3, pc, #368	; (adr r3, 80076f0 <__ieee754_pow+0x9f8>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	4604      	mov	r4, r0
 8007584:	460d      	mov	r5, r1
 8007586:	f7f8 ffe3 	bl	8000550 <__aeabi_dmul>
 800758a:	a35b      	add	r3, pc, #364	; (adr r3, 80076f8 <__ieee754_pow+0xa00>)
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	f7f8 fe26 	bl	80001e0 <__aeabi_dsub>
 8007594:	4622      	mov	r2, r4
 8007596:	462b      	mov	r3, r5
 8007598:	f7f8 ffda 	bl	8000550 <__aeabi_dmul>
 800759c:	a358      	add	r3, pc, #352	; (adr r3, 8007700 <__ieee754_pow+0xa08>)
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	f7f8 fe1f 	bl	80001e4 <__adddf3>
 80075a6:	4622      	mov	r2, r4
 80075a8:	462b      	mov	r3, r5
 80075aa:	f7f8 ffd1 	bl	8000550 <__aeabi_dmul>
 80075ae:	a356      	add	r3, pc, #344	; (adr r3, 8007708 <__ieee754_pow+0xa10>)
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	f7f8 fe14 	bl	80001e0 <__aeabi_dsub>
 80075b8:	4622      	mov	r2, r4
 80075ba:	462b      	mov	r3, r5
 80075bc:	f7f8 ffc8 	bl	8000550 <__aeabi_dmul>
 80075c0:	a353      	add	r3, pc, #332	; (adr r3, 8007710 <__ieee754_pow+0xa18>)
 80075c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c6:	f7f8 fe0d 	bl	80001e4 <__adddf3>
 80075ca:	4622      	mov	r2, r4
 80075cc:	462b      	mov	r3, r5
 80075ce:	f7f8 ffbf 	bl	8000550 <__aeabi_dmul>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	4640      	mov	r0, r8
 80075d8:	4649      	mov	r1, r9
 80075da:	f7f8 fe01 	bl	80001e0 <__aeabi_dsub>
 80075de:	4604      	mov	r4, r0
 80075e0:	460d      	mov	r5, r1
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4640      	mov	r0, r8
 80075e8:	4649      	mov	r1, r9
 80075ea:	f7f8 ffb1 	bl	8000550 <__aeabi_dmul>
 80075ee:	2200      	movs	r2, #0
 80075f0:	ec41 0b19 	vmov	d9, r0, r1
 80075f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075f8:	4620      	mov	r0, r4
 80075fa:	4629      	mov	r1, r5
 80075fc:	f7f8 fdf0 	bl	80001e0 <__aeabi_dsub>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	ec51 0b19 	vmov	r0, r1, d9
 8007608:	f7f9 f8cc 	bl	80007a4 <__aeabi_ddiv>
 800760c:	4632      	mov	r2, r6
 800760e:	4604      	mov	r4, r0
 8007610:	460d      	mov	r5, r1
 8007612:	463b      	mov	r3, r7
 8007614:	4640      	mov	r0, r8
 8007616:	4649      	mov	r1, r9
 8007618:	f7f8 ff9a 	bl	8000550 <__aeabi_dmul>
 800761c:	4632      	mov	r2, r6
 800761e:	463b      	mov	r3, r7
 8007620:	f7f8 fde0 	bl	80001e4 <__adddf3>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4620      	mov	r0, r4
 800762a:	4629      	mov	r1, r5
 800762c:	f7f8 fdd8 	bl	80001e0 <__aeabi_dsub>
 8007630:	4642      	mov	r2, r8
 8007632:	464b      	mov	r3, r9
 8007634:	f7f8 fdd4 	bl	80001e0 <__aeabi_dsub>
 8007638:	460b      	mov	r3, r1
 800763a:	4602      	mov	r2, r0
 800763c:	493a      	ldr	r1, [pc, #232]	; (8007728 <__ieee754_pow+0xa30>)
 800763e:	2000      	movs	r0, #0
 8007640:	f7f8 fdce 	bl	80001e0 <__aeabi_dsub>
 8007644:	e9cd 0100 	strd	r0, r1, [sp]
 8007648:	9b01      	ldr	r3, [sp, #4]
 800764a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800764e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007652:	da2f      	bge.n	80076b4 <__ieee754_pow+0x9bc>
 8007654:	4650      	mov	r0, sl
 8007656:	ed9d 0b00 	vldr	d0, [sp]
 800765a:	f000 f9cd 	bl	80079f8 <scalbn>
 800765e:	ec51 0b10 	vmov	r0, r1, d0
 8007662:	ec53 2b18 	vmov	r2, r3, d8
 8007666:	f7ff bbe0 	b.w	8006e2a <__ieee754_pow+0x132>
 800766a:	4b30      	ldr	r3, [pc, #192]	; (800772c <__ieee754_pow+0xa34>)
 800766c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007670:	429e      	cmp	r6, r3
 8007672:	f77f af0b 	ble.w	800748c <__ieee754_pow+0x794>
 8007676:	4b2e      	ldr	r3, [pc, #184]	; (8007730 <__ieee754_pow+0xa38>)
 8007678:	440b      	add	r3, r1
 800767a:	4303      	orrs	r3, r0
 800767c:	d00b      	beq.n	8007696 <__ieee754_pow+0x99e>
 800767e:	a326      	add	r3, pc, #152	; (adr r3, 8007718 <__ieee754_pow+0xa20>)
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	ec51 0b18 	vmov	r0, r1, d8
 8007688:	f7f8 ff62 	bl	8000550 <__aeabi_dmul>
 800768c:	a322      	add	r3, pc, #136	; (adr r3, 8007718 <__ieee754_pow+0xa20>)
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	f7ff bbca 	b.w	8006e2a <__ieee754_pow+0x132>
 8007696:	4622      	mov	r2, r4
 8007698:	462b      	mov	r3, r5
 800769a:	f7f8 fda1 	bl	80001e0 <__aeabi_dsub>
 800769e:	4642      	mov	r2, r8
 80076a0:	464b      	mov	r3, r9
 80076a2:	f7f9 f9db 	bl	8000a5c <__aeabi_dcmpge>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	f43f aef0 	beq.w	800748c <__ieee754_pow+0x794>
 80076ac:	e7e7      	b.n	800767e <__ieee754_pow+0x986>
 80076ae:	f04f 0a00 	mov.w	sl, #0
 80076b2:	e717      	b.n	80074e4 <__ieee754_pow+0x7ec>
 80076b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076b8:	4619      	mov	r1, r3
 80076ba:	e7d2      	b.n	8007662 <__ieee754_pow+0x96a>
 80076bc:	491a      	ldr	r1, [pc, #104]	; (8007728 <__ieee754_pow+0xa30>)
 80076be:	2000      	movs	r0, #0
 80076c0:	f7ff bb9e 	b.w	8006e00 <__ieee754_pow+0x108>
 80076c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076c8:	f7ff bb9a 	b.w	8006e00 <__ieee754_pow+0x108>
 80076cc:	9000      	str	r0, [sp, #0]
 80076ce:	f7ff bb76 	b.w	8006dbe <__ieee754_pow+0xc6>
 80076d2:	2100      	movs	r1, #0
 80076d4:	f7ff bb60 	b.w	8006d98 <__ieee754_pow+0xa0>
 80076d8:	00000000 	.word	0x00000000
 80076dc:	3fe62e43 	.word	0x3fe62e43
 80076e0:	fefa39ef 	.word	0xfefa39ef
 80076e4:	3fe62e42 	.word	0x3fe62e42
 80076e8:	0ca86c39 	.word	0x0ca86c39
 80076ec:	be205c61 	.word	0xbe205c61
 80076f0:	72bea4d0 	.word	0x72bea4d0
 80076f4:	3e663769 	.word	0x3e663769
 80076f8:	c5d26bf1 	.word	0xc5d26bf1
 80076fc:	3ebbbd41 	.word	0x3ebbbd41
 8007700:	af25de2c 	.word	0xaf25de2c
 8007704:	3f11566a 	.word	0x3f11566a
 8007708:	16bebd93 	.word	0x16bebd93
 800770c:	3f66c16c 	.word	0x3f66c16c
 8007710:	5555553e 	.word	0x5555553e
 8007714:	3fc55555 	.word	0x3fc55555
 8007718:	c2f8f359 	.word	0xc2f8f359
 800771c:	01a56e1f 	.word	0x01a56e1f
 8007720:	3fe00000 	.word	0x3fe00000
 8007724:	000fffff 	.word	0x000fffff
 8007728:	3ff00000 	.word	0x3ff00000
 800772c:	4090cbff 	.word	0x4090cbff
 8007730:	3f6f3400 	.word	0x3f6f3400
 8007734:	652b82fe 	.word	0x652b82fe
 8007738:	3c971547 	.word	0x3c971547

0800773c <__ieee754_sqrt>:
 800773c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007740:	ec55 4b10 	vmov	r4, r5, d0
 8007744:	4e56      	ldr	r6, [pc, #344]	; (80078a0 <__ieee754_sqrt+0x164>)
 8007746:	43ae      	bics	r6, r5
 8007748:	ee10 0a10 	vmov	r0, s0
 800774c:	ee10 3a10 	vmov	r3, s0
 8007750:	4629      	mov	r1, r5
 8007752:	462a      	mov	r2, r5
 8007754:	d110      	bne.n	8007778 <__ieee754_sqrt+0x3c>
 8007756:	ee10 2a10 	vmov	r2, s0
 800775a:	462b      	mov	r3, r5
 800775c:	f7f8 fef8 	bl	8000550 <__aeabi_dmul>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4620      	mov	r0, r4
 8007766:	4629      	mov	r1, r5
 8007768:	f7f8 fd3c 	bl	80001e4 <__adddf3>
 800776c:	4604      	mov	r4, r0
 800776e:	460d      	mov	r5, r1
 8007770:	ec45 4b10 	vmov	d0, r4, r5
 8007774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007778:	2d00      	cmp	r5, #0
 800777a:	dc10      	bgt.n	800779e <__ieee754_sqrt+0x62>
 800777c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007780:	4330      	orrs	r0, r6
 8007782:	d0f5      	beq.n	8007770 <__ieee754_sqrt+0x34>
 8007784:	b15d      	cbz	r5, 800779e <__ieee754_sqrt+0x62>
 8007786:	ee10 2a10 	vmov	r2, s0
 800778a:	462b      	mov	r3, r5
 800778c:	ee10 0a10 	vmov	r0, s0
 8007790:	f7f8 fd26 	bl	80001e0 <__aeabi_dsub>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	f7f9 f804 	bl	80007a4 <__aeabi_ddiv>
 800779c:	e7e6      	b.n	800776c <__ieee754_sqrt+0x30>
 800779e:	1509      	asrs	r1, r1, #20
 80077a0:	d076      	beq.n	8007890 <__ieee754_sqrt+0x154>
 80077a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80077a6:	07ce      	lsls	r6, r1, #31
 80077a8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80077ac:	bf5e      	ittt	pl
 80077ae:	0fda      	lsrpl	r2, r3, #31
 80077b0:	005b      	lslpl	r3, r3, #1
 80077b2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80077b6:	0fda      	lsrs	r2, r3, #31
 80077b8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80077bc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80077c0:	2000      	movs	r0, #0
 80077c2:	106d      	asrs	r5, r5, #1
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	f04f 0e16 	mov.w	lr, #22
 80077ca:	4684      	mov	ip, r0
 80077cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077d0:	eb0c 0401 	add.w	r4, ip, r1
 80077d4:	4294      	cmp	r4, r2
 80077d6:	bfde      	ittt	le
 80077d8:	1b12      	suble	r2, r2, r4
 80077da:	eb04 0c01 	addle.w	ip, r4, r1
 80077de:	1840      	addle	r0, r0, r1
 80077e0:	0052      	lsls	r2, r2, #1
 80077e2:	f1be 0e01 	subs.w	lr, lr, #1
 80077e6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80077ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80077ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077f2:	d1ed      	bne.n	80077d0 <__ieee754_sqrt+0x94>
 80077f4:	4671      	mov	r1, lr
 80077f6:	2720      	movs	r7, #32
 80077f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80077fc:	4562      	cmp	r2, ip
 80077fe:	eb04 060e 	add.w	r6, r4, lr
 8007802:	dc02      	bgt.n	800780a <__ieee754_sqrt+0xce>
 8007804:	d113      	bne.n	800782e <__ieee754_sqrt+0xf2>
 8007806:	429e      	cmp	r6, r3
 8007808:	d811      	bhi.n	800782e <__ieee754_sqrt+0xf2>
 800780a:	2e00      	cmp	r6, #0
 800780c:	eb06 0e04 	add.w	lr, r6, r4
 8007810:	da43      	bge.n	800789a <__ieee754_sqrt+0x15e>
 8007812:	f1be 0f00 	cmp.w	lr, #0
 8007816:	db40      	blt.n	800789a <__ieee754_sqrt+0x15e>
 8007818:	f10c 0801 	add.w	r8, ip, #1
 800781c:	eba2 020c 	sub.w	r2, r2, ip
 8007820:	429e      	cmp	r6, r3
 8007822:	bf88      	it	hi
 8007824:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007828:	1b9b      	subs	r3, r3, r6
 800782a:	4421      	add	r1, r4
 800782c:	46c4      	mov	ip, r8
 800782e:	0052      	lsls	r2, r2, #1
 8007830:	3f01      	subs	r7, #1
 8007832:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007836:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800783a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800783e:	d1dd      	bne.n	80077fc <__ieee754_sqrt+0xc0>
 8007840:	4313      	orrs	r3, r2
 8007842:	d006      	beq.n	8007852 <__ieee754_sqrt+0x116>
 8007844:	1c4c      	adds	r4, r1, #1
 8007846:	bf13      	iteet	ne
 8007848:	3101      	addne	r1, #1
 800784a:	3001      	addeq	r0, #1
 800784c:	4639      	moveq	r1, r7
 800784e:	f021 0101 	bicne.w	r1, r1, #1
 8007852:	1043      	asrs	r3, r0, #1
 8007854:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007858:	0849      	lsrs	r1, r1, #1
 800785a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800785e:	07c2      	lsls	r2, r0, #31
 8007860:	bf48      	it	mi
 8007862:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007866:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800786a:	460c      	mov	r4, r1
 800786c:	463d      	mov	r5, r7
 800786e:	e77f      	b.n	8007770 <__ieee754_sqrt+0x34>
 8007870:	0ada      	lsrs	r2, r3, #11
 8007872:	3815      	subs	r0, #21
 8007874:	055b      	lsls	r3, r3, #21
 8007876:	2a00      	cmp	r2, #0
 8007878:	d0fa      	beq.n	8007870 <__ieee754_sqrt+0x134>
 800787a:	02d7      	lsls	r7, r2, #11
 800787c:	d50a      	bpl.n	8007894 <__ieee754_sqrt+0x158>
 800787e:	f1c1 0420 	rsb	r4, r1, #32
 8007882:	fa23 f404 	lsr.w	r4, r3, r4
 8007886:	1e4d      	subs	r5, r1, #1
 8007888:	408b      	lsls	r3, r1
 800788a:	4322      	orrs	r2, r4
 800788c:	1b41      	subs	r1, r0, r5
 800788e:	e788      	b.n	80077a2 <__ieee754_sqrt+0x66>
 8007890:	4608      	mov	r0, r1
 8007892:	e7f0      	b.n	8007876 <__ieee754_sqrt+0x13a>
 8007894:	0052      	lsls	r2, r2, #1
 8007896:	3101      	adds	r1, #1
 8007898:	e7ef      	b.n	800787a <__ieee754_sqrt+0x13e>
 800789a:	46e0      	mov	r8, ip
 800789c:	e7be      	b.n	800781c <__ieee754_sqrt+0xe0>
 800789e:	bf00      	nop
 80078a0:	7ff00000 	.word	0x7ff00000

080078a4 <fabs>:
 80078a4:	ec51 0b10 	vmov	r0, r1, d0
 80078a8:	ee10 2a10 	vmov	r2, s0
 80078ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80078b0:	ec43 2b10 	vmov	d0, r2, r3
 80078b4:	4770      	bx	lr

080078b6 <finite>:
 80078b6:	b082      	sub	sp, #8
 80078b8:	ed8d 0b00 	vstr	d0, [sp]
 80078bc:	9801      	ldr	r0, [sp, #4]
 80078be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80078c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80078c6:	0fc0      	lsrs	r0, r0, #31
 80078c8:	b002      	add	sp, #8
 80078ca:	4770      	bx	lr
 80078cc:	0000      	movs	r0, r0
	...

080078d0 <nan>:
 80078d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80078d8 <nan+0x8>
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	00000000 	.word	0x00000000
 80078dc:	7ff80000 	.word	0x7ff80000

080078e0 <rint>:
 80078e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078e2:	ec51 0b10 	vmov	r0, r1, d0
 80078e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80078ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80078ee:	2e13      	cmp	r6, #19
 80078f0:	ee10 4a10 	vmov	r4, s0
 80078f4:	460b      	mov	r3, r1
 80078f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80078fa:	dc58      	bgt.n	80079ae <rint+0xce>
 80078fc:	2e00      	cmp	r6, #0
 80078fe:	da2b      	bge.n	8007958 <rint+0x78>
 8007900:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007904:	4302      	orrs	r2, r0
 8007906:	d023      	beq.n	8007950 <rint+0x70>
 8007908:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800790c:	4302      	orrs	r2, r0
 800790e:	4254      	negs	r4, r2
 8007910:	4314      	orrs	r4, r2
 8007912:	0c4b      	lsrs	r3, r1, #17
 8007914:	0b24      	lsrs	r4, r4, #12
 8007916:	045b      	lsls	r3, r3, #17
 8007918:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800791c:	ea44 0103 	orr.w	r1, r4, r3
 8007920:	4b32      	ldr	r3, [pc, #200]	; (80079ec <rint+0x10c>)
 8007922:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007926:	e9d3 6700 	ldrd	r6, r7, [r3]
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4630      	mov	r0, r6
 8007930:	4639      	mov	r1, r7
 8007932:	f7f8 fc57 	bl	80001e4 <__adddf3>
 8007936:	e9cd 0100 	strd	r0, r1, [sp]
 800793a:	463b      	mov	r3, r7
 800793c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007940:	4632      	mov	r2, r6
 8007942:	f7f8 fc4d 	bl	80001e0 <__aeabi_dsub>
 8007946:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800794a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800794e:	4639      	mov	r1, r7
 8007950:	ec41 0b10 	vmov	d0, r0, r1
 8007954:	b003      	add	sp, #12
 8007956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007958:	4a25      	ldr	r2, [pc, #148]	; (80079f0 <rint+0x110>)
 800795a:	4132      	asrs	r2, r6
 800795c:	ea01 0702 	and.w	r7, r1, r2
 8007960:	4307      	orrs	r7, r0
 8007962:	d0f5      	beq.n	8007950 <rint+0x70>
 8007964:	0851      	lsrs	r1, r2, #1
 8007966:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800796a:	4314      	orrs	r4, r2
 800796c:	d00c      	beq.n	8007988 <rint+0xa8>
 800796e:	ea23 0201 	bic.w	r2, r3, r1
 8007972:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007976:	2e13      	cmp	r6, #19
 8007978:	fa43 f606 	asr.w	r6, r3, r6
 800797c:	bf0c      	ite	eq
 800797e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007982:	2400      	movne	r4, #0
 8007984:	ea42 0306 	orr.w	r3, r2, r6
 8007988:	4918      	ldr	r1, [pc, #96]	; (80079ec <rint+0x10c>)
 800798a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800798e:	4622      	mov	r2, r4
 8007990:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007994:	4620      	mov	r0, r4
 8007996:	4629      	mov	r1, r5
 8007998:	f7f8 fc24 	bl	80001e4 <__adddf3>
 800799c:	e9cd 0100 	strd	r0, r1, [sp]
 80079a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079a4:	4622      	mov	r2, r4
 80079a6:	462b      	mov	r3, r5
 80079a8:	f7f8 fc1a 	bl	80001e0 <__aeabi_dsub>
 80079ac:	e7d0      	b.n	8007950 <rint+0x70>
 80079ae:	2e33      	cmp	r6, #51	; 0x33
 80079b0:	dd07      	ble.n	80079c2 <rint+0xe2>
 80079b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80079b6:	d1cb      	bne.n	8007950 <rint+0x70>
 80079b8:	ee10 2a10 	vmov	r2, s0
 80079bc:	f7f8 fc12 	bl	80001e4 <__adddf3>
 80079c0:	e7c6      	b.n	8007950 <rint+0x70>
 80079c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80079c6:	f04f 36ff 	mov.w	r6, #4294967295
 80079ca:	40d6      	lsrs	r6, r2
 80079cc:	4230      	tst	r0, r6
 80079ce:	d0bf      	beq.n	8007950 <rint+0x70>
 80079d0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80079d4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80079d8:	bf1f      	itttt	ne
 80079da:	ea24 0101 	bicne.w	r1, r4, r1
 80079de:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80079e2:	fa44 f202 	asrne.w	r2, r4, r2
 80079e6:	ea41 0402 	orrne.w	r4, r1, r2
 80079ea:	e7cd      	b.n	8007988 <rint+0xa8>
 80079ec:	08007c28 	.word	0x08007c28
 80079f0:	000fffff 	.word	0x000fffff
 80079f4:	00000000 	.word	0x00000000

080079f8 <scalbn>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	ec55 4b10 	vmov	r4, r5, d0
 80079fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007a02:	4606      	mov	r6, r0
 8007a04:	462b      	mov	r3, r5
 8007a06:	b99a      	cbnz	r2, 8007a30 <scalbn+0x38>
 8007a08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007a0c:	4323      	orrs	r3, r4
 8007a0e:	d036      	beq.n	8007a7e <scalbn+0x86>
 8007a10:	4b39      	ldr	r3, [pc, #228]	; (8007af8 <scalbn+0x100>)
 8007a12:	4629      	mov	r1, r5
 8007a14:	ee10 0a10 	vmov	r0, s0
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f7f8 fd99 	bl	8000550 <__aeabi_dmul>
 8007a1e:	4b37      	ldr	r3, [pc, #220]	; (8007afc <scalbn+0x104>)
 8007a20:	429e      	cmp	r6, r3
 8007a22:	4604      	mov	r4, r0
 8007a24:	460d      	mov	r5, r1
 8007a26:	da10      	bge.n	8007a4a <scalbn+0x52>
 8007a28:	a32b      	add	r3, pc, #172	; (adr r3, 8007ad8 <scalbn+0xe0>)
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	e03a      	b.n	8007aa6 <scalbn+0xae>
 8007a30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007a34:	428a      	cmp	r2, r1
 8007a36:	d10c      	bne.n	8007a52 <scalbn+0x5a>
 8007a38:	ee10 2a10 	vmov	r2, s0
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	4629      	mov	r1, r5
 8007a40:	f7f8 fbd0 	bl	80001e4 <__adddf3>
 8007a44:	4604      	mov	r4, r0
 8007a46:	460d      	mov	r5, r1
 8007a48:	e019      	b.n	8007a7e <scalbn+0x86>
 8007a4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007a4e:	460b      	mov	r3, r1
 8007a50:	3a36      	subs	r2, #54	; 0x36
 8007a52:	4432      	add	r2, r6
 8007a54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007a58:	428a      	cmp	r2, r1
 8007a5a:	dd08      	ble.n	8007a6e <scalbn+0x76>
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	a120      	add	r1, pc, #128	; (adr r1, 8007ae0 <scalbn+0xe8>)
 8007a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a64:	da1c      	bge.n	8007aa0 <scalbn+0xa8>
 8007a66:	a120      	add	r1, pc, #128	; (adr r1, 8007ae8 <scalbn+0xf0>)
 8007a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a6c:	e018      	b.n	8007aa0 <scalbn+0xa8>
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	dd08      	ble.n	8007a84 <scalbn+0x8c>
 8007a72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a7e:	ec45 4b10 	vmov	d0, r4, r5
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007a88:	da19      	bge.n	8007abe <scalbn+0xc6>
 8007a8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007a8e:	429e      	cmp	r6, r3
 8007a90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007a94:	dd0a      	ble.n	8007aac <scalbn+0xb4>
 8007a96:	a112      	add	r1, pc, #72	; (adr r1, 8007ae0 <scalbn+0xe8>)
 8007a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1e2      	bne.n	8007a66 <scalbn+0x6e>
 8007aa0:	a30f      	add	r3, pc, #60	; (adr r3, 8007ae0 <scalbn+0xe8>)
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	f7f8 fd53 	bl	8000550 <__aeabi_dmul>
 8007aaa:	e7cb      	b.n	8007a44 <scalbn+0x4c>
 8007aac:	a10a      	add	r1, pc, #40	; (adr r1, 8007ad8 <scalbn+0xe0>)
 8007aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0b8      	beq.n	8007a28 <scalbn+0x30>
 8007ab6:	a10e      	add	r1, pc, #56	; (adr r1, 8007af0 <scalbn+0xf8>)
 8007ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007abc:	e7b4      	b.n	8007a28 <scalbn+0x30>
 8007abe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ac2:	3236      	adds	r2, #54	; 0x36
 8007ac4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ac8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007acc:	4620      	mov	r0, r4
 8007ace:	4b0c      	ldr	r3, [pc, #48]	; (8007b00 <scalbn+0x108>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	e7e8      	b.n	8007aa6 <scalbn+0xae>
 8007ad4:	f3af 8000 	nop.w
 8007ad8:	c2f8f359 	.word	0xc2f8f359
 8007adc:	01a56e1f 	.word	0x01a56e1f
 8007ae0:	8800759c 	.word	0x8800759c
 8007ae4:	7e37e43c 	.word	0x7e37e43c
 8007ae8:	8800759c 	.word	0x8800759c
 8007aec:	fe37e43c 	.word	0xfe37e43c
 8007af0:	c2f8f359 	.word	0xc2f8f359
 8007af4:	81a56e1f 	.word	0x81a56e1f
 8007af8:	43500000 	.word	0x43500000
 8007afc:	ffff3cb0 	.word	0xffff3cb0
 8007b00:	3c900000 	.word	0x3c900000

08007b04 <_init>:
 8007b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b06:	bf00      	nop
 8007b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b0a:	bc08      	pop	{r3}
 8007b0c:	469e      	mov	lr, r3
 8007b0e:	4770      	bx	lr

08007b10 <_fini>:
 8007b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b12:	bf00      	nop
 8007b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b16:	bc08      	pop	{r3}
 8007b18:	469e      	mov	lr, r3
 8007b1a:	4770      	bx	lr
